package com.h2o.hive.udf;

import java.util.Map;
import water.genmodel.GenUtils.*;

// AUTOGENERATED BY H2O at Thu Mar 26 10:31:58 PDT 2015
// H2O v2.9.0.99999 (master - f341727e0b5b8d0e2ce85b443edd8a3a77f0412c)
//
// Standalone prediction code with sample test data for GBMModel named log_wagp_gbm_grid
//
// How to download, compile and execute:
//     mkdir tmpdir
//     cd tmpdir
//     curl http://127.0.0.1:54321/h2o-model.jar > h2o-model.jar
//     curl http://127.0.0.1:54321/2/GBMModelView.java?_modelKey=log_wagp_gbm_grid > log_wagp_gbm_grid.java
//     javac -cp h2o-model.jar -J-Xmx2g -J-XX:MaxPermSize=128m log_wagp_gbm_grid.java
//
//     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)

public class GBMPojo extends water.genmodel.GeneratedModel {
  // Number of trees in this model.
  public static final int NTREES = 110;
  // Number of internal trees in this model (= NTREES*NCLASSES).
  public static final int NTREES_INTERNAL = 110;

  // Names of columns used by model.
  public static final String[] NAMES = {"RELP","SCHL","COW","MAR","INDP","RAC1P","SEX","POBP","AGEP","WKHP","LOG_CAPGAIN","LOG_CAPLOSS","LOG_WAGP"};

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* RELP */ ColInfo_0.VALUES,
    /* SCHL */ ColInfo_1.VALUES,
    /* COW */ ColInfo_2.VALUES,
    /* MAR */ ColInfo_3.VALUES,
    /* INDP */ ColInfo_4.VALUES,
    /* RAC1P */ ColInfo_5.VALUES,
    /* SEX */ ColInfo_6.VALUES,
    /* POBP */ ColInfo_7.VALUES,
    /* AGEP */ ColInfo_8.VALUES,
    /* WKHP */ ColInfo_9.VALUES,
    /* LOG_CAPGAIN */ ColInfo_10.VALUES,
    /* LOG_CAPLOSS */ ColInfo_11.VALUES,
    /* LOG_WAGP */ ColInfo_12.VALUES
  };
  // Prior class distribution
  public static final float[] PRIOR_CLASS_DISTRIB = null;
  // Class distribution used for model building
  public static final float[] MODEL_CLASS_DISTRIB = null;

  public String[]   getNames() { return NAMES; } 
  public String[][] getDomainValues() { return DOMAINS; }
  public String     getUUID() { return "b2695b82-5d87-4435-837c-5d38dc365846"; }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final float[] predict( double[] data, float[] preds) { preds = predict( data, preds, 110); return preds; }
  public final float[] predict( double[] data, float[] preds, int maxIters ) {
    // System.err.println("Row (gencode.predict): " + java.util.Arrays.toString(data));
    java.util.Arrays.fill(preds,0f);
    // Call forest predicting class 0
    preds[1] += Forest_0_class_0.predict(data, maxIters - 0);
    // Compute Regression
    preds[1] += 10.07059383392334;
    preds[0] = preds[1];
    return preds;
  }
}
// The class representing column RELP
class ColInfo_0 {
  public static final String[] VALUES = new String[18];
  static {
    ColInfo_0_0.fill(VALUES);
  }
  static final class ColInfo_0_0 {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
      sa[2] = "2";
      sa[3] = "3";
      sa[4] = "4";
      sa[5] = "5";
      sa[6] = "6";
      sa[7] = "7";
      sa[8] = "8";
      sa[9] = "9";
      sa[10] = "10";
      sa[11] = "11";
      sa[12] = "12";
      sa[13] = "13";
      sa[14] = "14";
      sa[15] = "15";
      sa[16] = "16";
      sa[17] = "17";
    }
  }
}
// The class representing column SCHL
class ColInfo_1 {
  public static final String[] VALUES = new String[24];
  static {
    ColInfo_1_0.fill(VALUES);
  }
  static final class ColInfo_1_0 {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
      sa[6] = "7";
      sa[7] = "8";
      sa[8] = "9";
      sa[9] = "10";
      sa[10] = "11";
      sa[11] = "12";
      sa[12] = "13";
      sa[13] = "14";
      sa[14] = "15";
      sa[15] = "16";
      sa[16] = "17";
      sa[17] = "18";
      sa[18] = "19";
      sa[19] = "20";
      sa[20] = "21";
      sa[21] = "22";
      sa[22] = "23";
      sa[23] = "24";
    }
  }
}
// The class representing column COW
class ColInfo_2 {
  public static final String[] VALUES = new String[8];
  static {
    ColInfo_2_0.fill(VALUES);
  }
  static final class ColInfo_2_0 {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
      sa[6] = "7";
      sa[7] = "8";
    }
  }
}
// The class representing column MAR
class ColInfo_3 {
  public static final String[] VALUES = new String[5];
  static {
    ColInfo_3_0.fill(VALUES);
  }
  static final class ColInfo_3_0 {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
    }
  }
}
// The class representing column INDP
class ColInfo_4 {
  public static final String[] VALUES = new String[266];
  static {
    ColInfo_4_0.fill(VALUES);
  }
  static final class ColInfo_4_0 {
    static final void fill(String[] sa) {
      sa[0] = "170";
      sa[1] = "180";
      sa[2] = "190";
      sa[3] = "270";
      sa[4] = "280";
      sa[5] = "290";
      sa[6] = "370";
      sa[7] = "380";
      sa[8] = "390";
      sa[9] = "470";
      sa[10] = "490";
      sa[11] = "570";
      sa[12] = "580";
      sa[13] = "590";
      sa[14] = "670";
      sa[15] = "680";
      sa[16] = "690";
      sa[17] = "770";
      sa[18] = "1070";
      sa[19] = "1080";
      sa[20] = "1090";
      sa[21] = "1170";
      sa[22] = "1180";
      sa[23] = "1190";
      sa[24] = "1270";
      sa[25] = "1280";
      sa[26] = "1290";
      sa[27] = "1370";
      sa[28] = "1390";
      sa[29] = "1470";
      sa[30] = "1480";
      sa[31] = "1490";
      sa[32] = "1570";
      sa[33] = "1590";
      sa[34] = "1670";
      sa[35] = "1680";
      sa[36] = "1690";
      sa[37] = "1770";
      sa[38] = "1790";
      sa[39] = "1870";
      sa[40] = "1880";
      sa[41] = "1890";
      sa[42] = "1990";
      sa[43] = "2070";
      sa[44] = "2090";
      sa[45] = "2170";
      sa[46] = "2180";
      sa[47] = "2190";
      sa[48] = "2270";
      sa[49] = "2280";
      sa[50] = "2290";
      sa[51] = "2370";
      sa[52] = "2380";
      sa[53] = "2390";
      sa[54] = "2470";
      sa[55] = "2480";
      sa[56] = "2490";
      sa[57] = "2570";
      sa[58] = "2590";
      sa[59] = "2670";
      sa[60] = "2680";
      sa[61] = "2690";
      sa[62] = "2770";
      sa[63] = "2780";
      sa[64] = "2790";
      sa[65] = "2870";
      sa[66] = "2880";
      sa[67] = "2890";
      sa[68] = "2970";
      sa[69] = "2980";
      sa[70] = "2990";
      sa[71] = "3070";
      sa[72] = "3080";
      sa[73] = "3095";
      sa[74] = "3170";
      sa[75] = "3180";
      sa[76] = "3190";
      sa[77] = "3365";
      sa[78] = "3370";
      sa[79] = "3380";
      sa[80] = "3390";
      sa[81] = "3470";
      sa[82] = "3490";
      sa[83] = "3570";
      sa[84] = "3580";
      sa[85] = "3590";
      sa[86] = "3670";
      sa[87] = "3680";
      sa[88] = "3690";
      sa[89] = "3770";
      sa[90] = "3780";
      sa[91] = "3790";
      sa[92] = "3875";
      sa[93] = "3895";
      sa[94] = "3960";
      sa[95] = "3970";
      sa[96] = "3980";
      sa[97] = "3990";
      sa[98] = "4070";
      sa[99] = "4080";
      sa[100] = "4090";
      sa[101] = "4170";
      sa[102] = "4180";
      sa[103] = "4195";
      sa[104] = "4265";
      sa[105] = "4270";
      sa[106] = "4280";
      sa[107] = "4290";
      sa[108] = "4370";
      sa[109] = "4380";
      sa[110] = "4390";
      sa[111] = "4470";
      sa[112] = "4480";
      sa[113] = "4490";
      sa[114] = "4560";
      sa[115] = "4570";
      sa[116] = "4580";
      sa[117] = "4585";
      sa[118] = "4590";
      sa[119] = "4670";
      sa[120] = "4680";
      sa[121] = "4690";
      sa[122] = "4770";
      sa[123] = "4780";
      sa[124] = "4795";
      sa[125] = "4870";
      sa[126] = "4880";
      sa[127] = "4890";
      sa[128] = "4970";
      sa[129] = "4980";
      sa[130] = "4990";
      sa[131] = "5070";
      sa[132] = "5080";
      sa[133] = "5090";
      sa[134] = "5170";
      sa[135] = "5180";
      sa[136] = "5190";
      sa[137] = "5275";
      sa[138] = "5280";
      sa[139] = "5295";
      sa[140] = "5370";
      sa[141] = "5380";
      sa[142] = "5390";
      sa[143] = "5470";
      sa[144] = "5480";
      sa[145] = "5490";
      sa[146] = "5570";
      sa[147] = "5580";
      sa[148] = "5590";
      sa[149] = "5591";
      sa[150] = "5592";
      sa[151] = "5670";
      sa[152] = "5680";
      sa[153] = "5690";
      sa[154] = "5790";
      sa[155] = "6070";
      sa[156] = "6080";
      sa[157] = "6090";
      sa[158] = "6170";
      sa[159] = "6180";
      sa[160] = "6190";
      sa[161] = "6270";
      sa[162] = "6280";
      sa[163] = "6290";
      sa[164] = "6370";
      sa[165] = "6380";
      sa[166] = "6390";
      sa[167] = "6470";
      sa[168] = "6480";
      sa[169] = "6490";
      sa[170] = "6570";
      sa[171] = "6590";
      sa[172] = "6670";
      sa[173] = "6672";
      sa[174] = "6680";
      sa[175] = "6690";
      sa[176] = "6695";
      sa[177] = "6770";
      sa[178] = "6780";
      sa[179] = "6870";
      sa[180] = "6880";
      sa[181] = "6890";
      sa[182] = "6970";
      sa[183] = "6990";
      sa[184] = "7070";
      sa[185] = "7080";
      sa[186] = "7170";
      sa[187] = "7180";
      sa[188] = "7190";
      sa[189] = "7270";
      sa[190] = "7280";
      sa[191] = "7290";
      sa[192] = "7370";
      sa[193] = "7380";
      sa[194] = "7390";
      sa[195] = "7460";
      sa[196] = "7470";
      sa[197] = "7480";
      sa[198] = "7490";
      sa[199] = "7570";
      sa[200] = "7580";
      sa[201] = "7590";
      sa[202] = "7670";
      sa[203] = "7680";
      sa[204] = "7690";
      sa[205] = "7770";
      sa[206] = "7780";
      sa[207] = "7790";
      sa[208] = "7860";
      sa[209] = "7870";
      sa[210] = "7880";
      sa[211] = "7890";
      sa[212] = "7970";
      sa[213] = "7980";
      sa[214] = "7990";
      sa[215] = "8070";
      sa[216] = "8080";
      sa[217] = "8090";
      sa[218] = "8170";
      sa[219] = "8180";
      sa[220] = "8190";
      sa[221] = "8270";
      sa[222] = "8290";
      sa[223] = "8370";
      sa[224] = "8380";
      sa[225] = "8390";
      sa[226] = "8470";
      sa[227] = "8560";
      sa[228] = "8570";
      sa[229] = "8580";
      sa[230] = "8590";
      sa[231] = "8660";
      sa[232] = "8670";
      sa[233] = "8680";
      sa[234] = "8690";
      sa[235] = "8770";
      sa[236] = "8780";
      sa[237] = "8790";
      sa[238] = "8870";
      sa[239] = "8880";
      sa[240] = "8970";
      sa[241] = "8980";
      sa[242] = "8990";
      sa[243] = "9070";
      sa[244] = "9080";
      sa[245] = "9090";
      sa[246] = "9160";
      sa[247] = "9170";
      sa[248] = "9180";
      sa[249] = "9190";
      sa[250] = "9290";
      sa[251] = "9370";
      sa[252] = "9380";
      sa[253] = "9390";
      sa[254] = "9470";
      sa[255] = "9480";
      sa[256] = "9490";
      sa[257] = "9570";
      sa[258] = "9590";
      sa[259] = "9670";
      sa[260] = "9680";
      sa[261] = "9690";
      sa[262] = "9770";
      sa[263] = "9780";
      sa[264] = "9790";
      sa[265] = "9870";
    }
  }
}
// The class representing column RAC1P
class ColInfo_5 {
  public static final String[] VALUES = new String[9];
  static {
    ColInfo_5_0.fill(VALUES);
  }
  static final class ColInfo_5_0 {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
      sa[6] = "7";
      sa[7] = "8";
      sa[8] = "9";
    }
  }
}
// The class representing column SEX
class ColInfo_6 {
  public static final String[] VALUES = new String[2];
  static {
    ColInfo_6_0.fill(VALUES);
  }
  static final class ColInfo_6_0 {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
    }
  }
}
// The class representing column POBP
class ColInfo_7 {
  public static final String[] VALUES = new String[215];
  static {
    ColInfo_7_0.fill(VALUES);
  }
  static final class ColInfo_7_0 {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
      sa[5] = "8";
      sa[6] = "9";
      sa[7] = "10";
      sa[8] = "11";
      sa[9] = "12";
      sa[10] = "13";
      sa[11] = "15";
      sa[12] = "16";
      sa[13] = "17";
      sa[14] = "18";
      sa[15] = "19";
      sa[16] = "20";
      sa[17] = "21";
      sa[18] = "22";
      sa[19] = "23";
      sa[20] = "24";
      sa[21] = "25";
      sa[22] = "26";
      sa[23] = "27";
      sa[24] = "28";
      sa[25] = "29";
      sa[26] = "30";
      sa[27] = "31";
      sa[28] = "32";
      sa[29] = "33";
      sa[30] = "34";
      sa[31] = "35";
      sa[32] = "36";
      sa[33] = "37";
      sa[34] = "38";
      sa[35] = "39";
      sa[36] = "40";
      sa[37] = "41";
      sa[38] = "42";
      sa[39] = "44";
      sa[40] = "45";
      sa[41] = "46";
      sa[42] = "47";
      sa[43] = "48";
      sa[44] = "49";
      sa[45] = "50";
      sa[46] = "51";
      sa[47] = "53";
      sa[48] = "54";
      sa[49] = "55";
      sa[50] = "56";
      sa[51] = "60";
      sa[52] = "66";
      sa[53] = "69";
      sa[54] = "72";
      sa[55] = "78";
      sa[56] = "100";
      sa[57] = "102";
      sa[58] = "103";
      sa[59] = "104";
      sa[60] = "105";
      sa[61] = "106";
      sa[62] = "108";
      sa[63] = "109";
      sa[64] = "110";
      sa[65] = "116";
      sa[66] = "117";
      sa[67] = "118";
      sa[68] = "119";
      sa[69] = "120";
      sa[70] = "126";
      sa[71] = "127";
      sa[72] = "128";
      sa[73] = "129";
      sa[74] = "130";
      sa[75] = "132";
      sa[76] = "134";
      sa[77] = "136";
      sa[78] = "137";
      sa[79] = "138";
      sa[80] = "139";
      sa[81] = "140";
      sa[82] = "147";
      sa[83] = "148";
      sa[84] = "149";
      sa[85] = "150";
      sa[86] = "151";
      sa[87] = "152";
      sa[88] = "154";
      sa[89] = "156";
      sa[90] = "157";
      sa[91] = "158";
      sa[92] = "159";
      sa[93] = "160";
      sa[94] = "161";
      sa[95] = "162";
      sa[96] = "163";
      sa[97] = "164";
      sa[98] = "165";
      sa[99] = "168";
      sa[100] = "169";
      sa[101] = "200";
      sa[102] = "202";
      sa[103] = "203";
      sa[104] = "205";
      sa[105] = "206";
      sa[106] = "207";
      sa[107] = "208";
      sa[108] = "209";
      sa[109] = "210";
      sa[110] = "211";
      sa[111] = "212";
      sa[112] = "213";
      sa[113] = "214";
      sa[114] = "215";
      sa[115] = "216";
      sa[116] = "217";
      sa[117] = "218";
      sa[118] = "222";
      sa[119] = "223";
      sa[120] = "224";
      sa[121] = "226";
      sa[122] = "229";
      sa[123] = "231";
      sa[124] = "233";
      sa[125] = "235";
      sa[126] = "236";
      sa[127] = "238";
      sa[128] = "239";
      sa[129] = "240";
      sa[130] = "242";
      sa[131] = "243";
      sa[132] = "245";
      sa[133] = "246";
      sa[134] = "247";
      sa[135] = "248";
      sa[136] = "249";
      sa[137] = "253";
      sa[138] = "254";
      sa[139] = "300";
      sa[140] = "301";
      sa[141] = "303";
      sa[142] = "310";
      sa[143] = "311";
      sa[144] = "312";
      sa[145] = "313";
      sa[146] = "314";
      sa[147] = "315";
      sa[148] = "316";
      sa[149] = "321";
      sa[150] = "323";
      sa[151] = "324";
      sa[152] = "327";
      sa[153] = "328";
      sa[154] = "329";
      sa[155] = "330";
      sa[156] = "332";
      sa[157] = "333";
      sa[158] = "339";
      sa[159] = "340";
      sa[160] = "341";
      sa[161] = "343";
      sa[162] = "344";
      sa[163] = "360";
      sa[164] = "361";
      sa[165] = "362";
      sa[166] = "363";
      sa[167] = "364";
      sa[168] = "365";
      sa[169] = "368";
      sa[170] = "369";
      sa[171] = "370";
      sa[172] = "372";
      sa[173] = "373";
      sa[174] = "374";
      sa[175] = "399";
      sa[176] = "400";
      sa[177] = "407";
      sa[178] = "408";
      sa[179] = "412";
      sa[180] = "414";
      sa[181] = "416";
      sa[182] = "417";
      sa[183] = "420";
      sa[184] = "421";
      sa[185] = "423";
      sa[186] = "427";
      sa[187] = "429";
      sa[188] = "430";
      sa[189] = "436";
      sa[190] = "440";
      sa[191] = "444";
      sa[192] = "447";
      sa[193] = "448";
      sa[194] = "449";
      sa[195] = "451";
      sa[196] = "453";
      sa[197] = "454";
      sa[198] = "457";
      sa[199] = "459";
      sa[200] = "460";
      sa[201] = "461";
      sa[202] = "462";
      sa[203] = "463";
      sa[204] = "464";
      sa[205] = "467";
      sa[206] = "468";
      sa[207] = "501";
      sa[208] = "508";
      sa[209] = "511";
      sa[210] = "512";
      sa[211] = "515";
      sa[212] = "523";
      sa[213] = "527";
      sa[214] = "554";
    }
  }
}
// The class representing column AGEP
class ColInfo_8 {
  public static final String[] VALUES = null;
}
// The class representing column WKHP
class ColInfo_9 {
  public static final String[] VALUES = null;
}
// The class representing column LOG_CAPGAIN
class ColInfo_10 {
  public static final String[] VALUES = null;
}
// The class representing column LOG_CAPLOSS
class ColInfo_11 {
  public static final String[] VALUES = null;
}
// The class representing column LOG_WAGP
class ColInfo_12 {
  public static final String[] VALUES = null;
}

// Tree predictor for 0-tree and 0-class
class Tree_0_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 31.5f
      ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 8.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 3.5f ? -1.0895375f : -0.84775573f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.7468988f : -0.6497616f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 8.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */]) ? -0.594506f : -0.723148f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 27.5f ? -0.53412f : -0.3903188f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 17.5f ? -0.63436055f : -0.50623256f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 24.5f ? -0.42732683f : -0.31063357f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 23.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? -0.29603344f : -0.1791903f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? -0.18138503f : -0.050695382f))))
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 17.5f ? -0.51622295f : -0.34200606f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */]) ? -0.15826872f : 0.0f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 42.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */]) ? -0.06179138f : 0.0494227f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */]) ? -0.1363022f : 0.14820793f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 23.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.15422998f : -0.028970953f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[0 /* RELP */]) ? -0.16492541f : 0.07753843f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 42.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */]) ? -0.03759076f : 0.19958708f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.33851492f : 0.26025897f)))));
      return pred;
  }
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-4, -1, 3, 0};
  // {00000000 01000001 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 65, 0, 0};
  // {11111011 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, 2, 0};
  // {11111111 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, 0, 0};
  // {11111011 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-5, -1, 1, 0};
  // {11111111 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, 0, 0};
  // {11111111 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, 0, 0};
}

// Tree predictor for 1-tree and 0-class
class Tree_1_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 34.5f
      ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 16.5f
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 6.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 2.5f ? -0.8688295f : -0.6743018f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.5747346f : -0.4841818f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? -0.5226007f : -0.40902f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */]) ? -0.28420016f : -0.3023443f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || (float) data[0 /* RELP */] < 1.0f ? -0.10866743f : -0.28781196f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.5f ? -0.38914743f : -0.27612862f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */]) ? -0.12412296f : -0.20429336f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 252.5f ? -0.32447654f : -0.0856746f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 21.5f ? -0.18025127f : -0.09340154f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */]) ? -0.011465259f : 0.0f)
            : 0.0f))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 21.5f ? -0.14285015f : -0.046521306f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 41.5f ? 0.04752379f : 0.11935232f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 32.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.5f ? 0.004819387f : 0.10342534f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[1 /* SCHL */]) ? 0.3033704f : 0.18213727f)))));
      return pred;
  }
  // {11111010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-6, -1, 3, 0};
  // {11111010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-6, -1, 3, 0};
  // {11111010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-6, -1, 3, 0};
  // {00001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {14, 0, 0, 0};
  // {11111011 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-5, -1, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00110000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 48, 0};
}

// Tree predictor for 2-tree and 0-class
class Tree_2_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
      ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 8.5f ? -0.5281934f : -0.3747248f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.32450733f : -0.18477918f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */]) ? -0.27459592f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 4.5f ? -0.64415306f : -0.25524864f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 18.5f ? -0.32349652f : -0.15424533f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? -0.06158262f : 0.08316849f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.10608187f : 0.0f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 10.5f ? -0.2180782f : -0.10639963f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 18.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.2699787f : -0.29733574f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */]) ? -0.10751031f : 0.0f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.20620775f : -0.029943816f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 35.5f ? -0.010351819f : 0.042603787f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 32.0f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */]) ? -0.04919027f : 0.008633644f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[1 /* SCHL */]) ? -0.026244454f : 0.07367323f))
          : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 4.532273f ? 0.15326686f : 0.2408022f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[1 /* SCHL */]) ? 0.14759378f : 0.09496242f)))));
      return pred;
  }
  // {11111010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-6, -1, 3, 0};
  // {00001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {14, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {11111010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, -1, 3, 0};
  // {00001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {14, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {11111011 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-5, -1, 1, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, 0, 0, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 1, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-2, 0, 0, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {15, 0, 0, 0};
  // {00000000 10000000 00001111 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, -128, 15, 0};
  // {00000000 00000000 01110000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 112, 0};
}

// Tree predictor for 3-tree and 0-class
class Tree_3_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 28.5f
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 12.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 2.5f ? -0.5642468f : -0.33703607f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? -0.29649952f : -0.19072504f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 3.5f ? -0.3351892f : -0.20739911f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? -0.11869674f : 0.0013190947f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */]) ? -0.1823126f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.54034626f : -0.14942487f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? -0.2043432f : -0.12672071f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 257.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */]) ? -0.20940712f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 62.5f ? 0.012820503f : -0.13505435f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */]) ? -0.039223846f : 0.0f)
            : 0.0f))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 39.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */]) ? -0.07137622f : -0.07661354f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.042930562f : -0.019745259f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 43.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.5f ? -0.021973964f : 0.068761975f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 32.5f ? 0.06671714f : 0.14165747f)))));
      return pred;
  }
  // {11111010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-6, -1, 3, 0};
  // {00001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {14, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-4, 0, 0, 0};
  // {11111011 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -1, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 1, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {10, 0, 0, 0};
}

// Tree predictor for 4-tree and 0-class
class Tree_4_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 18.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 40.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 6.5f ? -0.3114568f : -0.20451628f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 7.5f ? -0.19903758f : -0.097690575f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 18.5f ? -0.203764f : -0.10523817f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[2 /* COW */]) ? -0.046900477f : 0.037010863f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */]) ? -0.10773727f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 52.0f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 142.5f ? -0.07864739f : -0.2284141f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 14.5f ? -0.2048945f : -0.03165527f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 257.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */]) ? -0.23598433f : -0.178143f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 29.5f ? -0.15926796f : -0.010616297f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 21.5f ? 0.045267034f : 0.1412763f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 68.0f ? 0.030760126f : -0.049515866f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f ? -0.0587271f : 0.007844455f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.07034789f : 0.012459613f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.5f ? -0.09686536f : -0.4203205f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.15493733f : 0.09283088f)))));
      return pred;
  }
  // {11111010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-6, -1, 3, 0};
  // {01000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {66, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {10, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {11111111 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, 0, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {15, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {15, 0, 0, 0};
  // {11011111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, 0, 0, 0};
}

// Tree predictor for 5-tree and 0-class
class Tree_5_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 26.5f
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || (float) data[0 /* RELP */] < 1.0f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */]) ? -0.08270154f : 0.041242152f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? -0.18852317f : -0.107147135f))
          : 0.0f)
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.11275832f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 4.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.44449404f : -0.1625618f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 20.5f ? -0.1586078f : -0.07213455f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 22.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */]) ? -0.09118898f : 0.0f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? -0.098208606f : 0.0011332323f))
          : 0.0f)
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f
          ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[1 /* SCHL */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */]) ? -0.08986189f : -0.032284796f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 198.5f ? 0.026939318f : -0.025409972f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 41.5f ? -0.0053737285f : 0.041566f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.08528576f : 0.03920652f)))));
      return pred;
  }
  // {11111010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-6, -1, 3, 0};
  // {11111010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-6, -1, 3, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {80, 0, 0, 0};
  // {00001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {14, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-2, 0, 0, 0};
  // {11111011 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, -1, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 1, 0};
  // {00000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, -128, 0, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {15, 0, 0, 0};
}

// Tree predictor for 6-tree and 0-class
class Tree_6_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
      ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */]) ? -0.11924612f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 233.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.14536972f : 0.02869042f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.045879655f : 0.04425838f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? -0.16553864f : -0.038689587f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 34.5f ? -9.3263126E-4f : 0.03850365f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 39.5f
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 13.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 4.5f ? -0.38155848f : -0.19285165f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.113803804f : 0.009410368f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? -0.08835058f : -0.014955436f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f ? -0.007890911f : 0.16499332f)))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 3.571628f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? -0.037029702f : 0.0067387205f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? -0.0377839f : 0.033342395f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.18962294f : 0.059019696f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 49.0f ? 0.08249767f : 0.13385397f)))));
      return pred;
  }
  // {11111011 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-5, -1, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 1, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 0, 0, 0};
  // {11111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {15, 0, 0, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {15, 0, 0, 0};
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {67, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {28, 0, 0, 0};
}

// Tree predictor for 7-tree and 0-class
class Tree_7_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
      ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 23.5f
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */]) ? -0.22396854f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.10130057f : 0.0f)
            : 0.0f))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */]) ? -0.02272161f : 0.0f)
            : 0.0f)
          : 0.0f))
      : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 16.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? -0.19177051f : -0.07470818f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? -0.07467057f : -0.028743457f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 23.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 22.5f ? -0.06767059f : -0.010579128f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.020581996f : -0.013449233f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 6.5f ? -0.13527535f : -0.054274943f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.027975133f : -0.008141249f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] != 22.0f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.0854538f : 0.03572685f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? 0.050654594f : 0.15193735f)))));
      return pred;
  }
  // {11111011 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-5, -1, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 1, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {15, 0, 0, 0};
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {67, 0, 0, 0};
}

// Tree predictor for 8-tree and 0-class
class Tree_8_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.040756613f : 0.0f)
            : 0.0f)
          : 0.0f)
        : 0.0f)
      : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 18.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.0f ? -0.1878392f : -0.107729495f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[1 /* SCHL */]) ? -0.08234867f : 0.07453416f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */]) ? -0.030490004f : -0.07032721f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 1.182332f ? -0.0054804278f : 0.04647177f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 42.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 40.0f ? -0.051013537f : -0.009828969f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 9.5f ? -0.08198209f : 0.019447964f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.17055325f : 0.019699637f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.032674614f : 0.07514559f)))));
      return pred;
  }
  // {11111011 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-5, -1, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 1, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {15, 0, 0, 0};
  // {01111000 00000011 00001000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {120, 3, 8, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, 1, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {19, 0, 0, 0};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {76, 0, 0, 0};
}

// Tree predictor for 9-tree and 0-class
class Tree_9_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.038157847f : 0.0f)
            : 0.0f)
          : 0.0f)
        : 0.0f)
      : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.079269f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f ? -0.027120667f : 0.0074607837f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.04423743f : 0.079689726f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 35.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.5f ? -0.036029138f : 0.011617409f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f ? 0.030685602f : 0.10220476f)))
        : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 221.5f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 208.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 198.5f ? -0.0021660517f : -0.041610487f)
            : (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 209, (int) data[4 /* INDP */]) ? 0.035394788f : 0.0f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 254.0f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.061861392f : -0.029668104f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? 0.0f : 0.04683289f)))));
      return pred;
  }
  // {11111011 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-5, -1, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -64, 0, 0};
  // {00011011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {27, 0, 0, 0};
  // {10011111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-97, 0, 0, 0};
  // {...209 0-bits... 00010000 00001000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 8};
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-104, 0, 0, 0};
  // {10011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-100, 0, 0, 0};
}

// Tree predictor for 10-tree and 0-class
class Tree_10_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
      ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 256.0f
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[2 /* COW */]) ? -0.16649014f : -0.1341853f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? -0.38246065f : -0.22798678f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */]) ? -0.11483358f : 0.0f)
            : 0.0f))
        : (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 256, (int) data[4 /* INDP */])
          ? (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 256, (int) data[4 /* INDP */])
            ? (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 256, (int) data[4 /* INDP */]) ? 0.058165234f : 0.0f)
            : 0.0f)
          : 0.0f))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 17.5f
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 2.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 93.5f ? 0.031191098f : -0.20563927f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? -0.07196524f : -0.025007924f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.246878f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? -0.101061575f : 0.03629001f)
            : 0.38443443f))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 9.5f ? -0.53739756f : -0.14870691f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 220.5f ? 0.0221067f : -0.014163331f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 46.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? -0.014748796f : 0.013939794f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.05354981f : 0.013986532f)))));
      return pred;
  }
  // {01111111 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {127, -1, 0, 0};
  // {01111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -64, 0, 0};
  // {...256 0-bits... 11111011 00000001}
  public static final byte[] GRPSPLIT4 = new byte[] {-5, 1};
  // {...256 0-bits... 11111011 00000001}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, 1};
  // {...256 0-bits... 11111011 00000001}
  public static final byte[] GRPSPLIT6 = new byte[] {-5, 1};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {01110001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {113, 0, 0, 0};
  // {00010101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {21, 0, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {74, 0, 0, 0};
}

// Tree predictor for 11-tree and 0-class
class Tree_11_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0537076f : 0.0f)
            : 0.0f)
          : 0.0f)
        : 0.0f)
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f
        ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 197.5f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 6.0f
            ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.06969021f : -0.18396764f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -0.01669653f : 0.11448522f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? -0.15646464f : -0.07186674f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.05389026f : -0.011436619f)))
        : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[1 /* SCHL */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.033632204f : 0.020978818f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.014534781f : -0.011856865f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.5175495f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.05178818f : 0.017480884f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.5f ? 0.06366314f : 0.012002576f)))));
      return pred;
  }
  // {11111111 11011111 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -33, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -64, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {15, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {84, 0, 0, 0};
  // {00000000 00000000 11111000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, -8, 0};
  // {11010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-48, 0, 0, 0};
}

// Tree predictor for 12-tree and 0-class
class Tree_12_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.056814328f : 0.0f)
            : 0.0f)
          : 0.0f)
        : 0.0f)
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.12089445f : -2.4789872E-4f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 68.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.097337574f : 0.010918717f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? -0.052804034f : -0.13171968f)))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.36947876f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 225.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.030948853f : 0.00957265f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 252.0f ? -0.036487143f : 0.07881488f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 11.176926f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f ? 0.048497196f : 0.00823224f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.17837997f : 0.08000499f)))));
      return pred;
  }
  // {11111111 11101111 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -17, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -64, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -64, 0, 0};
  // {01010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {83, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {84, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {88, 0, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 1, 0, 0};
}

// Tree predictor for 13-tree and 0-class
class Tree_13_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
      ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 258.0f
        ? (Double.isNaN(data[0]) || (float) data[0 /* RELP */] != 16.0f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? -0.14330037f : -0.07475801f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.0f ? -0.04371568f : 0.06689564f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 242.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[2 /* COW */]) ? -0.10448282f : -0.0966978f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.5f ? -0.36701357f : -0.15836635f)))
        : (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 258, (int) data[4 /* INDP */])
          ? (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 258, (int) data[4 /* INDP */])
            ? (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 258, (int) data[4 /* INDP */]) ? 0.068235524f : 0.0f)
            : 0.0f)
          : 0.0f))
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 17.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 16.5f ? -0.10442982f : -0.048054397f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.025457364f : -0.041847393f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.015154669f : 0.018123468f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[1 /* SCHL */]) ? -0.034680884f : 0.12022306f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.123439f ? -0.108045354f : -0.016825859f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 246.5f ? -0.008269444f : 0.026479963f))
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[1 /* SCHL */])
            ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[1 /* SCHL */]) ? -9.128044E-4f : 0.026496444f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.023612741f : -6.6134817E-4f)))));
      return pred;
  }
  // {11111111 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, 127, 0, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 0, 0, 0};
  // {...258 0-bits... 11111110}
  public static final byte[] GRPSPLIT2 = new byte[] {-2};
  // {...258 0-bits... 11111110}
  public static final byte[] GRPSPLIT3 = new byte[] {-2};
  // {...258 0-bits... 11111110}
  public static final byte[] GRPSPLIT4 = new byte[] {-2};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-2, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
  // {00100000 00111100 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {32, 60, 0, 0};
  // {01010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {83, 0, 0, 0};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {76, 0, 0, 0};
  // {00000000 00000000 00110000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 48, 0};
  // {00000000 00000000 01001000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 72, 0};
}

// Tree predictor for 14-tree and 0-class
class Tree_14_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 116.5f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 3.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.009660598f : -0.08135453f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 84.5f ? 0.011753763f : -0.02106001f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? -0.0330807f : -0.008150178f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 251.5f ? -0.037349682f : 0.05886458f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.02738272f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 54.5f ? -0.024493778f : 0.11576653f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 130.0f ? -0.0571307f : -0.27678195f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 38.0f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
            ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.45464015f : -0.06258185f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */]) ? 0.004064823f : 0.03376657f))
          : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.047233373f : 0.072959885f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */]) ? -0.011816301f : 0.031101516f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */]) ? -0.074279554f : 0.05348746f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.08203575f : 0.052835472f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? 0.04284516f : 0.09949028f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.16764033f : 0.10050855f)))));
      return pred;
  }
  // {00000000 00101100 00000000 00000000 10000000 10001000 00000100 00000000 00000000 10100000 00110001 01000000 00000000 00100000 00000000 00000000 00001000 00000000 00000000 00011000 00111000 11010010 11101000 10100000 00011110 00000000 00110000 00011010 00000000 00001000 00000000 01011000 00001110 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 44, 0, 0, -128, -120, 4, 0, 0, -96, 49, 64, 0, 32, 0, 0, 8, 0, 0, 24, 56, -46, -24, -96, 30, 0, 48, 26, 0, 8, 0, 88, 14, 0};
  // {11111100 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 1, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-16, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {5, 0, 0, 0};
  // {00000010 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 32, 0, 0};
  // {00011001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {25, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {3, 0, 0, 0};
  // {01101111 11111011 00000010 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {111, -5, 2, 0};
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {67, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {24, 0, 0, 0};
}

// Tree predictor for 15-tree and 0-class
class Tree_15_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[0 /* RELP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.040411446f : 0.0f)
            : 0.0f)
          : 0.0f)
        : 0.0f)
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 66.0f
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 38.5f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? -0.07523706f : -0.029848207f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.04311181f : -0.0012757549f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -6.402456E-5f : 0.012560255f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */]) ? -0.004860491f : 0.014283507f)))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.985835f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.03892167f : -0.029583067f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.04139127f : -0.076655105f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 219.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.5361f ? 0.12371173f : 0.32665145f)
            : -0.071891114f))));
      return pred;
  }
  // {11101111 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-17, -1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -128, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, 1, 0, 0};
  // {00010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {23, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
  // {00011011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {27, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, 0, 0, 0};
}

// Tree predictor for 16-tree and 0-class
class Tree_16_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[5 /* RAC1P */]) ? -0.037838213f : 0.002240098f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.217431f ? -0.029130166f : 0.25150204f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? -0.09313863f : -0.03158006f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.0f ? 8.934216E-4f : -0.064734064f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.01941849f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 112.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 61.5f ? -0.17398578f : 0.010810942f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 127.5f ? 0.12788534f : -0.025741752f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 38.0f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.07735073f : 0.0f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 17.0f ? 0.13254495f : -0.11946564f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 21.5f ? -9.14269E-4f : -0.12208255f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 53.0f ? 0.020214405f : 0.04849465f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 34.0f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */]) ? 0.003045732f : 0.031673554f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.004491196f : 0.08415047f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 53.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 63.5f ? 0.03658739f : 0.009578608f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 74.5f ? 0.06783282f : -0.30042046f)))));
      return pred;
  }
  // {00000000 00101100 00000000 00000000 10000000 10001000 00000100 00000000 00000000 11100000 00110001 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00011000 00010000 11010010 11101000 10100001 10001110 01000000 00110010 00111000 00000000 00001000 00000000 11011000 00001100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 44, 0, 0, -128, -120, 4, 0, 0, -32, 49, 0, 0, 32, 0, 0, 0, 0, 0, 24, 16, -46, -24, -95, -114, 64, 50, 56, 0, 8, 0, -40, 12, 0};
  // {11111100 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 1, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-3, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {11101111 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, -1, 2, 0};
  // {11100110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-26, 0, 0, 0};
  // {11100110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-26, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {3, 0, 0, 0};
  // {01111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {127, 0, 0, 0};
}

// Tree predictor for 17-tree and 0-class
class Tree_17_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 120.5f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 3.5f
            ? (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[4 /* INDP */]) ? -0.06421258f : 0.0049410583f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.640988f ? -3.0645682E-4f : 0.12913944f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 156.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? -0.018878633f : -0.04914893f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 195.5f ? 1.5488427E-4f : -0.01928067f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.015461001f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 50.5f ? -0.06696213f : 0.0071036904f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? -0.06331584f : -0.21599628f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.048250582f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? -0.11227285f : 0.012217522f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? 0.010626842f : -0.04078527f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? 0.019119546f : 0.035331164f)))
        : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.042347804f : 0.025060358f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.020376f ? 0.04000881f : 0.14593567f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 11.5f ? -0.044394597f : 0.05662846f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.0f ? 0.0016024063f : 0.023862004f)))));
      return pred;
  }
  // {00000000 01111100 00000000 00000000 10000000 10001000 00000100 00001000 00000000 11110001 10111101 01000000 10100000 00100010 00000000 00010000 00000000 00000000 00000000 00011000 00111000 11010010 11101000 11100000 10011110 01000100 00110000 00011001 00000000 11000000 00000000 01011010 00101111 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 124, 0, 0, -128, -120, 4, 8, 0, -15, -67, 64, -96, 34, 0, 16, 0, 0, 0, 24, 56, -46, -24, -32, -98, 68, 48, 25, 0, -64, 0, 90, 47, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {12, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {3, 0, 0, 0};
  // {11111111 11111001 00000010 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -7, 2, 0};
  // {11100110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-26, 0, 0, 0};
  // {11100110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-26, 0, 0, 0};
  // {00011011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {27, 0, 0, 0};
  // {10110011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-77, 1, 0, 0};
  // {11110010 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-14, 1, 0, 0};
}

// Tree predictor for 18-tree and 0-class
class Tree_18_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 252.5f ? -0.009446171f : -0.25594282f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.018162187f : -0.0064588557f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? -0.020648124f : -0.039084908f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 27.5f ? -0.059140954f : -0.0061365375f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */]) ? -0.0124088405f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 65.5f ? -0.037169587f : 0.036289647f)
            : -0.23105536f)))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 33.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? -0.25755763f : 0.01256545f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 52.0f ? 0.05547951f : 0.15781331f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 2.5f ? -0.20532776f : 0.03195743f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[3 /* MAR */]) ? 0.0017516993f : 0.0892365f)))
        : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 53.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.037499715f : 0.028483432f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? -0.037860192f : 0.05096873f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? -0.0120899575f : -0.09719602f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? -3.4121968E-4f : 0.014769545f)))));
      return pred;
  }
  // {11000000 11111100 00000000 00000000 10000000 10001000 00000100 00001000 00000100 11100001 10110101 01000000 10100000 00100000 00000000 00010000 00001000 00000000 00000000 00011000 00010000 11010110 11001000 10000000 10001110 01000100 00110000 00110011 00000000 11001000 00000000 11010010 01101111 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, -4, 0, 0, -128, -120, 4, 8, 4, -31, -75, 64, -96, 32, 0, 16, 8, 0, 0, 24, 16, -42, -56, -128, -114, 68, 48, 51, 0, -56, 0, -46, 111, 0};
  // {11111100 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 1, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 1, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {88, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {3, 0, 0, 0};
  // {00000100 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 32, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {29, 0, 0, 0};
  // {11010111 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-41, -1, 2, 0};
  // {11010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-41, 0, 0, 0};
  // {01011111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {95, -1, 3, 0};
  // {00010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {23, 0, 0, 0};
}

// Tree predictor for 19-tree and 0-class
class Tree_19_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.0f
            ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.0016266507f : -0.011466444f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 252.5f ? -0.023844993f : -0.11673649f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.026985845f : -0.011896401f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 93.5f ? -0.13521926f : -0.0033371632f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 2.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.09298097f : -0.24682039f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */]) ? -0.047958057f : 0.095097885f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */]) ? -0.009908855f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f ? 0.025386352f : -0.06362567f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 53.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 27.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.12811239f : 0.03817696f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? -0.038906027f : -0.109281085f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? 0.017418126f : 0.025213784f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 2.069081f ? 0.013733947f : 0.033579927f)))
        : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 129.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 72.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.261601f ? 0.0413795f : 0.0975929f)
            : -0.13201304f)
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? -0.10317167f : 0.0118684275f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 27.0f ? 0.15179008f : 0.04792306f)))));
      return pred;
  }
  // {11000000 10111101 00100010 00000000 10000000 10001000 00000100 00000000 00100000 11110001 10110001 00000000 01000000 00100010 10000010 00000000 00001000 00000000 00000000 10011000 00101000 11000010 01101000 11000000 10011110 00000000 00110010 00010000 10000000 10100000 10000010 10010010 01110111 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, -67, 34, 0, -128, -120, 4, 0, 32, -15, -79, 0, 64, 34, -126, 0, 8, 0, 0, -104, 40, -62, 104, -64, -98, 0, 50, 16, -128, -96, -126, -110, 119, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 1, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-16, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-4, 0, 0, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-2, 1, 0, 0};
  // {00001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {11, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {01111111 11110101 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {127, -11, 3, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {15, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
}

// Tree predictor for 20-tree and 0-class
class Tree_20_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 29.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */]) ? -0.010156212f : 0.002686449f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? -0.010429069f : 0.02205926f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.217431f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? -0.007060204f : -0.02131713f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.37165853f : 0.09781193f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */]) ? -0.008066593f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 179.5f ? 0.003852106f : -0.05265094f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.06747426f : 0.07935412f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 33.5f
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? -0.12320569f : 0.066510566f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 24.5f ? 0.1069356f : -5.8136915E-4f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
            ? -0.16888945f
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 2.5f ? -0.056133218f : 0.04335745f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 68.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 42.0f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.03743193f : 0.01236601f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.039385796f : 0.023387913f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 48.0f ? -0.021360686f : -0.09496553f)
            : 0.22880231f))));
      return pred;
  }
  // {11000000 01111101 00100000 00000000 10000000 10001000 00000100 00001000 00000100 11100101 10110101 01000000 01000000 00100010 00000010 00000000 00000000 00000000 00000000 00011000 00010000 11010010 11000100 10100001 10000110 10000100 00110000 00011001 00000000 11100000 01000000 00001011 01111100 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, 125, 32, 0, -128, -120, 4, 8, 4, -27, -75, 64, 64, 34, 2, 0, 0, 0, 0, 24, 16, -46, -60, -95, -122, -124, 48, 25, 0, -32, 64, 11, 124, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {84, 0, 0, 0};
  // {01011111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {95, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-4, 0, 0, 0};
  // {00010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {23, 0, 0, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-2, 0, 0, 0};
  // {11110111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, -1, 3, 0};
  // {11101111 11111101 00000011 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, -3, 3, 0};
  // {11111011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-5, 1, 0, 0};
  // {00000000 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 2, 0};
}

// Tree predictor for 21-tree and 0-class
class Tree_21_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 68.0f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? -0.008189098f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? -0.047866173f : 0.010124108f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.030021723f : -0.0027583805f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? 0.01923567f : -0.06153543f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */]) ? -0.0064013177f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 39.5f ? 0.023702499f : -0.03282094f)
            : -0.22058846f)))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.0f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 12.0f
            ? -0.1853606f
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 30.0f ? -0.015069041f : -0.07013036f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.048621498f : -0.031955983f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[3 /* MAR */]) ? -0.012295443f : 0.012668883f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.5f ? 0.016940475f : 0.06177306f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 48.5f ? 0.013196236f : 0.02864433f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 22.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 159.5f ? 0.08191835f : -0.08986881f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.640988f ? 0.03877995f : -0.11400764f)))));
      return pred;
  }
  // {11000000 10111101 00000000 00001000 10000000 10001100 00000110 00000000 00100000 10110001 10111001 00000000 11100000 00100001 00000000 00010000 00001000 00000000 00000000 11111000 00000000 01000110 01110100 00000000 10010110 01000000 00110010 01110010 10000000 00001000 10000000 00010011 01100101 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, -67, 0, 8, -128, -116, 6, 0, 32, -79, -71, 0, -32, 33, 0, 16, 8, 0, 0, -8, 0, 70, 116, 0, -106, 64, 50, 114, -128, 8, -128, 19, 101, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-108, 0, 0, 0};
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-108, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-6, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {01111111 11111011 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {127, -5, 3, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-2, 1, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {19, 0, 0, 0};
}

// Tree predictor for 22-tree and 0-class
class Tree_22_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.006977105f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 39.0f ? -0.015327518f : 0.033557504f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 58.5f ? -0.016841227f : -0.077045776f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */]) ? -0.0052582608f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? 0.021845762f : -0.035759598f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? -0.19060911f : 8.1706024E-4f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.00768535f : 0.012153429f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f ? 0.034541707f : 0.004254639f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 21.0f ? 0.045908097f : 0.11547864f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 34.5f ? -0.004894575f : 0.020262634f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */]) ? -0.033036243f : 0.120641045f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 49.0f ? -0.028777378f : -0.08783765f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? -0.049939916f : -0.0024247782f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.016066201f : 0.038708817f)))));
      return pred;
  }
  // {11000000 10111101 00100010 00000000 00000000 10001010 00000110 00000000 00000010 11100101 10100001 00000000 01010000 10100001 10000010 00000000 00000000 00000000 00010001 00111000 00101000 01010010 01011100 01000001 10001011 00000100 00100000 00011000 00000000 11100000 00000010 10000011 01000101 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, -67, 34, 0, 0, -118, 6, 0, 2, -27, -95, 0, 80, -95, -126, 0, 0, 0, 17, 56, 40, 82, 92, 65, -117, 4, 32, 24, 0, -32, 2, -125, 69, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 0, 0, 0};
  // {01011111 11111101 00000011 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {95, -3, 3, 0};
  // {10100000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-96, 1, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-3, 1, 0, 0};
}

// Tree predictor for 23-tree and 0-class
class Tree_23_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.007195743f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 80.0f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.033572208f : 0.0033355416f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? -0.05992713f : -0.35151082f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 2.069081f ? -0.03288871f : 0.037489183f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 39.5f ? -0.049288128f : 0.030203858f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? -0.028723706f : 0.18086882f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.0035469949f : 0.0058164443f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */]) ? -0.023653723f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.07046268f : -9.2082453E-4f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.867491f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f ? 0.026442891f : 0.067328654f)
            : 0.2627206f))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 34.0f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 49.5f ? -0.19649538f : -0.010455715f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.011980737f : 0.050153274f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 48.0f ? -0.01443853f : 0.007271447f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.01950318f : 0.0069759577f)))));
      return pred;
  }
  // {01000000 11111101 00100000 00001010 10000000 10001000 00000000 00001000 00100100 01110000 10111100 01000000 11110000 00100010 00000010 00000010 00001000 00000000 00010001 00111000 00000000 11000111 01000100 00100000 10000010 11000000 00100000 11110001 00000000 10100000 00000000 11000001 01000100 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, -3, 32, 10, -128, -120, 0, 8, 36, 112, -68, 64, -16, 34, 2, 2, 8, 0, 17, 56, 0, -57, 68, 32, -126, -64, 32, -15, 0, -96, 0, -63, 68, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {84, 0, 0, 0};
  // {01110011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {115, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, 0, 0, 0};
  // {00011001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {25, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {3, 0, 0, 0};
  // {00000100 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 2, 0};
  // {00010000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 32, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 64, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {29, 0, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-3, 1, 0, 0};
}

// Tree predictor for 24-tree and 0-class
class Tree_24_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */]) ? -0.020069327f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -0.004002078f : 0.0f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.015953204f : -0.0042379135f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 93.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 52.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.0046536764f : 0.008789324f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 129.0f ? 0.028958593f : -0.03932542f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f
            ? -0.3756956f
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.5f ? 0.025044637f : -0.18686885f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 27.5f ? -0.030679006f : -0.1387642f)
            : 0.11724161f)
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.029509082f : -0.07083578f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? 0.0236868f : 0.027242191f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 39.5f ? -0.023558155f : 0.027563408f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */]) ? 0.022833243f : 0.0083922865f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[1 /* SCHL */]) ? -0.020816134f : -0.003217928f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.064546f ? 0.00686559f : 0.03904278f)))));
      return pred;
  }
  // {11000000 10111101 00000000 00001000 00000000 10001111 00000110 00010000 00000010 10100101 10100000 00000000 01000000 00100001 00000110 00010000 00000000 00000000 00010000 11111000 00101000 01010010 11100100 10000000 10010011 00000000 00100000 00010010 10000000 01101000 01000010 00001011 00100011 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, -67, 0, 8, 0, -113, 6, 16, 2, -91, -96, 0, 64, 33, 6, 16, 0, 0, 16, -8, 40, 82, -28, -128, -109, 0, 32, 18, -128, 104, 66, 11, 35, 1};
  // {11111110 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -1, 2, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, 0, 0};
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-108, 0, 0, 0};
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-108, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {88, 0, 0, 0};
  // {11111111 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, 1, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {29, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {3, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {3, 0, 0, 0};
  // {00010101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {21, 0, 0, 0};
  // {00000000 00000000 11011100 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, -36, 0};
}

// Tree predictor for 25-tree and 0-class
class Tree_25_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.006035172f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 19.0f ? -0.01918273f : 0.010298295f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 180.5f ? -0.009003175f : -0.22073118f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */]) ? -0.005135251f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 4.9756474f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 41.5f ? 0.022297699f : -0.029415792f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 7.4215198f ? -0.17570119f : -0.06884622f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? 0.0028216513f : 0.0072676204f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? 0.014748461f : 0.013294416f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[0 /* RELP */]) ? -0.002451028f : 0.02707506f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 68.5f ? 0.013151596f : -0.036022466f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 46.5f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 14.5f ? -0.051435415f : -7.812538E-5f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT16, 0, (int) data[5 /* RAC1P */]) ? -0.008424953f : 0.0070009097f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT17, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 61.5f ? -0.099898666f : 0.11336682f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.020376f ? 0.023741191f : 0.1579381f)))));
      return pred;
  }
  // {01000000 00111101 00100010 00000010 10000000 10001010 00000000 00010000 00000000 01100011 00100101 00000000 11110100 10000010 10000100 00000010 01010001 00000000 00000001 00110001 00000000 11000011 01011101 01000000 11001110 10000100 00010010 01011001 00000000 10000000 10000000 00000011 00000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 61, 34, 2, -128, -118, 0, 16, 0, 99, 37, 0, -12, -126, -124, 2, 81, 0, 1, 49, 0, -61, 93, 64, -50, -124, 18, 89, 0, -128, -128, 3, 0, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {84, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {3, 0, 0, 0};
  // {00000000 00100000 00000010 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 32, 2, 0};
  // {11111111 11011111 00000001 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -33, 1, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-3, 1, 0, 0};
  // {11011111 11110111 00000011 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-33, -9, 3, 0};
}

// Tree predictor for 26-tree and 0-class
class Tree_26_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.005439337f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.0031832752f : 0.0f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f ? -0.018876057f : 0.007741745f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? 0.022662135f : 0.10689815f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? 0.025288237f : -0.0077712624f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 129.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 49.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? -0.16989692f : -0.03444636f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 56.5f ? 0.020247344f : 0.08208881f))
          : -0.26910594f)
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.099086f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? 0.010937136f : 0.017560543f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */]) ? -0.0015552542f : 0.016155438f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f
            ? 0.33756196f
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.305933f ? 0.12408187f : 0.028821364f)))));
      return pred;
  }
  // {11000000 11111101 00000000 00000000 00000000 10000011 00000110 00111000 00100100 10101110 00111000 01000000 01000100 01100001 00000110 00100000 00011000 00000000 00010001 00110001 00000000 01000110 11110100 10000001 10010011 01000000 00100000 00100001 00000000 10100000 00000000 00000001 00000001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, -3, 0, 0, 0, -125, 6, 56, 36, -82, 56, 64, 68, 97, 6, 32, 24, 0, 17, 49, 0, 70, -12, -127, -109, 64, 32, 33, 0, -96, 0, 1, 1, 1};
  // {11111110 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -1, 2, 0};
  // {00000000 10000000 00000010 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, 2, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -128, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {88, 0, 0, 0};
  // {01000110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {70, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {88, 0, 0, 0};
  // {11101111 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, 127, 3, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {17, 0, 0, 0};
}

// Tree predictor for 27-tree and 0-class
class Tree_27_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 96.5f ? 0.015847553f : -0.004740923f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */]) ? -0.006206933f : 0.0066353003f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[5 /* RAC1P */]) ? -0.007760683f : -0.022879882f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f ? 0.0027722789f : -0.01876995f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 2.069081f ? -0.02775891f : 0.03871424f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 224.5f ? 0.02733947f : -0.013419852f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 118.5f ? -0.025409468f : 0.05901749f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? 0.0023554382f : 0.0072861905f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 49.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 56.0f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */]) ? -0.0334831f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 33.5f ? 0.029376443f : 0.2174288f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? 0.008815147f : 0.006714312f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[3 /* MAR */]) ? -0.005828514f : 0.008305347f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
          ? 0.20202924f
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 75.0f ? 0.009246452f : -0.08079676f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[0 /* RELP */]) ? -7.922622E-4f : 0.02768357f)))));
      return pred;
  }
  // {11000000 00111101 00100000 00001010 10000000 10001101 00000000 00110000 00000000 01011011 10100000 00000000 11110000 01000000 00000000 00010010 01000001 00000000 00000000 00001000 00100000 11010011 01000101 01100000 10000010 00001100 00010000 11011010 01001000 00100000 11000000 00010011 00010010 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, 61, 32, 10, -128, -115, 0, 48, 0, 91, -96, 0, -16, 64, 0, 18, 65, 0, 0, 8, 32, -45, 69, 96, -126, 12, 16, -38, 72, 32, -64, 19, 18, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {22, 0, 0, 0};
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-104, 0, 0, 0};
  // {11011100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-36, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-4, 0, 0, 0};
  // {00010101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {21, 0, 0, 0};
  // {11110111 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-9, -1, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, -64, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {17, 0, 0, 0};
  // {01100001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {97, 0, 0, 0};
  // {00000111 00100000 00000001 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {7, 32, 1, 0};
}

// Tree predictor for 28-tree and 0-class
class Tree_28_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.005317f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.002628733f : 0.0061324122f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f ? -0.020220654f : 0.00986852f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 80.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.0f ? 0.15335716f : 0.014573606f)
            : -0.14839117f)))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 23.5f ? -0.01961969f : 0.068689935f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */]) ? -0.042643864f : -0.029179383f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 26.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.03289359f : 0.135986f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.06339374f : -0.13501865f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 9.5f
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.768963f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 9.5f ? -0.2941656f : -0.02837605f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.29173815f : 2.5427452E-4f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 39.5f ? -0.007082536f : 0.009442643f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? 0.00251443f : 0.018662892f)))));
      return pred;
  }
  // {01000000 10111101 00100000 00000000 00000000 10000010 00000010 00110000 00100010 10101110 00110101 00000000 01010000 10110010 00000110 00000000 01000000 00000000 00010000 10100001 00000010 00100010 01001101 00010000 01001111 00000000 10000011 00100001 10000000 01100010 00000010 10000011 00110000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, -67, 32, 0, 0, -126, 2, 48, 34, -82, 53, 0, 80, -78, 6, 0, 64, 0, 16, -95, 2, 34, 77, 16, 79, 0, -125, 33, -128, 98, 2, -125, 48, 1};
  // {11111110 01111111 00000010 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 2, 0};
  // {00000000 01100000 00000010 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 96, 2, 0};
  // {00000000 01100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 96, 0, 0};
  // {00000000 01100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 96, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {11001111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-49, -1, 3, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {3, 0, 0, 0};
  // {01111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {126, 0, 0, 0};
  // {01111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {126, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {00000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {7, 0, 0, 0};
}

// Tree predictor for 29-tree and 0-class
class Tree_29_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.004166116f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.513014f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.020443855f : 0.0015831441f)
            : 0.21936502f))
        : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 59.5f ? -0.014265165f : 0.025611453f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 23.5f ? 0.039787963f : -0.0051290873f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 80.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */]) ? -0.018163146f : 0.009863939f)
            : -0.28315642f)))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.0020135676f : 0.0029341304f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.0046919375f : 0.018956814f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.452915f ? 0.044939242f : -0.046256308f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 51.5f ? -0.027376689f : 0.03173927f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[0 /* RELP */]) ? -0.010005639f : -8.822572E-4f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 10.5f ? -0.093412325f : 0.012245004f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? -0.0017124905f : -0.04308554f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 96.5f ? 0.014698231f : -0.0030154707f)))));
      return pred;
  }
  // {11000000 00111101 00000010 00001000 00000000 10001101 00000100 00011000 00000100 01011001 10100000 01000000 01000000 01010001 10000000 00000000 00011001 00000000 00000001 01101000 00001010 01100111 11110100 00000000 11010010 11000100 00100000 11000000 00001000 10000000 10000000 00000001 00110001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, 61, 2, 8, 0, -115, 4, 24, 4, 89, -96, 64, 64, 81, -128, 0, 25, 0, 1, 104, 10, 103, -12, 0, -46, -60, 32, -64, 8, -128, -128, 1, 49, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {84, 0, 0, 0};
  // {01110011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {115, 1, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {28, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {3, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {17, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {18, 0, 0, 0};
  // {10111110 11001111 00000011 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-66, -49, 3, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-3, 1, 0, 0};
}

// Tree predictor for 30-tree and 0-class
class Tree_30_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0037076443f : 0.0f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.0f ? 0.006685587f : -0.037026726f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f ? 0.04326397f : -0.033030428f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? -0.16242614f : -0.0032616702f)))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 1.1577001f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.027940612f : 0.011331679f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */]) ? -0.015124275f : 0.0023200868f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 105.5f ? 0.18314278f : 0.052061412f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? -0.15751079f : 0.016333032f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.02065694f : 0.008763832f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f ? -0.0045742546f : 0.043113515f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 2.5f ? -0.19656096f : 0.039359137f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[3 /* MAR */]) ? -6.127648E-4f : 0.010801687f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[2 /* COW */]) ? 0.0037403572f : 0.025623456f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT16, 0, (int) data[5 /* RAC1P */]) ? -0.0227071f : 0.011465009f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? -0.021505592f : 0.021504855f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 59.5f ? 0.008065714f : -0.01974874f)))));
      return pred;
  }
  // {01000000 11111011 00000000 00000010 10000000 10000010 00010010 00110000 00100000 00000110 00100101 00000000 10110100 10100010 00000110 00110010 00000000 00000000 00010000 00110001 00100000 10110010 01001101 11000001 00001010 00001000 00000010 00010010 01000000 01101000 10000000 01010011 00000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, -5, 0, 2, -128, -126, 18, 48, 32, 6, 37, 0, -76, -94, 6, 50, 0, 0, 16, 49, 32, -78, 77, -63, 10, 8, 2, 18, 64, 104, -128, 83, 0, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, 1, 0, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {5, 0, 0, 0};
  // {00000010 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 32, 0, 0};
  // {00100000 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {32, 0, 2, 0};
  // {01000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {64, -128, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {20, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {16, 0, 0, 0};
  // {00110001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {49, 0, 0, 0};
}

// Tree predictor for 31-tree and 0-class
class Tree_31_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0029610319f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 239.5f ? -0.002324856f : 0.020991543f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.018356346f : 0.031662095f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 83.5f
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.0013526268f : -0.013744975f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 119.5f ? -0.017254911f : 0.006080175f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 41.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 17.5f ? -0.30342284f : 0.027486226f)
            : 0.052927393f)))
      : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.960924f
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 137.5f ? -0.08695321f : 0.21612486f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.5f ? 0.022346942f : -0.042712454f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? -0.015334038f : 0.01834708f)
            : (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 8.513266f ? 0.004627906f : 0.12390885f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? -0.03313026f
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? -0.25734702f : 0.07868428f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.054668453f : 0.020058673f)))));
      return pred;
  }
  // {01000000 00111101 00100000 00001000 00000000 10001001 00011000 00111000 10000011 11101000 00111000 00000000 01000000 01010001 00000100 00010000 00000000 00000000 00010001 11100001 00001010 00100010 01010101 00110000 10000111 11000000 10010000 01101001 10000000 10000000 01000010 00000001 00000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 61, 32, 8, 0, -119, 24, 56, -125, -24, 56, 0, 64, 81, 4, 16, 0, 0, 17, -31, 10, 34, 85, 48, -121, -64, -112, 105, -128, -128, 66, 1, 0, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {67, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {28, 0, 0, 0};
  // {01100011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {99, 1, 0, 0};
  // {11011111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, -1, 3, 0};
  // {11111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-5, 0, 0, 0};
}

// Tree predictor for 32-tree and 0-class
class Tree_32_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0038483709f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 34.0f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 12.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -0.018972212f : 0.0097037f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.655712f ? 0.011866559f : 0.14019401f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 140.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.0032093623f : -0.011765357f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? 0.1629166f : -0.029930236f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 42.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.030561505f : 0.0f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.14643402f : 0.051409088f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 43.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */]) ? -0.10392512f : 0.040113926f)
            : 0.2677043f))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 67.5f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.5f ? -0.016648434f : 0.009667634f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.0033813694f : 0.0096052f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? -0.03888922f : -0.019743323f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.1425463f : 0.016429f)))));
      return pred;
  }
  // {10000000 11111011 00000000 00000010 10000000 10000110 00000110 00000000 00000001 00010111 10100000 01000000 11010000 00100010 10000010 00000000 00010000 00000000 00000000 00001000 00000010 01100011 11100100 00010000 11010001 00001100 00000001 10000100 01101000 11101010 10000000 00001011 01001000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, -5, 0, 2, -128, -122, 6, 0, 1, 23, -96, 64, -48, 34, -126, 0, 16, 0, 0, 8, 2, 99, -28, 16, -47, 12, 1, -124, 104, -22, -128, 11, 72, 1};
  // {11111110 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -1, 2, 0};
  // {00000000 10000000 00000010 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, 2, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -128, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {11101111 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, -1, 1, 0};
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-104, 0, 0, 0};
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-104, 0, 0, 0};
  // {00100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {35, 0, 0, 0};
  // {00000000 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 2, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {17, 0, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, 1, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-32, 0, 0, 0};
  // {11111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-5, 0, 0, 0};
}

// Tree predictor for 33-tree and 0-class
class Tree_33_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0029345835f : 0.0f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? -0.00810953f : 0.018838316f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.160872f : 0.003580724f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? -0.13143453f : -0.017490491f)))
        : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 24.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 65.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? -0.021782959f : -0.12881453f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 32.5f ? 0.16205254f : -0.0038859285f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 10.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? -0.17374346f : 0.029109651f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[1 /* SCHL */]) ? -0.009866597f : 0.0048527857f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */]) ? -0.03181227f : 0.0128096f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.034993064f : -0.0029748015f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? -0.086268984f : -0.011840312f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.013416133f : -6.470255E-4f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 6.0878096f ? -0.04000197f : -0.22235614f)
            : 0.13520733f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 19.0f ? -0.002925154f : 0.029079853f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.010954224f : -0.0035009035f)))));
      return pred;
  }
  // {11000000 10111011 00100010 00000000 00000000 00001011 00010001 10110000 00100101 00101010 00100101 00000000 01100100 01010000 00000100 00000000 00000000 00000000 00010000 00110000 01000010 10110010 01000100 10000000 00001000 11000000 10100010 00011011 00100000 10100000 10000010 11000011 00000010 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, -69, 34, 0, 0, 11, 17, -80, 37, 42, 37, 0, 100, 80, 4, 0, 0, 0, 16, 48, 66, -78, 68, -128, 8, -64, -94, 27, 32, -96, -126, -61, 2, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00000000 11100000 11101010 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -32, -22, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {5, 0, 0, 0};
  // {00000010 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 2, 0};
  // {00000000 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 48, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {29, 0, 0, 0};
  // {01010111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {87, -1, 3, 0};
}

// Tree predictor for 34-tree and 0-class
class Tree_34_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0034085661f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? 0.00884928f : -0.008968733f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.036501333f : 0.0050696773f)))
        : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 205.5f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.38016427f ? -0.0018841961f : 0.03199593f)
            : (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 200, (int) data[4 /* INDP */]) ? -0.06274551f : 0.0f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[1 /* SCHL */]) ? -0.014249426f : 0.01414739f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? 0.026652956f : 0.0059112073f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */]) ? -0.030465124f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 6.0f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.21478912f : 0.060691282f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? -0.006394009f : 0.015772723f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.0075857393f : 0.028484022f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 17.5f ? 0.0062373695f : -0.014409744f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f
            ? -0.24402736f
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */]) ? -0.0034450414f : 0.043519985f)))));
      return pred;
  }
  // {01000010 11111001 00000000 00001000 00000000 10000101 00000111 00110000 00000001 11000101 00100000 01000000 10010000 11110001 00000010 00000100 00000000 00000000 00001001 00000001 00000010 00000110 01011101 01010001 11000100 00001100 10010000 10000110 11101000 00000000 00000000 11011001 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {66, -7, 0, 8, 0, -123, 7, 48, 1, -59, 32, 64, -112, -15, 2, 4, 0, 0, 9, 1, 2, 6, 93, 81, -60, 12, -112, -122, -24, 0, 0, -39, 0, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {28, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {28, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {28, 0, 0, 0};
  // {...200 0-bits... 00111110}
  public static final byte[] GRPSPLIT5 = new byte[] {62};
  // {00000000 10000100 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, -124, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {3, 0, 0, 0};
  // {11111111 11101011 00000010 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -21, 2, 0};
  // {00000000 10000000 00000010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, -128, 2, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, -128, 0, 0};
  // {00100001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {33, 0, 0, 0};
}

// Tree predictor for 35-tree and 0-class
class Tree_35_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.002197582f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.18355772f : -0.0073519265f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 58.5f ? 0.020122819f : -0.012363216f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 2.069081f ? -0.027673477f : 0.1561851f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 226.5f ? 0.011961081f : -0.019520551f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.00692554f : 1.7030546E-4f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? 0.07270554f : 0.020534255f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? 0.004150013f : -0.029555958f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.5f ? 0.012165012f : -0.1203153f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f
            ? -0.104828134f
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 40.5f ? 0.012162311f : 0.048713773f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f
            ? -0.15949178f
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.028927451f : 0.08401495f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 150.5f ? 0.015483864f : 0.052656673f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[1 /* SCHL */]) ? 0.007396171f : 0.008022686f)))));
      return pred;
  }
  // {00000000 00011101 00100000 00000010 10000000 00001010 00011001 10101000 10010011 00011010 10111000 00000000 01100100 01010010 10000100 00100010 00011000 00000000 00010000 00101001 00100000 01100011 01100101 00100000 00010011 00000000 00000000 01100001 00100000 01100000 00000000 00000011 00010010 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 29, 32, 2, -128, 10, 25, -88, -109, 26, -72, 0, 100, 82, -124, 34, 24, 0, 16, 41, 32, 99, 101, 32, 19, 0, 0, 97, 32, 96, 0, 3, 18, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {11111001 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-7, 1, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {80, 0, 0, 0};
  // {01000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {69, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {11110111 11110111 00000011 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, -9, 3, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-16, 0, 0, 0};
  // {00000000 00000000 00111110 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 62, 0};
}

// Tree predictor for 36-tree and 0-class
class Tree_36_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.5f ? -0.01257847f : 0.0068654744f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 118.5f ? -0.004787105f : -0.024833921f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 8.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f ? -0.13271494f : -0.05234534f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? 0.0019784912f : 0.0026599972f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 13.5f ? -0.05178946f : -0.005048508f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 212.5f ? 0.021270337f : -0.011155743f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.0f ? -0.025005473f : 0.059986573f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? -0.027525168f : 0.006014272f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 10.5f ? -0.058957886f : 0.00666313f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.5f ? -0.055599738f : 0.046907913f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 11.0f ? -0.08376509f : 0.00782608f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.0675078f : 0.17733467f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 34.0f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.021004925f : 0.09674225f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */]) ? -0.008045394f : 0.018881679f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.47338f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.0036654014f : 0.002497637f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 22.5f ? 0.032149218f : -0.04777769f)))));
      return pred;
  }
  // {11000010 11110011 00000000 00000000 00000000 00000011 00010001 10010000 00100101 00101000 00100101 00000000 01010000 00010001 00000010 00010000 00000000 00000000 00011001 10110000 01001010 10010110 11000100 00010000 10001000 00001000 10100000 00011001 01101000 10001010 11010010 00000011 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, -13, 0, 0, 0, 3, 17, -112, 37, 40, 37, 0, 80, 17, 2, 16, 0, 0, 25, -80, 74, -106, -60, 16, -120, 8, -96, 25, 104, -118, -46, 3, 0, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {18, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {11111100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-4, 1, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11101111 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, -1, 1, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {3, 0, 0, 0};
  // {01000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {66, 0, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-3, 1, 0, 0};
  // {00010101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {21, 0, 0, 0};
}

// Tree predictor for 37-tree and 0-class
class Tree_37_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0029669628f : 9.650206E-5f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 155.5f ? -0.0338912f : 0.0019701116f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.27957344f : 0.018508166f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 75.5f ? -0.0014738436f : -0.13977613f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 22.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.010069811f : 0.0034854724f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.021036081f : 0.034640763f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.008210898f : 0.017353034f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.07057416f : 0.02971281f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 3.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */]) ? -0.07133865f : 0.0f)
            : 0.0f)
          : -0.09258242f)
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.8702609f ? -0.04435258f : 0.076564275f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.20413485f : 0.036299795f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f ? -0.013595754f : 0.01573448f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[1 /* SCHL */]) ? -0.0019963256f : 0.008217277f)))));
      return pred;
  }
  // {10000000 11111011 00000001 00001000 00000000 00000011 00010011 10110000 00010001 11101111 00100000 00000000 10000000 01110000 00000000 00000101 01000001 00000000 00000000 00100000 00000010 00100011 01010101 11110001 01000001 11000100 00000001 10000000 10100000 00100000 00000000 01011011 00000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, -5, 1, 8, 0, 3, 19, -80, 17, -17, 32, 0, -128, 112, 0, 5, 65, 0, 0, 32, 2, 35, 85, -15, 65, -60, 1, -128, -96, 32, 0, 91, 1, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {11000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-63, 0, 0, 0};
  // {11111101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {72, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {88, 0, 0, 0};
  // {11111011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-5, 1, 0, 0};
  // {11111000 01101111 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-8, 111, 0, 0};
  // {00000000 01101111 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 111, 0, 0};
  // {00000000 01101111 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 111, 0, 0};
  // {11111111 11111011 00000010 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -5, 2, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {10, 0, 0, 0};
  // {00000000 00000000 00101100 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 44, 0};
}

// Tree predictor for 38-tree and 0-class
class Tree_38_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0023473718f : 0.0f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f ? -0.06434249f : 0.0014871636f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 39.0f ? -0.020696029f : 0.011725541f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.015623159f : 0.028143976f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.0020814708f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 65.5f ? 0.0044961628f : -0.25415793f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.2546436f : -0.080131546f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 23.5f ? -0.009965289f : 0.024515357f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 21.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 21.5f ? -0.011121622f : -0.24642432f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.0f ? 0.006857883f : -0.08727284f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */]) ? -0.04354585f : -0.13762525f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? 0.005386269f : 0.004929773f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 43.5f ? 0.003220056f : 0.036756452f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 6.896937f
            ? (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 4.1890674f ? 0.005975092f : 0.064486824f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.06684654f : 0.015841182f)))));
      return pred;
  }
  // {01000000 00010001 00000101 00000000 00000000 10001100 00000101 00000001 10100101 01000000 00110101 01000000 01010000 11100001 00000110 00010000 00011000 00000000 00010000 11111000 01001010 11110010 11001100 00000000 11101011 00000000 00000000 00001111 00100000 00000000 00010000 00000011 00000001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 17, 5, 0, 0, -116, 5, 1, -91, 64, 53, 64, 80, -31, 6, 16, 24, 0, 16, -8, 74, -14, -52, 0, -21, 0, 0, 15, 32, 0, 16, 3, 1, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {84, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {88, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {88, 0, 0, 0};
  // {11111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-5, 0, 0, 0};
  // {01111111 11110111 00000011 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {127, -9, 3, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-2, 1, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
}

// Tree predictor for 39-tree and 0-class
class Tree_39_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 8.5f
          ? (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[7 /* POBP */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[5 /* RAC1P */]) ? -0.018499834f : -0.039468665f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? 0.0045719524f : 0.02242603f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */]) ? -0.0046373424f : 0.0f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 26.5f ? -0.038688626f : 3.6641516E-4f)))
        : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 36.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? -0.042904247f : -0.0016504473f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 33.5f ? 0.106700875f : 0.01873971f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? -0.03128217f : -0.0017402613f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */]) ? -0.006823148f : 0.0040312833f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */]) ? -0.14070077f : -0.040303726f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.13967693f : -0.31131715f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? 2.5351509E-4f : 0.0041620606f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[0 /* RELP */]) ? -0.0036850406f : 0.009020435f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT16, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? -0.09284119f : -0.20374021f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 26.5f ? 0.035640854f : -0.03141099f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT17, 0, (int) data[5 /* RAC1P */]) ? -0.0039893743f : 0.0069814506f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f ? -0.09733314f : 0.03357281f)))));
      return pred;
  }
  // {11000010 00110101 00100011 00001010 10000000 00000010 00010011 10111000 00011001 00101000 00100000 00000000 01100001 00010010 00010110 00000000 01000000 00000000 00000001 00000001 00000010 00100111 01100101 10100000 00010100 00001100 10010000 01010000 00100000 11001000 10000100 00000011 00010000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 53, 35, 10, -128, 2, 19, -72, 25, 40, 32, 0, 97, 18, 22, 0, 64, 0, 1, 1, 2, 39, 101, -96, 20, 12, -112, 80, 32, -56, -124, 3, 16, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {11110000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-16, 1, 0, 0};
  // {11110100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-12, 1, 0, 0};
  // {00000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {18, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {18, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-4, 0, 0, 0};
  // {11111001 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-7, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-2, 1, 0, 0};
  // {11111110 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, -1, 1, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {64, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {3, 0, 0, 0};
  // {11111111 01110101 00000011 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 117, 3, 0};
  // {11111001 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-7, 1, 0, 0};
}

// Tree predictor for 40-tree and 0-class
class Tree_40_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0021620735f : 8.896996E-5f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f ? -0.021748915f : 0.0038010064f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 40.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f ? -0.005354619f : -0.03995101f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 58.5f ? 0.014156131f : -0.009064734f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || (float) data[5 /* RAC1P */] < 1.0f ? -6.408624E-4f : -0.050517958f)
            : 0.0f)
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 107.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? -0.019300565f : 0.001920986f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.06829552f : 0.0065050474f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 8.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 33.5f
            ? 0.120010234f
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.5f ? -0.016420575f : 0.09096285f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 49.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? -0.098208494f : -0.022453552f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.8093109f ? 0.033345994f : -0.12612519f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 13.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 107.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 72.0f ? 0.00896898f : 0.15014626f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.46189722f : 0.12318969f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 48.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.217431f ? 0.0078568645f : -0.1547806f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.020376f ? 0.019526992f : 0.20255771f)))));
      return pred;
  }
  // {00000000 11111011 00001101 00000000 00000000 00011001 00001101 10110001 10110011 10011111 00001000 00000000 11010100 00010000 00010000 00100011 00000000 00000000 00011000 00100001 00000010 10000010 01010101 01010000 10000001 00000000 00000000 00100000 00100000 10100000 00010000 10000011 00010000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -5, 13, 0, 0, 25, 13, -79, -77, -97, 8, 0, -44, 16, 16, 35, 0, 0, 24, 33, 2, -126, 85, 80, -127, 0, 0, 32, 32, -96, 16, -125, 16, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {11111010 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-6, 1, 0, 0};
  // {11111010 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-6, 1, 0, 0};
  // {11101111 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-17, -33, 3, 0};
}

// Tree predictor for 41-tree and 0-class
class Tree_41_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0021320467f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 12.5f ? 0.06629571f : 0.0063954443f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.015428739f : 0.019401316f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f ? -0.007449174f : 0.044612557f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.034642953f : 0.00867698f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f ? -0.07839974f : 0.13306603f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.0068559134f : 0.008623453f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 26.0f
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.00926833f : 0.0f)
            : 0.0f)
          : -0.0068347054f)
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || (float) data[0 /* RELP */] < 4.5f ? -0.09165199f : -0.01978988f)
            : 0.0f)
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.0121597005f : 6.5290794E-4f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[2 /* COW */]) ? -0.04616935f : 0.02120866f)))));
      return pred;
  }
  // {11000000 00000011 00101101 00001010 10000000 00010110 00010011 00000000 00011101 01000000 10000100 01000000 00100000 01110011 10000110 00000100 01010000 00000000 00000001 00010000 01100000 00100001 01000100 00000001 00000000 01001100 10100011 11000101 01101000 01000000 11000000 00001001 01000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, 3, 45, 10, -128, 22, 19, 0, 29, 64, -124, 64, 32, 115, -122, 4, 80, 0, 1, 16, 96, 33, 68, 1, 0, 76, -93, -59, 104, 64, -64, 9, 64, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {11000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-63, 0, 0, 0};
  // {11111101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {82, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 0, 0, 0};
  // {11001111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-49, -1, 3, 0};
  // {11001000 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-56, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {01011111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {95, 0, 0, 0};
}

// Tree predictor for 42-tree and 0-class
class Tree_42_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */]) ? -0.003247447f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.0039325003f : 0.0f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.0f ? -0.0119647635f : 0.025613593f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 34.0f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 1.5f ? -0.14509682f : -0.012564967f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.0f ? 0.0065695783f : 0.023714872f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 8.85916E-4f : -0.012512324f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 71.5f ? 0.0078024752f : -0.09457904f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? -0.021487541f : 0.06608708f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 22.5f ? -0.04718548f : -0.12673405f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.079535306f : 0.06903676f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 49.0f ? -0.04054577f : 0.049810648f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.06674152f : 0.013075447f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.038658395f : 0.009939708f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 115.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? -0.019451082f : 0.0038749713f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.39411068f ? -0.047703806f : 0.01669286f)))));
      return pred;
  }
  // {00000010 00110101 00001011 00000000 00000000 10010000 00010001 10111000 10010001 00101010 00110000 00000000 00000001 11000000 00000000 00010001 01000001 00000000 00000001 11101000 00001010 01110110 01101100 00010000 01110100 10000000 10000000 00001001 11100000 00001000 00000110 01000001 01000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 53, 11, 0, 0, -112, 17, -72, -111, 42, 48, 0, 1, -64, 0, 17, 65, 0, 1, -24, 10, 118, 108, 16, 116, -128, -128, 9, -32, 8, 6, 65, 64, 1};
  // {11111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 3, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {18, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {18, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {84, 0, 0, 0};
  // {11111111 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, 0, 0};
  // {10011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-102, 0, 0, 0};
  // {01010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {87, 0, 0, 0};
  // {01000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {69, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {26, 0, 0, 0};
  // {11101011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-21, 1, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {17, 0, 0, 0};
}

// Tree predictor for 43-tree and 0-class
class Tree_43_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0029255708f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -8.7735214E-4f : 9.3252887E-4f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 75.5f ? 0.001353542f : -0.123358905f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 72.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.056826998f : 0.007665504f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? -0.2801977f : -0.05013596f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 113.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 39.5f ? -0.07354708f : -0.02018588f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? -0.28115657f : -0.030763397f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 39.5f ? 0.01598701f : 0.17015074f))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.47338f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.0f ? -0.008193805f : 0.0035614362f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f ? 0.0076063094f : 0.03579877f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? 0.037685655f : 0.12110249f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 74.0f ? 0.01579499f : -0.16019784f)))));
      return pred;
  }
  // {01001000 10001011 00001001 00000000 00000000 10010001 00000001 00100010 00011001 01100001 00000011 00000000 01010000 00010001 00000000 00000000 00000000 00000000 00000000 00000001 00000010 00100110 11000101 00000000 11010110 01001110 00000010 01110011 00101000 11100110 00010100 01010011 00111000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {72, -117, 9, 0, 0, -111, 1, 34, 25, 97, 3, 0, 80, 17, 0, 0, 0, 0, 0, 1, 2, 38, -59, 0, -42, 78, 2, 115, 40, -26, 20, 83, 56, 0};
  // {01111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 127, 3, 0};
  // {01100000 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {96, 127, 3, 0};
  // {01100000 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {96, 127, 0, 0};
  // {01100000 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {96, 127, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {11111111 11110111 00000010 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -9, 2, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
}

// Tree predictor for 44-tree and 0-class
class Tree_44_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || (float) data[3 /* MAR */] < 2.5f ? -0.006937093f : -0.03715223f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 49.5f ? -0.07907258f : -0.011684281f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -0.0022167494f : 0.0035469588f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 59.5f ? 0.003359957f : -0.01146746f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 225.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.0014065008f : 0.011263006f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f ? -0.027194234f : -0.15195982f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 8.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 10.5f ? 0.031812087f : -0.039718427f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? -3.7762552E-4f : 0.016008304f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 16.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 47.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 39.0f ? -0.15584382f : 0.014327861f)
            : -0.27230942f)
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 23.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? 0.009525927f : 0.124405436f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.09769344f : -0.0142733455f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 76.0f ? 5.0172757E-4f : -0.05966727f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? 0.060556248f : 0.004551447f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 57.5f ? 0.06386214f : 0.023599843f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.012549664f : 0.014114688f)))));
      return pred;
  }
  // {10001010 01100011 00000101 00001001 10000000 00011010 00000011 00110001 00111001 00001110 10000010 00000000 11000001 01100000 00000110 00000000 00001000 00000000 00010000 00100000 00000010 00110011 01000100 10000000 00101000 00000000 10010001 00001000 01100000 00000000 11001110 01001011 00101000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-118, 99, 5, 9, -128, 26, 3, 49, 57, 14, -126, 0, -63, 96, 6, 0, 8, 0, 16, 32, 2, 51, 68, -128, 40, 0, -111, 8, 96, 0, -50, 75, 40, 0};
  // {11111110 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -33, 3, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {17, 0, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {19, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00011001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {25, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11011111 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, -1, 2, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 1, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {11111101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, 0, 0, 0};
}

// Tree predictor for 45-tree and 0-class
class Tree_45_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0016750019f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.13494347f : -0.04081924f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.0148395775f : -0.003140407f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 10.5f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */]) ? -0.099243164f : 0.02589841f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.15109752f : 0.023945585f))
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[1 /* SCHL */])
            ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[1 /* SCHL */]) ? -0.011644745f : 0.0f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.123439f ? 0.0020717927f : 0.03188534f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 16.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 1.5f
            ? -0.42100424f
            : (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[7 /* POBP */]) ? -0.21403086f : 0.08830757f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 40.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */]) ? -0.14081477f : 0.0793395f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */]) ? -0.13328128f : -0.122371815f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 42.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 7.5f ? -0.08822517f : 0.0043624374f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? -0.13114272f : -0.025468796f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 37.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[0 /* RELP */]) ? 0.0057164f : 0.015281445f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT16, 0, (int) data[0 /* RELP */]) ? -0.011260939f : 0.0045242542f)))));
      return pred;
  }
  // {01001000 01000011 00000001 00000010 00000000 01010001 00010001 10100010 00000111 10000000 00100010 00000000 01010100 00010010 10000000 00000001 00010000 00000000 00000000 10010001 00001000 00000000 01110100 00000000 10000001 00000010 00100000 10010101 10101000 11001100 11011000 11010011 00111011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {72, 67, 1, 2, 0, 81, 17, -94, 7, -128, 34, 0, 84, 18, -128, 1, 16, 0, 0, -111, 8, 0, 116, 0, -127, 2, 32, -107, -88, -52, -40, -45, 59, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, 1, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {17, 0, 0, 0};
  // {00000110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {6, 0, 0, 0};
  // {11011011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-37, 0, 0, 0};
  // {00000000 11000000 11101110 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, -64, -18, 0};
  // {00000000 11000000 11101110 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, -64, -18, 0};
  // {00010000 11001000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, -56, 0, 0};
  // {11010111 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-41, 127, 0, 0};
  // {11111110 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-2, -1, 3, 0};
  // {11110001 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-15, 1, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {3, 0, 0, 0};
  // {11111111 11010111 00000011 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -41, 3, 0};
}

// Tree predictor for 46-tree and 0-class
class Tree_46_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0017058044f : 0.0f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 168.5f ? 0.032600984f : -9.6513546E-4f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 249.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 62.5f ? -0.0038171655f : -0.04866949f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? -0.05794797f : 0.01440153f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 41.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? -0.013489586f : 0.0026974876f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 59.0f ? -0.014356737f : 0.0019600957f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 190.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 124.5f ? -3.1049768E-4f : 0.018571889f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 203.0f ? -0.14478597f : 0.021968238f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 58.0f ? -0.019141965f : -0.13528237f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 30.0f ? -0.11692372f : -0.010528007f))
          : -0.17089756f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 70.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 38.0f ? -0.013827315f : 0.009790612f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? 0.004583055f : -0.14750254f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 23.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.022908784f : 0.065254174f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? 0.06341402f : 0.0068450724f)))));
      return pred;
  }
  // {11001010 10110001 00101101 00000001 00000000 01010110 00000001 00010000 10011001 00011011 00010110 01000000 00110000 01000001 00000010 01000100 00000000 00000000 00000000 00100000 01000010 11100000 00001101 00010001 00000100 10001000 00000000 01100010 00110000 00100000 00000010 10001011 00101001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-54, -79, 45, 1, 0, 86, 1, 16, -103, 27, 22, 64, 48, 65, 2, 68, 0, 0, 0, 32, 66, -32, 13, 17, 4, -120, 0, 98, 48, 32, 2, -117, 41, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-6, 0, 0, 0};
  // {11111111 01111011 00000011 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 123, 3, 0};
  // {01111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {122, 0, 0, 0};
  // {01010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {81, 0, 0, 0};
}

// Tree predictor for 47-tree and 0-class
class Tree_47_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0015835996f : 2.0225345E-4f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.020376f ? 5.076778E-4f : -0.1518684f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.78878f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.5f ? -0.015718682f : 0.0040275645f)
            : -0.117471784f))
        : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 10.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 67.5f ? 0.017795123f : 0.17085929f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? -0.021904266f : -0.0044704946f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 85.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -0.0028396666f : 0.0034901227f)
            : -0.22437263f)))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[0]) || (float) data[0 /* RELP */] < 16.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.5f ? -0.063135415f : -0.1577358f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.0128300795f : -0.004008344f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.5f ? 0.06704594f : -0.12711674f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 57.0f ? 0.11818923f : 0.2802432f)))
        : (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 8.496374f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 85.5f ? 0.007921013f : -0.0037137216f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? 0.11173793f : -0.010409826f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 57.5f ? 0.18831219f : 0.06871388f))));
      return pred;
  }
  // {01000000 00001011 00000001 00001010 10000000 11011001 00011111 10101001 00110001 01100100 10101001 00000000 01000000 10110000 00000100 00000010 01000001 00000000 00010001 01001101 00000000 00000110 10000100 00100000 01011010 01000100 00000000 00000000 00110000 11000110 01000000 00000011 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 11, 1, 10, -128, -39, 31, -87, 49, 100, -87, 0, 64, -80, 4, 2, 65, 0, 17, 77, 0, 6, -124, 32, 90, 68, 0, 0, 48, -58, 64, 3, 0, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {11011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-35, 0, 0, 0};
  // {11111111 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, 0, 0};
  // {00000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {7, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, 0, 0, 0};
}

// Tree predictor for 48-tree and 0-class
class Tree_48_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.05425558f : 6.4420735E-4f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 29.5f ? -0.02684792f : -0.004623053f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.00184044f : 0.0f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 84.0f ? 0.014432473f : -0.20468296f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 29.5f ? 0.0026191515f : -0.00864528f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? -0.049198944f : 0.0026651428f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? 0.017201854f : 0.03283569f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 181.5f ? -0.11696372f : 0.014831664f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 18.0f
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 9.5f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.024389856f : -0.076509945f)
            : 0.21990426f)
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[1 /* SCHL */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.10549193f : -0.067910515f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.06181529f : 0.07917385f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.640988f ? 0.0064791404f : 0.14636901f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 60.5f ? 0.009271019f : 0.04118649f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? -0.0075609586f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.03445483f : -0.007101114f)))));
      return pred;
  }
  // {11001000 10010101 00001111 00000000 00000000 11010010 00000001 10110010 00010111 10000010 00000010 00000000 10000101 00010010 10010000 00110001 00010000 00000000 00010000 00110000 00101010 00110011 00010101 00110000 10001000 00000000 00000010 00001000 01011000 00001000 10010100 00001001 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-56, -107, 15, 0, 0, -46, 1, -78, 23, -126, 2, 0, -123, 18, -112, 49, 16, 0, 16, 48, 42, 51, 21, 48, -120, 0, 2, 8, 88, 8, -108, 9, 0, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {18, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {84, 0, 0, 0};
  // {11101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-22, 0, 0, 0};
  // {00100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {35, 0, 0, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, 1, 0, 0};
  // {00000000 11001100 00001111 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, -52, 15, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-4, 0, 0, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-2, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {26, 0, 0, 0};
}

// Tree predictor for 49-tree and 0-class
class Tree_49_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */]) ? 0.0051319106f : 0.0063367095f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? -0.0062623965f : 0.007949491f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 86.0f ? -0.0014930251f : -0.025036879f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.640988f ? -0.029602418f : 0.040685695f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
          ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[1 /* SCHL */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.011804051f : 0.016994901f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f ? 0.013660385f : 9.3479804E-4f))
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[1 /* SCHL */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? -0.010715327f : -0.06299386f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.007077432f : -0.0077496436f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.0038667377f : 0.0031514105f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.070792615f : 0.010735324f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 148.5f ? -0.0012439494f : 0.045722492f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.17738424f : 0.016819172f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 66.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f ? -0.0031109767f : 0.010274345f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 89.5f ? 0.054715075f : 0.01091188f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 34.0f ? 0.04429147f : -0.050019678f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 27.5f ? -0.034998264f : 0.030496027f)))));
      return pred;
  }
  // {01000000 00000001 00100001 00001000 00000000 11010000 00010011 00110000 10001000 01101001 00000010 00000000 01100000 01110000 00000010 00000000 00001000 00000001 00010001 00000000 00000010 00100011 01100101 01100000 11101001 01000010 11010001 11010111 11101000 00000000 00001000 10000011 00000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 33, 8, 0, -48, 19, 48, -120, 105, 2, 0, 96, 112, 2, 0, 8, 1, 17, 0, 2, 35, 101, 96, -23, 66, -47, -41, -24, 0, 8, -125, 0, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-110, 0, 0, 0};
  // {00000000 10100111 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -89, 0, 0};
  // {11111100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-4, 1, 0, 0};
  // {00000000 00000000 11111110 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, -2, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {11110111 11110111 00000011 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, -9, 3, 0};
  // {00000111 00100000 00000010 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {7, 32, 2, 0};
}

// Tree predictor for 50-tree and 0-class
class Tree_50_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.002912903f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 241.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 63.5f ? 0.0073675998f : -0.024739077f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? -0.040847365f : -0.4045895f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -6.7534315E-4f : 3.1413907E-7f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 226.5f ? 0.010877621f : -0.04532916f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 233.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 155.5f ? 0.0028810608f : -0.11318539f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 20.5f ? 0.023263367f : 0.16762795f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 38.0f
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.003632681f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? -0.055836856f : 0.0023336937f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.045888808f : 3.9087486E-4f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.009918038f : -0.1317463f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 40.5f ? -0.086973034f : 0.0010065398f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 55.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? 0.00946442f : 0.01290082f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.011548933f : -0.0035988712f)))));
      return pred;
  }
  // {01000000 00110001 00000001 00000010 00000000 00011000 00010001 10000001 00000000 10000010 00110111 01000000 10001000 00010001 00000100 00010000 00000000 00000000 00001000 00001000 00000000 10010100 10011100 10000001 10010110 00000110 00101110 01101100 01110000 00100000 10000010 11011011 00000011 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 49, 1, 2, 0, 24, 17, -127, 0, -126, 55, 64, -120, 17, 4, 16, 0, 0, 8, 8, 0, -108, -100, -127, -106, 6, 46, 108, 112, 32, -126, -37, 3, 1};
  // {11111110 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -33, 3, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {74, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {82, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {82, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {82, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11011111 11101111 00000011 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, -17, 3, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-3, 1, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
}

// Tree predictor for 51-tree and 0-class
class Tree_51_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f ? 3.874395E-4f : -0.0091061825f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.005321727f : 0.0033249217f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 181.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 3.0f ? -0.09809347f : 0.0020441748f)
            : -0.10068439f))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 66.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 106.5f ? -0.03192292f : -0.0061405287f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.023647934f : -0.05295914f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 10.5f ? 0.012150253f : -0.0042432435f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 48.5f ? 0.024512004f : -0.010183514f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 42.0f ? 0.003386184f : -0.11083116f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 130.0f ? -0.037651476f : -0.13229682f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.0f
            ? -0.17203636f
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 46.5f ? -0.034131583f : 0.088379756f)))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.47338f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.02527871f : 0.0011516156f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? -0.027008213f : 0.0044996054f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.417565f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */]) ? 0.040966883f : 0.021367678f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? 0.027056282f : 0.18700479f)))));
      return pred;
  }
  // {00000000 00000001 00101001 00000000 00000000 01010111 00000100 00100000 10011001 00011001 10000000 00000000 01010000 01000000 00010000 00000001 01010000 00000001 01010001 00100100 00000010 01100011 00100101 11010000 00101010 10000100 11101110 00010000 00100000 10000110 00011110 00000001 00000001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 1, 41, 0, 0, 87, 4, 32, -103, 25, -128, 0, 80, 64, 16, 1, 80, 1, 81, 36, 2, 99, 37, -48, 42, -124, -18, 16, 32, -122, 30, 1, 1, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {01111100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {124, 1, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-4, 0, 0, 0};
  // {11001111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-49, -1, 3, 0};
  // {00001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {11, 0, 0, 0};
  // {00001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {11, 0, 0, 0};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {76, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {79, 0, 0, 0};
}

// Tree predictor for 52-tree and 0-class
class Tree_52_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.001880442f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.0013511801f : -0.009226612f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? -0.025162484f : 0.011664191f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.0011548518f : 0.006929395f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f ? -0.020113511f : 0.028091455f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 70.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 41.5f ? 0.020842412f : -0.020532899f)
            : -0.18911232f)))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 11.5f
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.079269f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 1.5f ? -0.1777208f : 0.021392746f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 8.5f ? 0.32054707f : 0.022360105f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 3.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 31.5f ? 0.026886683f : -0.08856664f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.321959f ? 0.04887891f : -0.18512312f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.031132467f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 62.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.655712f ? 0.005743517f : 0.047202583f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.0014391281f : -0.03180325f)))));
      return pred;
  }
  // {01000010 01000011 00000101 01000001 10000000 00010000 00011011 00111000 00110001 00000100 00001000 00000000 00001101 10110010 00000010 01010000 10001000 00000000 00001000 10000001 00000010 00100100 00000100 00000000 00000100 01001010 11001000 11100010 01111000 10000100 01011100 00000001 00000001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {66, 67, 5, 65, -128, 16, 27, 56, 49, 4, 8, 0, 13, -78, 2, 80, -120, 0, 8, -127, 2, 36, 4, 0, 4, 74, -56, -30, 120, -124, 92, 1, 1, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {26, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11110111 11101111 00000010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-9, -17, 2, 0};
  // {00000000 11101100 00000010 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, -20, 2, 0};
  // {00000000 11101100 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -20, 0, 0};
}

// Tree predictor for 53-tree and 0-class
class Tree_53_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0013627385f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 16.5f
            ? (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[7 /* POBP */]) ? -0.05508283f : -0.0070130997f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */]) ? -0.014519171f : 0.00649476f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.557184f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.3733275f ? -0.0020624439f : 0.02044283f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f ? 0.011212708f : -0.17105444f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 30.0f ? -0.020946404f : 0.0316867f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.049823f ? 0.004772741f : 0.11154534f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.018350521f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 31.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 18.5f ? 0.07132745f : -0.11818438f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[3 /* MAR */]) ? 0.0031529213f : 0.13993607f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[5 /* RAC1P */]) ? -0.06232286f : 0.007403386f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 35.5f ? 0.08188398f : -0.07439669f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f
            ? (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 4.1890674f ? 0.0033773717f : 0.079556145f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 43.0f ? 0.02650533f : 0.0045722127f)))));
      return pred;
  }
  // {00000000 10101001 00001001 00001000 00000001 01011011 00000000 10000011 00001001 11001010 10110011 00000000 11110000 00000000 00000100 00100100 00000001 00000001 01010000 00100000 00001000 00010011 10011100 00010001 11011000 00000000 00000100 00001001 10000000 11100000 00000010 00001011 00000001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -87, 9, 8, 1, 91, 0, -125, 9, -54, -77, 0, -16, 0, 4, 36, 1, 1, 80, 32, 8, 19, -100, 17, -40, 0, 4, 9, -128, -32, 2, 11, 1, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {11111111 11111011 00000001 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -5, 1, 0};
  // {11011011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-37, 1, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {82, 0, 0, 0};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-127, 0, 0, 0};
  // {11111111 01111111 00000001 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 127, 1, 0};
  // {11011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-34, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-40, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-40, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {19, 0, 0, 0};
  // {00100011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {35, 1, 0, 0};
}

// Tree predictor for 54-tree and 0-class
class Tree_54_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0016601394f : 1.3414698E-4f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.020376f ? 7.419062E-4f : -0.1211708f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 3.0f
            ? -0.11054891f
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.0043328987f : -0.017516358f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */]) ? -0.0051635373f : 0.0f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 126.0f ? 0.013355105f : -0.045864258f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 197.5f ? 0.00755451f : -0.012118027f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 170.5f ? 0.06882882f : 0.013515288f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[1 /* SCHL */]) ? -0.054983534f : 0.047416635f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[1 /* SCHL */]) ? 0.0176076f : 0.19386499f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 47.5f ? -0.08995031f : 0.024599388f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[3 /* MAR */]) ? -0.032064475f : 0.09824611f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[5 /* RAC1P */]) ? -0.1793724f : 0.04544194f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 46.5f ? -0.14876072f : -0.022236057f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 4.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? -0.13450651f : 0.05241324f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[1 /* SCHL */]) ? -0.00931848f : 0.0068961866f)))));
      return pred;
  }
  // {00000000 00010011 00100101 01000010 00000000 10010100 00010101 00110000 10010111 00100001 00000110 01000000 00001000 01010001 00010000 00000011 10010000 00000000 00000001 10110100 11100010 11100000 01000111 10000000 00101010 00000100 00010100 00000100 00100000 00001010 00010000 00001000 10000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 19, 37, 66, 0, -108, 21, 48, -105, 33, 6, 64, 8, 81, 16, 3, -112, 0, 1, -76, -30, -32, 71, -128, 42, 4, 20, 4, 32, 10, 16, 8, -128, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-22, 0, 0, 0};
  // {11101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-22, 0, 0, 0};
  // {00011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {30, 0, 0, 0};
  // {11011111 11111101 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, -3, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00000000 00001000 00000001 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 8, 1, 0};
  // {00000000 00010001 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 17, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {5, 0, 0, 0};
  // {01000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {71, 0, 0, 0};
  // {00110111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {55, 0, 0, 0};
  // {00000000 10100000 01111110 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, -96, 126, 0};
}

// Tree predictor for 55-tree and 0-class
class Tree_55_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.00199682f : 0.0f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.0073322617f : 0.005312741f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? 0.054303728f : 3.7656658E-4f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 209.5f ? -0.019926773f : 0.01712023f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 10.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 6.5f ? -0.0062365974f : 0.16093238f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 68.0f ? 0.012194347f : 0.08793829f))
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[1 /* SCHL */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? -0.093336076f : -0.0063322526f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.0030708117f : -0.004028026f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.0089658545f : 0.0f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */]) ? -0.018184999f : 0.008337874f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */])
            ? 0.081199415f
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 25.5f ? 0.06306537f : 0.018047543f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? -0.046183694f : -0.21757656f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 32.5f ? 0.06638853f : -0.025926385f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 51.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 86.0f ? 0.013443607f : -0.0035527563f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.007418171f : -0.011100705f)))));
      return pred;
  }
  // {11001000 00000011 00000011 01000001 00000001 01010010 00010001 10100000 00110001 00011110 00000000 00000000 01001100 00010010 10000010 01000000 11000000 00000001 00000000 00001001 00000000 00100000 00100110 01110010 01000000 10001010 11100100 01000001 10100000 10100100 00001110 00000001 10000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-56, 3, 3, 65, 1, 82, 17, -96, 49, 30, 0, 0, 76, 18, -126, 64, -64, 1, 0, 9, 0, 32, 38, 114, 64, -118, -28, 65, -96, -92, 14, 1, -128, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {82, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {82, 0, 0, 0};
  // {00000000 11111000 11111110 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -8, -2, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {3, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {29, 0, 0, 0};
  // {11101111 11110011 00000011 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, -13, 3, 0};
}

// Tree predictor for 56-tree and 0-class
class Tree_56_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[5 /* RAC1P */]) ? -0.0028275303f : -5.396685E-4f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.006287447f : 0.0012845406f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 209.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? 0.004691593f : -0.059980415f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 222.5f ? 0.059067987f : 0.011396008f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -9.6946803E-4f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? 0.12637344f : -5.36384E-4f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.0f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 7.488103f ? -0.0025446713f : -0.061181117f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 181.5f ? -0.010902015f : 0.015904898f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 8.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.064053796f : -0.016921058f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? 0.0105955f : 0.061868966f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? -0.009192072f : 0.0f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? 0.10633335f : -0.0037816344f)))
        : (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 8.192329f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? -0.005009059f : 0.006806174f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.02356592f : 0.0035128596f))
          : (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 8.422145f
            ? 0.14881031f
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 40.5f ? 0.103694506f : 0.025883114f)))));
      return pred;
  }
  // {00000010 11110001 00001001 00000010 10000001 10011001 00001010 00011000 00001110 00000001 00001010 00000000 10111001 01100001 00100000 00110101 00011001 00000000 01011000 01010000 01000010 00000010 00000100 00000000 10000101 01000000 00000101 00010001 01100000 10000000 00000100 10010001 00000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, -15, 9, 2, -127, -103, 10, 24, 14, 1, 10, 0, -71, 97, 32, 53, 25, 0, 88, 80, 66, 2, 4, 0, -123, 64, 5, 17, 96, -128, 4, -111, 1, 0};
  // {11111110 01111111 00000010 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 2, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {88, 0, 0, 0};
  // {11111000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-8, 1, 0, 0};
  // {11111001 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-7, 1, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {74, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {88, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {88, 0, 0, 0};
  // {11110101 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-11, -1, 3, 0};
  // {11011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-38, 0, 0, 0};
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-108, 0, 0, 0};
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-108, 0, 0, 0};
  // {00000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {7, 0, 0, 0};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {56, 0, 0, 0};
}

// Tree predictor for 57-tree and 0-class
class Tree_57_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? -0.094818085f : -0.027698962f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[1 /* SCHL */]) ? -0.012974967f : -0.0022686298f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -7.491858E-4f : 5.9792475E-4f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.0046338867f : -0.0056052525f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 9.5f ? -0.28956175f : -0.008303751f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.005104444f : -0.0035275172f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? -0.036843657f : 0.13054088f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.045536727f : 7.632015E-4f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[3 /* MAR */]) ? -0.033770055f : 0.0f)
            : 0.0f)
          : 0.032336116f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 32.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f ? -0.029706735f : 0.09978579f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? 0.09170009f : 0.0073498185f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 90.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f ? 0.004290086f : 0.015617545f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.655712f ? -0.005329512f : -0.13109781f)))));
      return pred;
  }
  // {00001010 00000101 00100101 00001000 10000001 01010101 00001011 00111011 10001001 11000000 00110010 01000000 10000000 10110000 00100110 01000010 00000000 00000000 01000001 11000100 00001010 00010101 10011111 00100001 01111001 00000000 00000000 00100000 00000000 10000000 00000000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 5, 37, 8, -127, 85, 11, 59, -119, -64, 50, 64, -128, -80, 38, 66, 0, 0, 65, -60, 10, 21, -97, 33, 121, 0, 0, 32, 0, -128, 0, 1, 0, 0};
  // {11111110 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -33, 3, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {17, 0, 0, 0};
  // {00000000 11000000 11101011 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -64, -21, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {76, 0, 0, 0};
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {67, 0, 0, 0};
  // {00000000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {11111111 11111101 00000010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -3, 2, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
}

// Tree predictor for 58-tree and 0-class
class Tree_58_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0017544462f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 80.0f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.414487f ? 0.0017497559f : 0.1271206f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? -0.033098537f : -0.27666426f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */]) ? -0.003594309f : -0.14551535f)
            : 0.0f)
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 249.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f ? 3.0478957E-4f : 0.016925424f)
            : (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 250, (int) data[4 /* INDP */]) ? -0.021057399f : 0.0f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? -0.0025633066f : 0.0030345148f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */]) ? -0.08341364f : 0.06821866f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? -0.16480806f : 0.057657946f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 59.5f ? 0.018642714f : -0.033152007f)))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.8623962f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[0 /* RELP */]) ? -0.016377741f : 0.0f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 48.0f ? 0.0035681997f : 0.01348431f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f ? 0.08100759f : -0.14580208f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.405668f ? 0.028729802f : -0.037567932f)))));
      return pred;
  }
  // {01000000 11010001 00001001 01000010 00000000 10010000 00000001 00000000 00110111 00101110 10001010 00000000 01111011 01010001 00010000 00000000 00000000 00000001 00010000 00110001 11000000 10000010 01000100 01000000 10000100 01000100 00000100 01001111 00100000 01100000 00001100 01011000 00010000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, -47, 9, 66, 0, -112, 1, 0, 55, 46, -118, 0, 123, 81, 16, 0, 0, 1, 16, 49, -64, -126, 68, 64, -124, 68, 4, 79, 32, 96, 12, 88, 16, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {84, 0, 0, 0};
  // {11110101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-11, 0, 0, 0};
  // {11110101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-11, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-4, 0, 0, 0};
  // {...250 0-bits... 11110110 11111110}
  public static final byte[] GRPSPLIT8 = new byte[] {-10, -2};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {32, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {11111101 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-3, -1, 3, 0};
  // {01000111 11000000 00000011 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {71, -64, 3, 0};
  // {01000100 11000000 00000011 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {68, -64, 3, 0};
}

// Tree predictor for 59-tree and 0-class
class Tree_59_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0017765095f : 5.4313545E-4f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 252.5f ? 0.0021219077f : -0.09871413f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? -0.1432596f : -0.009636587f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 20.5f ? -0.0037373228f : 0.01499196f)))
        : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 249.5f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 234.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f ? -0.002060675f : 0.0069484096f)
            : (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 235, (int) data[4 /* INDP */]) ? 0.020096451f : 0.0f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 250, (int) data[4 /* INDP */]) ? -0.05136835f : 0.0f)
            : (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 250, (int) data[4 /* INDP */]) ? -0.01127343f : 0.0f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 25.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 21.5f ? -0.06825932f : 0.088023156f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 48.5f ? -0.17415442f : -0.003951787f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 34.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 31.5f ? -0.032791477f : -0.17386481f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.07646596f : -0.068569705f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 49.5f
            ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.005723608f : -0.03261396f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.008168069f : 0.12691072f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.0f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 4.9263835f ? 0.006922325f : -0.0057819188f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.064546f ? -0.009873896f : 0.050266694f)))));
      return pred;
  }
  // {10000000 11101011 00001001 00000001 00000001 01011011 00010110 10110000 00001000 00010001 00000101 00000000 00000000 01000000 00000000 00000101 00001000 00100000 00000000 00101100 00100010 01101000 00110100 10010010 00100010 10001000 00000000 00010000 10110000 10000000 10010000 11001011 00101011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, -21, 9, 1, 1, 91, 22, -80, 8, 17, 5, 0, 0, 64, 0, 5, 8, 32, 0, 44, 34, 104, 52, -110, 34, -120, 0, 16, -80, -128, -112, -53, 43, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {...235 0-bits... 11111101 00001111}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, 15};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-6, 0, 0, 0};
  // {...250 0-bits... 11110010 11111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-14, -1};
  // {...250 0-bits... 11111110 11111110}
  public static final byte[] GRPSPLIT8 = new byte[] {-2, -2};
  // {11111111 11111011 00000010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -5, 2, 0};
  // {01111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {123, 0, 0, 0};
}

// Tree predictor for 60-tree and 0-class
class Tree_60_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0016106727f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 95.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? 0.13066353f : 6.036187E-5f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 49.5f ? -0.04202277f : -0.1520868f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 6.7984095f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */]) ? -0.0010097509f : -0.06902145f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f ? -0.055104047f : 0.06168114f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 198.0f ? 0.00666824f : -0.012325406f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 161.5f ? 0.010745048f : 0.06849116f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.021065604f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.4439335f ? -0.003637862f : 0.10260125f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.011598684f : 0.017073032f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 22.5f ? 0.0127729075f : 0.04696273f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.0011896384f : 0.01875151f)))));
      return pred;
  }
  // {00001000 10000001 00100111 00001000 00000001 01011010 00001001 10100010 10001001 11000010 00100010 00000000 01001100 00100010 10100110 01110000 00010000 00000000 01001001 00000000 00000000 00111001 00010101 00100000 01001000 00000010 00000100 11100001 00100000 00000010 00010000 00011001 01000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {8, -127, 39, 8, 1, 90, 9, -94, -119, -62, 34, 0, 76, 34, -90, 112, 16, 0, 73, 0, 0, 57, 21, 32, 72, 2, 4, -31, 32, 2, 16, 25, 64, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {26, 0, 0, 0};
  // {11100010 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-30, 1, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 0, 0, 0};
  // {01111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {126, 0, 0, 0};
  // {11111111 11110101 00000001 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -11, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 1, 0};
  // {00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 1, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
}

// Tree predictor for 61-tree and 0-class
class Tree_61_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 4.5f
          ? (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[7 /* POBP */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[5 /* RAC1P */]) ? -0.01670389f : -0.006208749f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.0762525f : 0.018642357f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? -0.017663872f : -0.0014276499f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -0.002055509f : 0.0050487807f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.014361693f : -0.0011073722f)
            : 0.0f)
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.315959f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.38487372f ? -5.311614E-4f : 0.009622129f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 166.0f ? 0.2309122f : 0.07461822f))))
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */]) ? -0.0022416774f : 0.0f)
            : 0.11015578f)
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? 0.0054719127f : -0.043052595f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? -0.05958019f : 0.0077596954f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 55.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 89.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? -0.03641265f : 0.07796417f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 46.5f ? -0.03805891f : 0.117861286f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 11.5f
            ? 0.1363129f
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 131.5f ? 0.014724335f : -0.07906169f)))));
      return pred;
  }
  // {11000000 10100001 00000001 01000011 10100001 01010100 00010100 10011001 10010001 00001001 00010100 01000000 10001000 11010000 00100000 00000011 00000000 00000000 00010000 10100001 00000010 00001010 10011101 00000010 00000001 00001000 11110100 00000111 00000000 10000100 00010000 00000001 01000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, -95, 1, 67, -95, 84, 20, -103, -111, 9, 20, 64, -120, -48, 32, 3, 0, 0, 16, -95, 2, 10, -99, 2, 1, 8, -12, 7, 0, -124, 16, 1, 64, 1};
  // {11111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {11110100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-12, 1, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {18, 0, 0, 0};
  // {00010110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {22, 0, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {19, 0, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {19, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {28, 0, 0, 0};
  // {11111101 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, -1, 2, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {00101001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {41, 0, 0, 0};
  // {01110111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {119, 0, 0, 0};
}

// Tree predictor for 62-tree and 0-class
class Tree_62_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.001089485f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 212.5f ? 0.02496398f : -0.18139881f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 7.0768595f ? 0.0022418713f : -0.019556412f)))
        : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 16.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? -0.037036058f : -0.0057299854f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.016493022f : 0.0019576286f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 80.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 212.5f ? -4.900294E-4f : 0.00820812f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? -0.0664054f : -0.20572717f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 44.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 1.5f ? -0.31765595f : -0.08631341f)
            : 0.08776186f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 47.5f ? 0.22342025f : -0.08704565f))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.04146973f : -0.17580289f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? 0.025333451f : -0.010270922f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f ? -0.06894412f : 0.013258683f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? 0.0069537777f : 0.009552616f)))));
      return pred;
  }
  // {00001010 11000011 00000101 00000100 00100001 01010011 00000011 00100010 00010011 01000110 10000010 00000000 01000100 00011010 00010010 01000000 00010000 00000001 00000001 00001101 00000010 00001001 00000110 00010001 11010000 01000100 00001000 11101000 10101000 00000000 00000000 01000001 01000001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {10, -61, 5, 4, 33, 83, 3, 34, 19, 70, -126, 0, 68, 26, 18, 64, 16, 1, 1, 13, 2, 9, 6, 17, -48, 68, 8, -24, -88, 0, 0, 65, 65, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {17, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-32, 0, 0, 0};
  // {01100001 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {97, 1, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {29, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-4, 0, 0, 0};
  // {11101111 11101111 00000011 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, -17, 3, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
}

// Tree predictor for 63-tree and 0-class
class Tree_63_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0018332922f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 133.0f ? 0.064967796f : 0.008953283f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 172.5f ? -0.017326897f : 8.3208154E-4f)))
        : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 190.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 154.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 147.5f ? -0.0012373781f : -0.041046865f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 164.0f ? 0.066605814f : 0.006052895f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? 0.004760807f : -0.23351939f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 226.0f ? 0.05101417f : -0.09705462f))))
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.0022680683f : 0.0065215523f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? -0.25850505f : 0.022037128f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 6.1087155f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? 0.0046029156f : 0.010608646f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.045805782f : -0.033770107f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.004469443f : 2.2215841E-4f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[1 /* SCHL */]) ? -0.004223024f : 0.008379642f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.739516f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 60.5f ? -0.0013024333f : 0.030711923f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.1952859f : 0.032925222f)))));
      return pred;
  }
  // {10000000 10111100 00101011 01000000 00000000 00010000 00001001 00000001 00101000 00011000 00000000 00000000 00111011 01000001 00100100 00100101 01001001 00100000 01000000 01110000 01101000 11101100 00110110 10000000 00001000 10000000 00000111 00000000 00100000 10100000 00000000 00010001 11000010 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, -68, 43, 64, 0, 16, 9, 1, 40, 24, 0, 0, 59, 65, 36, 37, 73, 32, 64, 112, 104, -20, 54, -128, 8, -128, 7, 0, 32, -96, 0, 17, -62, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {82, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {82, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {82, 0, 0, 0};
  // {00100101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {37, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
  // {10100001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-95, 0, 0, 0};
  // {11111110 11101111 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-2, -17, 3, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {28, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {26, 0, 0, 0};
  // {00000000 00000000 00110000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 48, 0};
}

// Tree predictor for 64-tree and 0-class
class Tree_64_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0019686848f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 16.5f ? -0.0036262257f : 0.008587745f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.003505637f : 0.0037023257f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.22213f ? -3.9792497E-4f : 0.094104454f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? 0.113059275f : 0.0023748006f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.0f
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 25.5f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.05021778f : -0.01438149f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? -0.027369099f : 0.0014670596f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */]) ? -0.07272252f : 0.021514159f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.012375612f : 0.0027634092f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? -0.015989345f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.829932f ? -0.012039772f : 0.11932092f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 22.5f ? -0.034377567f : -0.26174152f)))));
      return pred;
  }
  // {01000000 11111000 00000001 00000010 10000001 00010100 00010001 10010000 10000100 10000000 00111001 00000000 10000000 10100001 00100000 00000010 10001000 00000000 00001000 10100000 10000000 11111100 00110101 10100010 00101110 00000010 00000100 00000000 01100000 00101100 00001100 00001001 11000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, -8, 1, 2, -127, 20, 17, -112, -124, -128, 57, 0, -128, -95, 32, 2, -120, 0, 8, -96, -128, -4, 53, -94, 46, 2, 4, 0, 96, 44, 12, 9, -64, 1};
  // {11111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 3, 0};
  // {00000000 01000000 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 64, 3, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 64, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 64, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {11110010 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-14, -1, 3, 0};
  // {01101111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {111, -1, 3, 0};
  // {00001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {11, 0, 0, 0};
  // {11110100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-12, 0, 0, 0};
  // {11110100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-12, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
}

// Tree predictor for 65-tree and 0-class
class Tree_65_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 13.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 33.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 246.5f ? -0.04131106f : -0.27105835f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */]) ? -0.048479088f : 0.01472125f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.655712f ? 0.01344767f : 0.12251256f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? -0.006745313f : -4.0099837E-4f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -6.428986E-4f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 80.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 25.5f ? -0.021394853f : 0.004619743f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 246.5f ? -0.04972635f : -0.26419646f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 11.5f ? 0.18075317f : 0.006431288f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] != 22.0f ? -0.13526502f : 0.06063965f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 29.5f ? 4.4368277E-5f : 0.052076116f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 78.5f ? -0.006956231f : 0.20155391f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
            ? -0.16721705f
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? 0.064972475f : -0.017819792f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 82.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 53.5f ? 0.0071708574f : 0.036669746f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.39411068f ? -0.013905769f : 0.039623693f)))));
      return pred;
  }
  // {00001000 00000001 00101001 01001001 00100000 11011001 00000100 00101001 00010000 00111001 10000110 01000000 00101010 00010000 10100110 00010100 10000000 00000000 01011001 00010000 00001010 00101111 01000100 00000000 10001001 10001000 00000010 00000000 00100000 01000000 00000000 11000011 01000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 1, 41, 73, 32, -39, 4, 41, 16, 57, -122, 64, 42, 16, -90, 20, -128, 0, 89, 16, 10, 47, 68, 0, -119, -120, 2, 0, 32, 64, 0, -61, 64, 1};
  // {11111101 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-3, 127, 3, 0};
  // {11101011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-21, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {76, 0, 0, 0};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {76, 0, 0, 0};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {76, 0, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {19, 0, 0, 0};
  // {00101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {44, 0, 0, 0};
  // {01111111 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {127, -33, 3, 0};
}

// Tree predictor for 66-tree and 0-class
class Tree_66_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.001574139f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -7.834308E-4f : 0.0f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? -0.0035482696f : 0.001218835f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 225.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? 0.019095877f : 0.0012969417f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 254.0f ? -0.044461947f : 0.0037671872f))))
      : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 9.5f
          ? 0.14673847f
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.03798624f : 0.006375123f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.9037824f ? -0.010929633f : -0.12456235f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 161.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[3 /* MAR */]) ? -0.009243477f : 0.011760663f)
            : -0.18818498f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 80.0f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 64.5f ? 0.0034995773f : 0.01431385f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? -0.09696518f : 0.052322827f)))));
      return pred;
  }
  // {11000010 00000110 00000101 00000100 00100000 00110010 00001011 10100010 00101001 11000110 00000000 00000000 01011001 01101000 00000000 00100001 10000000 00000000 00000000 00100101 11100000 00101000 10001100 11010010 00000000 01000000 00000000 00010010 01010000 10000000 10010000 00011001 11000011 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 6, 5, 4, 32, 50, 11, -94, 41, -58, 0, 0, 89, 104, 0, 33, -128, 0, 0, 37, -32, 40, -116, -46, 0, 64, 0, 18, 80, -128, -112, 25, -61, 1};
  // {01111110 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, -1, 3, 0};
  // {01000000 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, -1, 3, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {84, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {88, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {88, 0, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {5, 0, 0, 0};
  // {01110011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {115, 1, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {124, 0, 0, 0};
  // {00100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {35, 0, 0, 0};
  // {11111111 11101111 00000001 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -17, 1, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {5, 0, 0, 0};
}

// Tree predictor for 67-tree and 0-class
class Tree_67_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 44.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? -0.0742627f : -0.016775627f)
            : (Double.isNaN(data[3]) || (float) data[3 /* MAR */] < 2.5f ? -8.1229414E-4f : -0.026679633f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.059091102f : -0.0113293985f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.006551763f : -0.0010472712f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.0026374385f : -9.6684333E-4f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.0023376904f : -0.0039741965f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 8.5f ? -0.056158245f : 0.014487202f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.0338472f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */])
            ? -0.08520054f
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[1 /* SCHL */]) ? 0.013952896f : 0.039761644f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 42.5f
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 3.546996f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[5 /* RAC1P */]) ? -0.017693218f : 0.0061025405f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 9.5f ? 0.09909102f : 0.019454833f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 76.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f ? -6.665691E-4f : -0.047803428f)
            : -0.16276017f))));
      return pred;
  }
  // {11000000 00000011 00001011 00000101 00100001 01010010 00010000 00110000 00010011 00001010 00000011 00000000 10000100 00010011 00100000 01000000 00001000 00000001 01010000 01001001 00000010 10101111 00010101 00010000 00000110 00000000 00000100 00101100 10011000 01000000 00000110 00000001 11000001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, 3, 11, 5, 33, 82, 16, 48, 19, 10, 3, 0, -124, 19, 32, 64, 8, 1, 80, 73, 2, -81, 21, 16, 6, 0, 4, 44, -104, 64, 6, 1, -63, 1};
  // {11111110 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -33, 3, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {17, 0, 0, 0};
  // {11110001 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-15, 1, 0, 0};
  // {01001001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {73, 0, 0, 0};
  // {01001001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {73, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {88, 0, 0, 0};
  // {01111111 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {127, -1, 1, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {26, 0, 0, 0};
  // {10000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-121, 0, 0, 0};
  // {00000000 11010000 00010111 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, -48, 23, 0};
  // {11111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-5, 0, 0, 0};
}

// Tree predictor for 68-tree and 0-class
class Tree_68_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0013710327f : 0.0f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.009564143f : -0.0032579354f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 185.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.014419849f : 0.03193541f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 207.5f ? -0.049930647f : 9.795198E-4f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 32.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 25.5f ? 0.0066065444f : -0.11826277f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 78.0f ? -0.017174635f : 0.044505145f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 6.7984095f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.371788f ? 4.5217373E-4f : 0.02250655f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f ? -0.033261277f : 0.026598182f))))
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
            ? -0.21629108f
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.021605875f : -0.020630304f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.06200677f : -0.03038871f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.010105161f : 0.0016220975f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 67.0f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 30.5f ? 0.08501386f : -0.041717313f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.5f ? 0.019700484f : -0.08275258f))
          : -0.22802182f)));
      return pred;
  }
  // {00000000 00010011 00000001 00000100 00100001 01010000 00000001 11010001 00011001 00100100 10110010 00000000 01001000 01001000 00000100 01000001 11010000 00000001 00001001 00000000 00000010 01011000 00100110 00000011 10110000 00000110 00001000 11000000 00101000 10000100 11001000 10011001 10000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 19, 1, 4, 33, 80, 1, -47, 25, 36, -78, 0, 72, 72, 4, 65, -48, 1, 9, 0, 2, 88, 38, 3, -80, 6, 8, -64, 40, -124, -56, -103, -128, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {19, 0, 0, 0};
  // {11100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-29, 0, 0, 0};
  // {11011111 11110011 00000011 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-33, -13, 3, 0};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-2, 0, 0, 0};
  // {11100011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-29, 1, 0, 0};
  // {11111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-5, 0, 0, 0};
  // {11111110 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-2, -1, 3, 0};
}

// Tree predictor for 69-tree and 0-class
class Tree_69_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.001485825f : 0.0f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.007865857f : 0.0046580774f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.78878f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.005712681f : -0.012841823f)
            : -0.099343285f))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] != 20.0f ? 0.0062753763f : -0.013582206f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 66.5f ? -0.016779026f : -0.0010546611f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 32.0f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 103.5f ? 0.060505252f : -0.011864679f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 41.5f ? 0.025184494f : -0.009426647f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 26.0f
        ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.936292f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.5f ? -0.012493511f : 0.043608114f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */]) ? -0.019782128f : 0.0010910808f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.262434f : -0.034171302f)
            : -0.05222695f))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.04294516f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.5f ? 0.0661419f : -0.0038957347f)
            : (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 8.378135f ? 0.006373804f : 0.08676167f)))));
      return pred;
  }
  // {11001000 00100001 00001101 01001110 00000000 01111011 00010001 00100000 10000001 00001011 00000100 01000000 10110111 00110001 00110010 00000010 00000000 00100000 01000000 00100001 00000000 00101110 00000100 00110000 00001001 01000000 00000101 00000000 01010000 00100000 00010000 00001010 10100000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-56, 33, 13, 78, 0, 123, 17, 32, -127, 11, 4, 64, -73, 49, 50, 2, 0, 32, 64, 33, 0, 46, 4, 48, 9, 64, 5, 0, 80, 32, 16, 10, -96, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {76, 0, 0, 0};
  // {11111011 11101111 00000001 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-5, -17, 1, 0};
  // {11111100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-4, 1, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, 0, 0, 0};
  // {11101111 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-17, 127, 3, 0};
  // {00000000 01000000 00000011 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 64, 3, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 64, 0, 0};
  // {00010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {23, 0, 0, 0};
}

// Tree predictor for 70-tree and 0-class
class Tree_70_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0016947372f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */]) ? -0.057664428f : 0.0071529513f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 32.0f ? -0.011707944f : 0.0031449227f)))
        : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 133.0f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 165.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 141.5f ? 0.007932138f : -0.043967236f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 27.5f ? 0.13003857f : 0.019849472f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 205.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 198.5f ? -0.0032199102f : -0.03318108f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 80.5f ? 5.358702E-4f : -0.13516554f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.0017572822f : 0.0020362148f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? 0.11710065f : -0.0024452962f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.018383296f : 0.12477282f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 61.5f ? 0.0056666457f : 0.08745478f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 4.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 59.0f ? 0.02658409f : 0.29442775f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 64.5f ? -0.011451706f : 0.014394501f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 3.8425791f ? -0.018355725f : -0.1532902f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 71.5f ? 0.0056261527f : -0.04936184f)))));
      return pred;
  }
  // {00000000 00001100 01100011 00010101 10100001 11010100 00001110 00001010 00100110 11010000 00001011 00000000 00000000 00000010 10000000 00110000 00000000 00100000 00010000 01000000 11000010 10001100 11001101 11000000 01000000 00001000 00000010 00001010 01110000 01001000 01000000 00000001 10101000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 12, 99, 21, -95, -44, 14, 10, 38, -48, 11, 0, 0, 2, -128, 48, 0, 32, 16, 64, -62, -116, -51, -64, 64, 8, 2, 10, 112, 72, 64, 1, -88, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {82, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {82, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {82, 0, 0, 0};
  // {00100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {35, 0, 0, 0};
  // {10100000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-96, 1, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {32, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000111 00010000 00000011 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {7, 16, 3, 0};
  // {01011111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {95, -1, 3, 0};
}

// Tree predictor for 71-tree and 0-class
class Tree_71_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0012066765f : 0.0f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.006009075f : 0.0033449132f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 11.035099f ? 0.016222429f : 0.124334954f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.0032391164f : -0.027898444f)))
        : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 186.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 158.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */]) ? -0.0054091504f : 9.596697E-4f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.055937964f : 0.025306396f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 189.5f
            ? -0.14994147f
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 222.5f ? 0.00651044f : -0.080310844f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 42.0f
        ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.054148413f : 0.114810854f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.008482388f : -0.0033779806f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.0133708315f : 0.09772418f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.019473258f : -0.0526235f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.374852f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 77.0f ? 0.01589489f : -0.052705307f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 62.0f ? 0.026288582f : 0.14294215f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */]) ? -0.027695922f : 0.008132273f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f ? -4.6551778E-4f : 0.020299252f)))));
      return pred;
  }
  // {10000000 00110011 00001101 01010101 00100001 00010000 00011011 10110010 00010001 00001000 00000000 00000000 01000000 00010000 00000000 00100000 10000000 00100001 01000000 00111100 00101000 00111111 00000100 00000010 11110110 00000110 00000110 00000000 11100000 00100000 00000100 00000001 11000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 51, 13, 85, 33, 16, 27, -78, 17, 8, 0, 0, 64, 16, 0, 32, -128, 33, 64, 60, 40, 63, 4, 2, -10, 6, 6, 0, -32, 32, 4, 1, -64, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {82, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {82, 0, 0, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-2, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {11110111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-9, 0, 0, 0};
  // {11100111 11111011 00000010 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-25, -5, 2, 0};
  // {11111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-8, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-4, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-10, 0, 0, 0};
  // {00001001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {9, 0, 0, 0};
  // {11111101 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-3, -1, 3, 0};
}

// Tree predictor for 72-tree and 0-class
class Tree_72_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0029644675f : -5.0422375E-4f)
            : 0.0f)
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 60.5f ? -0.0035421709f : -0.04937586f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 86.0f ? 0.0020226121f : -0.0052262344f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.47338f ? -0.004585887f : 0.05081098f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 12.0f ? -0.02177198f : 0.002541499f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 6.5f ? -0.0016814447f : 0.09432387f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? -0.028379334f : 0.008712342f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */]) ? -0.016315622f : 8.704448E-4f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? 0.052073583f : -0.008123953f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 18.5f ? 0.00921417f : 0.056427944f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 72.5f ? 4.982405E-4f : 0.061937567f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.044643395f : -3.817459E-4f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? -0.012715932f : 0.02661997f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 23.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? -0.018676149f : 0.050894868f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f ? 0.009673064f : -0.0054692454f)))));
      return pred;
  }
  // {01000000 10000000 00100001 00011100 10100000 01011011 00000100 00000001 10101110 00100011 00100010 00000000 00011000 01001000 00100010 00000010 10000000 00000000 00000000 10000001 10000010 00101100 00100111 01010010 00000000 10001010 10000010 00000111 00110000 00000000 00010010 01000000 11110000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, -128, 33, 28, -96, 91, 4, 1, -82, 35, 34, 0, 24, 72, 34, 2, -128, 0, 0, -127, -126, 44, 39, 82, 0, -118, -126, 7, 48, 0, 18, 64, -16, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {17, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-32, 0, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {5, 0, 0, 0};
  // {00000010 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 2, 0};
  // {00000000 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 40, 0, 0};
  // {00000000 00000100 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 4, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {5, 0, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, 1, 0, 0};
  // {01111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {122, 0, 0, 0};
  // {11000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-57, 0, 0, 0};
}

// Tree predictor for 73-tree and 0-class
class Tree_73_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0027199623f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.005114596f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? 0.11676544f : -7.243331E-4f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 246.5f ? -0.00247918f : -0.03443978f)
            : (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 4.1890674f ? 0.001314075f : 0.050968014f))))
      : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */])
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.012605618f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 88.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 70.0f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? 0.0031374309f : 0.0043110307f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 4.5f ? 0.17047942f : -0.018962177f))
          : 0.110377796f)));
      return pred;
  }
  // {00001010 01000101 01000001 00010100 00100001 01110100 00000001 01000000 00010001 01000000 00000010 00000000 00001000 10000011 00000100 00000000 10000000 00000000 00010001 01000000 00000000 00101010 00010101 00000010 10001001 01000010 00000100 10010101 01100000 11001100 01011000 10011011 11000011 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 69, 65, 20, 33, 116, 1, 64, 17, 64, 2, 0, 8, -125, 4, 0, -128, 0, 17, 64, 0, 42, 21, 2, -119, 66, 4, -107, 96, -52, 88, -101, -61, 1};
  // {11111101 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-3, 127, 3, 0};
  // {00000000 01000000 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 64, 3, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 64, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 64, 0, 0};
  // {00001101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {13, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {28, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {28, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {17, 0, 0, 0};
  // {10110111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-73, 0, 0, 0};
  // {10110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-80, 0, 0, 0};
  // {10110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-80, 0, 0, 0};
  // {10110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-80, 0, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {19, 0, 0, 0};
}

// Tree predictor for 74-tree and 0-class
class Tree_74_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0026950696f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.458656f ? 0.0063598687f : 0.075780995f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 172.5f ? -0.047008023f : 0.0017368989f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.0052894754f : 0.0f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[1 /* SCHL */]) ? 0.0021613599f : 0.0049442844f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 140.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.0010818412f : 0.0029152816f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[1 /* SCHL */]) ? -0.035157427f : 9.208309E-4f))))
      : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 28.5f
        ? (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[7 /* POBP */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.022934625f : -0.02476204f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? 0.08185245f : 0.0064607523f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? -0.0072967364f : 0.004237161f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 66.5f ? -0.020358376f : -0.116930395f)))
        : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f
          ? (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 29, (int) data[7 /* POBP */])
            ? (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 29, (int) data[7 /* POBP */]) ? 0.025006121f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[5 /* RAC1P */]) ? -0.003213116f : 0.07164379f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 60.5f ? 2.788029E-4f : 0.013444329f)))));
      return pred;
  }
  // {00001000 10001001 00000011 00010100 00100001 01010010 10010001 10111000 00010001 10000100 00010000 00000000 10000110 01011000 10010000 00000101 00000000 00000001 00000000 00100001 00000010 00101001 10000100 00000010 01000100 00000000 00000101 01101000 00101001 00100000 11000100 01000011 10011000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {8, -119, 3, 20, 33, 82, -111, -72, 17, -124, 16, 0, -122, 88, -112, 5, 0, 1, 0, 33, 2, 41, -124, 2, 68, 0, 5, 104, 41, 32, -60, 67, -104, 1};
  // {11101110 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-18, -1, 3, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {84, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {84, 0, 0, 0};
  // {01001001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {73, 0, 0, 0};
  // {01001001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {73, 0, 0, 0};
  // {00000000 10111110 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, -66, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 11001100 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, -52, 0};
  // {11110111 10111011 10111111 00011111}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, -69, -65, 31};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-6, 0, 0, 0};
  // {...29 0-bits... 00001011}
  public static final byte[] GRPSPLIT12 = new byte[] {11};
  // {...29 0-bits... 00001011}
  public static final byte[] GRPSPLIT13 = new byte[] {11};
  // {11111101 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-3, 127, 3, 0};
  // {00000000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 1, 0, 0};
}

// Tree predictor for 75-tree and 0-class
class Tree_75_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 9.5f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 104.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] != 8.0f ? 0.1311315f : -0.07545545f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 53.5f ? -0.061575543f : 0.046613175f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */]) ? -0.0021801237f : 0.09976825f)
            : 0.031149583f))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -7.406796E-4f : 0.0f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */]) ? -0.024707992f : 0.0015405354f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.8131323f ? -0.0072432095f : -0.15015714f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 53.5f ? 8.443684E-4f : 0.015058449f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? -0.19577336f : -0.029504478f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f ? 0.021763053f : -0.039461665f))
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[2 /* COW */]) ? 6.9340755E-4f : 0.01504935f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 73.5f ? 0.0037655535f : 0.13168445f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 55.5f ? 0.05171327f : -0.0129799675f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 31.5f ? -0.0054464894f : 0.0052799783f)))));
      return pred;
  }
  // {00001000 01100000 00001001 00010110 00000001 11010000 10010000 10011000 00000001 00011100 10000010 01000000 00101000 00100000 00100110 00010000 00001000 00000000 01001000 10000101 10000000 10101110 01000101 11100001 10100010 00000100 10010100 00100010 00100000 00000000 11000000 10000000 11000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 96, 9, 22, 1, -48, -112, -104, 1, 28, -126, 64, 40, 32, 38, 16, 8, 0, 72, -123, -128, -82, 69, -31, -94, 4, -108, 34, 32, 0, -64, -128, -64, 1};
  // {01111101 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, -1, 3, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {70, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {88, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {88, 0, 0, 0};
  // {01111011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {123, 1, 0, 0};
  // {11100111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-25, 0, 0, 0};
  // {11010111 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-41, 127, 3, 0};
  // {11010100 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-44, 127, 3, 0};
  // {11010000 11111111 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-48, -1, 0, 0};
  // {11111101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {64, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {16, 0, 0, 0};
}

// Tree predictor for 76-tree and 0-class
class Tree_76_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? 0.07180739f : 0.0012226972f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? -0.01897687f : -0.003177102f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0011609505f : 0.00493051f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? -0.071056396f : 0.010127831f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.0010255334f : 0.0032234637f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? 0.0012071833f : 0.0023442823f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 90.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 9.5f ? 0.013647173f : -0.004524725f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 67.5f ? 0.020792454f : 0.18277088f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.015894819f : 0.0f)
            : -0.34290367f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 23.0f ? 0.2054749f : 0.060815703f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? -0.054003388f : 0.08616358f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 12.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] != 19.0f ? -0.043781064f : 0.1039198f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? -0.09355727f : 0.014405891f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 74.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[5 /* RAC1P */]) ? -0.010366152f : 0.0033345846f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 53.5f ? -0.024004454f : -0.13581653f)))));
      return pred;
  }
  // {00000000 00011000 00000001 00011100 00100001 00011010 00010001 01111000 10011001 01100010 00001111 00000000 00000001 00010001 10100000 01000000 10010000 00100000 00000001 00000000 01001010 01101000 00001110 00000010 00010000 10010000 00101000 00001001 00101000 11000010 11011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 24, 1, 28, 33, 26, 17, 120, -103, 98, 15, 0, 1, 17, -96, 64, -112, 32, 1, 0, 74, 104, 14, 2, 16, -112, 40, 9, 40, -62, -34, 0, 0, 0};
  // {11111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 3, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {20, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {3, 0, 0, 0};
  // {11011111 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, -1, 1, 0};
  // {10001100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-116, 1, 0, 0};
  // {10011100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-100, 1, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {24, 0, 0, 0};
  // {01111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {126, 0, 0, 0};
  // {10100111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-89, 0, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-3, 1, 0, 0};
}

// Tree predictor for 77-tree and 0-class
class Tree_77_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0012571953f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 66.5f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[0 /* RELP */]) ? -0.08592302f : 0.0039782627f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? -0.096391685f : -0.015099047f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.0010744354f : 0.0f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.005396063f : 0.017432053f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 65.5f ? 0.013438714f : -0.082913294f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? 0.041138627f : -0.0016329532f))))
      : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 154.5f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 22.5f ? -0.008090989f : -0.10911434f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f ? -0.013931185f : 0.01228492f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 166.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 23.5f ? 0.1466684f : 0.0369365f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */]) ? -0.042316362f : 0.014132707f)))
        : (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 8.6146145f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.011567059f : -0.0021664905f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.019828621f : 0.003364164f))
          : 0.17508633f)));
      return pred;
  }
  // {01001010 00000000 00000001 01010101 00100001 00010100 00000010 01000000 00000000 00000010 00100000 00100100 01000010 11011010 00010000 00010111 00000001 00000001 01010000 00001000 10000000 00111010 00110100 00010010 01000000 01001010 01001000 11111100 11100001 10000100 11000000 00000010 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {74, 0, 1, 85, 33, 20, 2, 64, 0, 2, 32, 36, 66, -38, 16, 23, 1, 1, 80, 8, -128, 58, 52, 18, 64, 74, 72, -4, -31, -124, -64, 2, 0, 0};
  // {11111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {76, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {88, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {88, 0, 0, 0};
  // {11111010 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, 1, 0, 0};
  // {01100101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {101, 0, 0, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-4, -1, 3, 0};
  // {00010111 00000110 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {23, 6, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {5, 0, 0, 0};
}

// Tree predictor for 78-tree and 0-class
class Tree_78_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 4.5f
          ? (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[7 /* POBP */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 92.5f ? 0.022240728f : -0.017356806f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? -3.4192466E-4f : 0.020736001f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 29.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0073170476f : -0.0010774758f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 39.5f ? 0.005448834f : -0.003231595f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -5.318079E-4f : 4.074622E-4f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 119.5f ? 0.052459475f : -0.0012870115f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? -0.042670656f : 0.167646f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.030392129f : 0.004944106f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 22.0f
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */]) ? -0.030739298f : 0.0f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 21.5f ? -0.100620404f : 0.0724947f))
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[1 /* SCHL */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 18.5f ? -0.16793841f : 0.025349485f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 26.5f ? 0.15115963f : 0.018108966f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.07155973f : -0.023449855f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.021152725f : 2.7360654E-4f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT16, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT17, 0, (int) data[2 /* COW */]) ? -0.0024329277f : 0.038945254f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? -0.011809624f : 0.009286405f)))));
      return pred;
  }
  // {10000000 00010101 01101001 01010100 00100000 10110011 10010010 10110000 00010000 00001110 00000010 01000000 00111000 00110001 00100100 00100000 01001000 00000000 00010000 00110100 00000010 11001000 10010100 10100000 00001111 00000100 10010000 00000010 00101001 00000000 00010000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 21, 105, 84, 32, -77, -110, -80, 16, 14, 2, 64, 56, 49, 36, 32, 72, 0, 16, 52, 2, -56, -108, -96, 15, 4, -112, 2, 41, 0, 16, 1, 0, 0};
  // {11111110 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -33, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00001101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {13, 0, 0, 0};
  // {11000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-62, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {10001000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-120, 1, 0, 0};
  // {11110011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-13, 0, 0, 0};
  // {10000000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, 1, 0, 0};
  // {00000000 01010001 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 81, 0, 0};
  // {00000000 01010001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 81, 0, 0};
  // {00000000 10110000 00000011 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, -80, 3, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {5, 0, 0, 0};
  // {00001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {11, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {32, 0, 0, 0};
}

// Tree predictor for 79-tree and 0-class
class Tree_79_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.002829187f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */]) ? -0.06814697f : -0.013704181f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.640988f ? 7.793794E-4f : -0.09787719f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.003842408f : 0.019660361f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 193.5f ? 8.2895055E-4f : 0.045439504f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? -4.4614312E-4f : 0.040783163f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[0 /* RELP */]) ? -0.020806627f : 0.034250528f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 76.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 34.0f ? -0.010347793f : 0.012075053f)
            : -0.1341624f))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 31.5f ? -0.03601108f : -0.2451646f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.007568362f : -0.027613433f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.640988f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? 0.015953716f : 0.002278945f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 48.0f ? -0.061828338f : 0.087562524f)))));
      return pred;
  }
  // {01001000 00000010 00000101 00010100 00000001 01010000 00000101 01000010 10000001 11000001 00001000 00100100 11000001 00000000 00000010 01000001 01001000 00100001 01000001 01000000 01101000 00101000 00111110 01010000 10000000 01011010 01000110 00000101 00100001 00101000 00001100 00000001 10000010 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {72, 2, 5, 20, 1, 80, 5, 66, -127, -63, 8, 36, -63, 0, 2, 65, 72, 33, 65, 64, 104, 40, 62, 80, -128, 90, 70, 5, 33, 40, 12, 1, -126, 0};
  // {01111101 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 127, 3, 0};
  // {01100000 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {96, 127, 3, 0};
  // {01100000 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {96, 127, 0, 0};
  // {01100000 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {96, 127, 0, 0};
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {67, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {28, 0, 0, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {15, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {17, 0, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-24, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {32, 0, 0, 0};
  // {00000001 10100000 00000011 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, -96, 3, 0};
  // {11111111 11011011 00000011 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -37, 3, 0};
}

// Tree predictor for 80-tree and 0-class
class Tree_80_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 2.5f ? 0.03935944f : -0.0025563736f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.05840837f : -0.0037885185f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */]) ? 0.0039476524f : 0.021204965f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.5f ? -0.05233182f : 7.8513514E-4f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f ? -0.021987887f : -0.29576305f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.006285792f : -0.006176697f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 36.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] != 24.0f ? -0.0016853713f : -0.026678871f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? 0.019031078f : 0.0019359803f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 76.0f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 94.5f ? 3.1106794E-4f : -0.01768101f)
            : 0.0f)
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 16.5f
            ? 0.065279536f
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 35.0f ? -0.21506532f : -0.08762295f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 124.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.458656f ? -0.011603129f : -0.100458875f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */]) ? 0.020965038f : 0.08330455f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */]) ? -0.029662605f : 5.4462004E-4f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.020376f ? 0.006459629f : 0.086726636f)))));
      return pred;
  }
  // {01000010 00100000 00000011 01010111 10000000 01011100 10001001 00000000 10101101 00010000 00010010 00000000 01001010 01011010 10010100 00000110 01010000 00000000 00001000 00000100 10000000 00111000 00000101 00000001 01110001 10000000 00100001 01101000 00101000 11000000 00000010 00001001 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {66, 32, 3, 87, -128, 92, -119, 0, -83, 16, 18, 0, 74, 90, -108, 6, 80, 0, 8, 4, -128, 56, 5, 1, 113, -128, 33, 104, 40, -64, 2, 9, 0, 0};
  // {11111110 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -33, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {11111000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-8, 1, 0, 0};
  // {00010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {23, 0, 0, 0};
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {67, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {28, 0, 0, 0};
  // {11111101 11111101 00000011 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -3, 3, 0};
  // {00000000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00001001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {9, 0, 0, 0};
  // {10100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-93, 0, 0, 0};
  // {00011011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {27, 0, 0, 0};
}

// Tree predictor for 81-tree and 0-class
class Tree_81_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[5 /* RAC1P */]) ? -0.0015608162f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 212.5f ? 0.074133046f : 0.18547107f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.5f ? -0.0019865076f : 0.045254078f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 48.0f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 9.472328E-4f : -0.0037486262f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 17.5f ? -0.07123166f : 8.3962677E-4f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.54246f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? 0.0155829005f : 0.0017199622f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 69.5f ? 0.024657177f : 0.16430885f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 11.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.038387153f : 0.0f)
            : 0.01384046f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
            ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[1 /* SCHL */]) ? -0.03248508f : 0.16784498f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 6.5f ? 0.011017168f : 0.12595297f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? -0.10190778f : -0.01839371f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f ? 0.14461845f : 0.008674954f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.4439335f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.32251f ? 0.004485608f : 0.020635514f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.54554f ? -0.19316089f : -0.023275293f)))));
      return pred;
  }
  // {00000000 01001001 00101101 00011100 00000001 00010000 10010000 00001001 00000010 00101001 00000101 00000100 00001100 10000000 00100000 00011000 11010001 00000000 01000001 00100001 00000010 00101111 01110100 00100000 11001100 00000000 01000100 00010001 00101000 11100000 10100010 00000011 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 73, 45, 28, 1, 16, -112, 9, 2, 41, 5, 4, 12, -128, 32, 24, -47, 0, 65, 33, 2, 47, 116, 32, -52, 0, 68, 17, 40, -32, -94, 3, 0, 0};
  // {11111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 3, 0};
  // {11110100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-12, 1, 0, 0};
  // {11110100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-12, 1, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {11011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-36, 0, 0, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-4, -1, 3, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {12, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {12, 0, 0, 0};
  // {00000000 00000000 00001000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 8, 0};
  // {10111111 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, -33, 3, 0};
}

// Tree predictor for 82-tree and 0-class
class Tree_82_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.001188308f : 0.0f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.007932232f : 0.004187489f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 76.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.0077443393f : -0.0037521103f)
            : -0.07206541f))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.0016304981f : 0.0f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */]) ? -0.004402015f : 0.018229645f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.00895583f : -0.066479295f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 47.5f ? 0.037254777f : -0.028730765f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 23.5f
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? -0.04838273f : 0.09158522f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 16.5f ? 0.21433589f : 0.04889547f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f
            ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.03857327f : -0.17527832f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 34.5f ? -0.056102954f : 0.05050549f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? 0.026851231f : -0.0034627235f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */]) ? -0.0025197573f : 0.0047159507f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.026684903f : 1.9328832E-4f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 80.5f ? 0.01169504f : -0.12978299f)))));
      return pred;
  }
  // {00000000 10000000 00001001 00010100 00100000 01110010 10000001 10110010 00001001 10000000 00100010 00000100 00000100 00000000 00000001 01001000 11000000 00000001 00000000 00000001 00000000 00101000 00000100 00010010 00100001 00000010 10111111 11000010 10111001 10000110 00110001 01001001 00110001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -128, 9, 20, 32, 114, -127, -78, 9, -128, 34, 4, 4, 0, 1, 72, -64, 1, 0, 1, 0, 40, 4, 18, 33, 2, -65, -62, -71, -122, 49, 73, 49, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {88, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {88, 0, 0, 0};
  // {11111010 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-6, 1, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {28, 0, 0, 0};
  // {11111111 11111101 00000010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -3, 2, 0};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-127, 0, 0, 0};
  // {00011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {30, 0, 0, 0};
  // {01000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {69, 0, 0, 0};
}

// Tree predictor for 83-tree and 0-class
class Tree_83_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0016547147f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 20.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.005088468f : 0.0f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? -0.0434999f : 0.005039731f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 50.5f ? -0.01948199f : 0.030069044f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.024667524f : 0.002313104f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 52.0f ? -0.008091171f : 0.049225517f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? -0.034298535f : -0.034547567f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 22.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 17.5f ? 0.0071648583f : -0.005249274f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.05073249f : 0.11756957f)))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.197614f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 31.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] != 20.0f ? 0.009027994f : -0.018903315f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 38.5f ? -0.0087533025f : 0.00200245f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? 0.21824914f
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? 0.051926028f : 0.034516364f)))));
      return pred;
  }
  // {01000010 00000100 00000001 00011100 00000001 00010000 10000111 00110010 00000001 01000000 00001010 00000100 10000100 00010000 10000000 00000101 01001000 00000001 00001000 00101101 00000000 00011000 10001101 10010000 00000000 00001110 10000000 00001100 11101001 10001110 01111011 01000000 00010000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {66, 4, 1, 28, 1, 16, -121, 50, 1, 64, 10, 4, -124, 16, -128, 5, 72, 1, 8, 45, 0, 24, -115, -112, 0, 14, -128, 12, -23, -114, 123, 64, 16, 0};
  // {01111110 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, -33, 3, 0};
  // {01100000 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {96, -33, 3, 0};
  // {01100000 00011111 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {96, 31, 0, 0};
  // {01100000 00011111 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {96, 31, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {82, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {82, 0, 0, 0};
  // {11011101 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-35, -1, 3, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {19, 0, 0, 0};
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-104, 0, 0, 0};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {65, 0, 0, 0};
}

// Tree predictor for 84-tree and 0-class
class Tree_84_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 205.5f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? -0.06650131f : -0.010235595f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? -0.052287087f : -4.0992541E-4f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.06562191f : 4.582493E-4f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 38.5f ? 0.2235149f : 0.07904256f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.0029835769f : 0.0f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.002181164f : -0.0018465935f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.4439335f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f ? -0.0037439726f : 0.029469969f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 12.5f ? -0.11891339f : 0.0686069f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 12.5f
            ? -0.16981344f
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 39.5f ? 0.017493922f : -0.05044736f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.17269315f : -0.016660972f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 120.5f ? 0.1318751f : 0.027490357f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 56.0f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? 6.142134E-4f : 0.008123323f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.03508646f : 0.0053498405f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 90.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? 0.007098668f : -0.009461978f)
            : 0.20137288f))));
      return pred;
  }
  // {00000000 10000010 00000001 01010100 00000000 11110001 00000000 00000001 10001100 00000111 00110000 00000000 00100000 10100011 00010111 01110000 00000001 00000000 00000000 11000000 11101000 10001011 00000110 01010011 00010111 10000000 01100000 01100000 00100000 10000000 00000011 01001010 00000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -126, 1, 84, 0, -15, 0, 1, -116, 7, 48, 0, 32, -93, 23, 112, 1, 0, 0, -64, -24, -117, 6, 83, 23, -128, 96, 96, 32, -128, 3, 74, 1, 0};
  // {01111111 01011111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {127, 95, 3, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 1, 0, 0};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {56, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-32, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {00001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {11, 0, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {74, 0, 0, 0};
  // {11101111 11111011 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, -5, 3, 0};
  // {00001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {11, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-16, 0, 0, 0};
  // {00111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {59, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {64, 0, 0, 0};
}

// Tree predictor for 85-tree and 0-class
class Tree_85_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0014487896f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 80.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 48.0f ? -0.0051145125f : 0.005692305f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 212.5f ? 0.010564861f : -0.21542113f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -5.780588E-4f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f ? 0.010490693f : 0.078650616f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 44.5f ? -0.010114573f : 0.008352565f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -8.292347E-4f : -0.3058861f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 73.5f ? -0.0073811747f : -0.13803454f)
            : -0.126822f))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? 0.002102217f : 0.0018443194f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.458656f ? 0.0035556485f : -0.048380855f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.640988f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 10.5f ? 0.022791672f : 0.0035577859f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f ? -0.027682247f : -0.16841345f)))));
      return pred;
  }
  // {00000010 11100000 01001001 00011100 00000000 01010000 10010001 00100000 00010000 00001000 00010000 00000000 01001000 00001000 00000000 00001000 10000010 00000000 00000000 10000000 00000000 00001000 00000111 00000000 00000000 01011110 00001101 10001110 00111001 11100100 11111100 11011011 00110001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {2, -32, 73, 28, 0, 80, -111, 32, 16, 8, 16, 0, 72, 8, 0, 8, -126, 0, 0, -128, 0, 8, 7, 0, 0, 94, 13, -114, 57, -28, -4, -37, 49, 1};
  // {11111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 3, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {26, 0, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {74, 0, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {74, 0, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {74, 0, 0, 0};
  // {10110111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-73, -1, 3, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
}

// Tree predictor for 86-tree and 0-class
class Tree_86_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -9.4101974E-4f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 80.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 70.5f ? 0.001533867f : -0.033597775f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 1.182332f ? -0.0017634844f : -0.22659273f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 79.5f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */]) ? -0.0014382692f : 1.0872734E-4f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 59.5f ? 0.0042894282f : -0.055591535f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 52.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? -0.07354632f : 0.04866934f)
            : 0.2025784f)))
      : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 1.2299546f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? -0.023861961f : -0.034306053f)
            : -0.22442666f)
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 49.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 47.5f ? -0.0049100854f : -0.12782757f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */]) ? -0.054405f : 0.02968381f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[3 /* MAR */]) ? -0.0012696703f : 0.017052101f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 35.5f ? -0.048585076f : 0.058511082f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 7.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f ? -0.0028304763f : -0.112340346f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[1 /* SCHL */]) ? -0.007420126f : 0.006975731f)))));
      return pred;
  }
  // {10001000 00010001 00000011 01010111 10100001 00011110 10000010 00000001 00000001 01000010 10000010 00000100 01000000 00010001 00100111 00000010 00010000 00000001 00010001 00100001 10000010 00001001 00100111 00010000 10000000 00000000 00000000 00010000 10100001 00001000 10000001 01011001 00011001 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-120, 17, 3, 87, -95, 30, -126, 1, 1, 66, -126, 4, 64, 17, 39, 2, 16, 1, 17, 33, -126, 9, 39, 16, -128, 0, 0, 16, -95, 8, -127, 89, 25, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {11011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-34, 0, 0, 0};
  // {00000110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {6, 0, 0, 0};
  // {10101001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-87, 0, 0, 0};
  // {11111100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-4, 1, 0, 0};
  // {01111111 00000000 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {127, 0, 3, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {24, 0, 0, 0};
  // {00000000 10100110 00111100 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, -90, 60, 0};
}

// Tree predictor for 87-tree and 0-class
class Tree_87_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0010443445f : 1.7597598E-4f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 118.5f ? 0.0012489747f : -0.014442865f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */]) ? -0.001713112f : 0.0f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? -0.011796765f : 0.028254911f)))
        : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 190.5f
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 143.5f ? -2.4232153E-4f : -0.014506515f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 2.069081f ? 0.002785044f : 0.09822637f))
          : (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 191, (int) data[7 /* POBP */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 193.5f ? -0.21381156f : -0.0120339105f)
            : 0.0f)))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 59.5f
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 11.035099f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */]) ? -0.03429347f : 0.0063538724f)
            : -0.15379657f)
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.128532f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? -0.07857129f : -0.0134425135f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 74.0f ? 0.07441962f : -0.14130305f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] != 4.0f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.09941529f : 0.046725366f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 55.5f ? 0.19954316f : 0.043919537f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.315959f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.007429399f : 1.5369336E-4f)
            : 0.14005698f))));
      return pred;
  }
  // {01000000 00000010 00100101 00010100 00100001 10010001 10000000 01011010 00001010 10010101 00101100 00100100 10010100 01100010 10010000 01001001 10000000 00100000 01000000 00010000 00000000 01011110 00000100 00000010 01000000 10001100 01000100 01000000 01110000 00100000 00000001 01000011 00000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 2, 37, 20, 33, -111, -128, 90, 10, -107, 44, 36, -108, 98, -112, 73, -128, 32, 64, 16, 0, 94, 4, 2, 64, -116, 68, 64, 112, 32, 1, 67, 0, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {01110110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {118, 1, 0, 0};
  // {01110110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {118, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {...191 0-bits... 11111001 11111111 11111110}
  public static final byte[] GRPSPLIT8 = new byte[] {-7, -1, -2};
  // {00110001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {49, 0, 0, 0};
  // {11110111 11011111 00000010 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, -33, 2, 0};
  // {10000111 01000010 00000001 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-121, 66, 1, 0};
}

// Tree predictor for 88-tree and 0-class
class Tree_88_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 4.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 22.5f ? -4.799741E-4f : -0.14405383f)
            : (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[7 /* POBP */]) ? -0.007050322f : 0.017893074f))
          : (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 4.155285f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 26.0f ? -0.0054572024f : -5.9045124E-4f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f ? 0.027382499f : 0.123426f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 54.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -0.0015254972f : 0.0f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 76.0f ? 0.0013251008f : 0.048405394f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 95.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? 0.010023169f : 0.010204749f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.026210697f : -0.1858684f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 174.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 18.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 52.5f ? 0.016400851f : -0.10964952f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.5f ? -0.02538759f : -1.027795E-4f))
          : -0.19466189f)
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 17.5f ? -0.0011171063f : 0.057923526f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 155.5f ? -0.008920335f : 0.017426418f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -4.938868E-4f : 0.004065783f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f ? 0.0018511005f : 0.012572476f)))));
      return pred;
  }
  // {00000000 10001000 00001001 01010101 00100000 00010000 00001101 10100001 10100100 00100000 00010010 00000000 01101011 01000000 00000000 00100100 01000000 00000000 01001000 00101000 00101010 10101010 11001000 11000001 01000101 00000010 10000000 00101110 10010001 00001010 00110000 00000001 10000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -120, 9, 85, 32, 16, 13, -95, -92, 32, 18, 0, 107, 64, 0, 36, 64, 0, 72, 40, 42, -86, -56, -63, 69, 2, -128, 46, -111, 10, 48, 1, -128, 0};
  // {11111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 3, 0};
  // {00001101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {13, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {28, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {28, 0, 0, 0};
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {67, 0, 0, 0};
  // {11101111 11101111 00000001 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-17, -17, 1, 0};
  // {11100101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-27, 1, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
}

// Tree predictor for 89-tree and 0-class
class Tree_89_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 13.5f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 225.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[5 /* RAC1P */]) ? -0.017699094f : 0.06099301f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 48.5f ? -0.10977578f : 0.057836458f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 26.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */]) ? -0.09616328f : 0.012532319f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 48.5f ? -0.0049748663f : 0.0027439366f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 120.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f ? 0.0632394f : 0.004744914f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 150.0f ? -0.013407778f : -0.0021347892f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 57.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -7.063607E-4f : 0.0036771111f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? 0.012106857f : 0.011103757f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? -0.00398421f : 0.008789744f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */]) ? -0.0267735f : 0.0041981763f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f ? -0.13027711f : -0.0015686315f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */]) ? 0.056753494f : 0.014364097f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT16, 0, (int) data[3 /* MAR */]) ? -0.03695789f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.10279318f : -0.032530315f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 74.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f ? 0.0032555072f : 0.027258057f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? 0.07010366f : -0.00790041f)))));
      return pred;
  }
  // {10001000 10000001 00000111 01010100 10000000 01110010 00010010 00000000 00010001 00001010 10000010 01000000 00000000 01011000 00000011 00001010 01010000 00000001 00000000 00000101 11000000 00001000 00010001 00000000 00111000 01010010 01111110 11000000 00010000 11100000 01000111 00000011 10000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-120, -127, 7, 84, -128, 114, 18, 0, 17, 10, -126, 64, 0, 88, 3, 10, 80, 1, 0, 5, -64, 8, 17, 0, 56, 82, 126, -64, 16, -32, 71, 3, -128, 0};
  // {11111101 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-3, 127, 3, 0};
  // {01011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {90, 0, 0, 0};
  // {00010011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {19, 0, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {20, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {28, 0, 0, 0};
  // {00100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {35, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11011111 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-33, 1, 0, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, 1, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {3, 0, 0, 0};
  // {10011111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-97, -1, 3, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {3, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
}

// Tree predictor for 90-tree and 0-class
class Tree_90_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0013293992f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -5.851355E-4f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.0709418f : -0.0010998296f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 50.5f ? 0.0037128248f : -0.08058593f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 139.5f ? 0.0036034966f : -0.031247962f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 119.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 23.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? 0.015753958f : -0.039830923f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 22.5f ? -0.09766062f : -0.013563799f))
          : 0.11103771f)
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 6.6998816f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[3 /* MAR */]) ? 9.3138055E-4f : 0.013339331f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? 0.14988168f : 0.034484312f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? -7.8785914E-4f : 0.0016553428f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 7.488103f ? 0.0045437287f : -0.02498014f)))));
      return pred;
  }
  // {00000000 00000001 00000001 00010100 00000000 01110010 00000000 00000000 00010001 00001010 10000010 00000100 00000000 00010000 00000000 01111100 10001011 00100001 00011001 01100000 00000000 01001000 00100101 00010001 11000011 00010100 10000011 00100000 10111011 00000100 10110001 10011001 10000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 1, 1, 20, 0, 114, 0, 0, 17, 10, -126, 4, 0, 16, 0, 124, -117, 33, 25, 96, 0, 72, 37, 17, -61, 20, -125, 32, -69, 4, -79, -103, -128, 1};
  // {11101110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-18, 127, 3, 0};
  // {11101100 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-20, 127, 3, 0};
  // {11101100 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-20, 127, 0, 0};
  // {11101100 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-20, 127, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {74, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {88, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {88, 0, 0, 0};
  // {00100001 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {33, 1, 0, 0};
  // {01110111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {119, -1, 3, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {28, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
}

// Tree predictor for 91-tree and 0-class
class Tree_91_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0020729806f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? 0.0014143143f : -0.0047068247f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 53.5f ? 7.1736635E-4f : 0.018825362f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */]) ? -0.0621735f : 0.017393503f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 93.0f ? -0.0013559568f : -0.119973704f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.0041536014f : 9.414523E-5f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? -0.03633689f : 0.0048556947f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */]) ? -0.02150629f : 0.091965936f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 69.5f ? 0.00808831f : 0.14722878f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 46.5f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 3.5f ? 0.12587194f : -0.0029352938f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 3.5f ? -0.056180973f : 0.0070927786f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 90.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 30.0f ? 3.8860842E-5f : 0.02071589f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 139.5f ? -0.046548866f : 0.0022007963f)))));
      return pred;
  }
  // {10000000 00000001 00001001 01011100 00000000 01010000 10010011 00000000 00000001 10000010 10000010 01000000 00000000 00001001 00000101 01110100 00001010 00000000 01011001 00000001 01001010 01111001 10011101 01100000 11000011 10000000 00000000 00000110 00001000 00000010 10100100 01000001 10000000 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 1, 9, 92, 0, 80, -109, 0, 1, -126, -126, 64, 0, 9, 5, 116, 10, 0, 89, 1, 74, 121, -99, 96, -61, -128, 0, 6, 8, 2, -92, 65, -128, 1};
  // {11101101 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-19, 127, 3, 0};
  // {11101100 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-20, 127, 3, 0};
  // {11101100 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-20, 127, 0, 0};
  // {11101100 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-20, 127, 0, 0};
  // {11111000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-8, 1, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {74, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {29, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {3, 0, 0, 0};
  // {00000000 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, -96, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
}

// Tree predictor for 92-tree and 0-class
class Tree_92_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0011399926f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -7.814785E-4f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 41.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 29.5f ? -7.035779E-4f : 0.017266892f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f ? -0.09830038f : -0.004973781f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 34.0f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.5f ? -0.07686412f : 0.083375424f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 12.5f ? -0.008140023f : 0.018924495f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? 0.018189324f : -0.010046061f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 161.5f ? 0.006643975f : 0.09892178f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 107.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 75.5f ? -0.0037086245f : -0.10170258f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.029898828f : -0.0022252882f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.0163638f : 0.0019167499f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? 0.005338991f : 0.0061834203f)))));
      return pred;
  }
  // {00000000 00000001 00000101 01010100 00000001 00010000 10000001 00110000 00000001 00001010 00000010 00000000 00000000 00001000 00000010 01001100 00001000 00000000 00010001 00000000 00000000 00001000 00010000 00000000 00000001 01001110 11100101 01111110 11100001 11101100 10111111 00011001 10110011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 1, 5, 84, 1, 16, -127, 48, 1, 10, 2, 0, 0, 8, 2, 76, 8, 0, 17, 0, 0, 8, 16, 0, 1, 78, -27, 126, -31, -20, -65, 25, -77, 0};
  // {01111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 127, 3, 0};
  // {01100000 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {96, 127, 3, 0};
  // {01100000 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {96, 127, 0, 0};
  // {01100000 01111111 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {96, 127, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {74, 0, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {74, 0, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {74, 0, 0, 0};
  // {11111101 11101111 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, -17, 3, 0};
  // {00001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {15, 0, 0, 0};
  // {10100101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-91, 0, 0, 0};
  // {01000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {69, 0, 0, 0};
  // {00001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {11, 0, 0, 0};
}

// Tree predictor for 93-tree and 0-class
class Tree_93_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 131.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 46.5f ? -0.012137659f : 0.018594801f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.033481438f : -0.06707966f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 40.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 39.5f ? 0.0170178f : -0.04108928f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */]) ? -0.046868093f : 0.101559624f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.03227959f : -6.960325E-4f)
            : 0.0f)
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? -0.001338637f : 0.0f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.0022669388f : -0.001711731f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 37.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 160.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 8.5f ? -0.10191575f : -0.0204392f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */]) ? -0.0035516738f : 0.008769088f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */]) ? -0.24366145f : -0.080595545f)
            : 0.08367079f))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 31.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? -0.006441157f : 0.057240434f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.84203136f ? -0.04402682f : -0.1477475f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 23.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 3.251413f ? 0.02561276f : -0.09313715f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? 0.004904055f : 0.004163867f)))));
      return pred;
  }
  // {00001000 00010001 00000001 01010100 00000001 00010000 00000001 00000000 10010001 00000000 00000010 00000000 10000000 01000000 00100010 00110010 00000000 00000000 00011000 00001101 00000000 10101010 11110001 11010000 00000011 01001010 00010100 00001000 00101001 11101000 10010111 00011001 10110100 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 17, 1, 84, 1, 16, 1, 0, -111, 0, 2, 0, -128, 64, 34, 50, 0, 0, 24, 13, 0, -86, -15, -48, 3, 74, 20, 8, 41, -24, -105, 25, -76, 1};
  // {01111111 01011111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {127, 95, 3, 0};
  // {10100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-94, 0, 0, 0};
  // {00011001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {25, 0, 0, 0};
  // {00000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {7, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {88, 0, 0, 0};
  // {11100101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-27, 1, 0, 0};
  // {11100101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-27, 1, 0, 0};
  // {11111101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 0, 0, 0};
  // {00000010 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 32, 0, 0};
  // {11101000 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-24, 127, 3, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, 1, 0, 0};
  // {11011111 11110111 00000011 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, -9, 3, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
}

// Tree predictor for 94-tree and 0-class
class Tree_94_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.118903f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 106.5f ? 0.0055429847f : -0.004192247f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 21.5f ? -0.014065992f : 0.10049315f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[5 /* RAC1P */]) ? 0.10186772f : 0.016940886f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.00359784f : -0.006919474f)))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 11.478474f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 48.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 17.5f ? -0.012500745f : -8.489659E-4f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 21.5f ? 0.006809633f : 2.810056E-4f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.067138f
            ? -0.20591187f
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 126.5f ? -0.10057768f : 0.0015188468f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? -0.17902182f : -0.09377459f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 19.5f ? 0.0013185765f : -0.05423603f))
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? 0.0021568218f : 0.0031397599f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? -0.07263755f : 0.013676713f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 3.2021494f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 74.5f ? 0.001866381f : -0.056338694f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? 0.15079719f : 0.012179113f)))));
      return pred;
  }
  // {01000010 00000000 01001011 00010100 00100001 00010101 10000010 10100000 00001001 01000001 10000001 00000100 01001000 00110000 00000000 00000000 00010000 00000001 01000000 10000000 11101000 00001100 00010000 00000010 01010100 10010100 11001110 00100001 00101001 00000100 10101011 10000001 00001010 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {66, 0, 75, 20, 33, 21, -126, -96, 9, 65, -127, 4, 72, 48, 0, 0, 16, 1, 64, -128, -24, 12, 16, 2, 84, -108, -50, 33, 41, 4, -85, -127, 10, 0};
  // {11111110 11111101 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -3, 3, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {20, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
  // {01100111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {103, -1, 3, 0};
  // {01100110 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {102, -1, 3, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-16, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
}

// Tree predictor for 95-tree and 0-class
class Tree_95_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0011534673f : 1.6897621E-4f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.03992155f : -0.030147567f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 33.5f ? -0.06090284f : -1.7467732E-4f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 75.5f ? 0.003103132f : -0.068601325f)))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */]) ? -0.0015535748f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 80.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */]) ? 0.0026379304f : 0.0033594286f)
            : 0.12884407f)))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.070857234f : -0.008668042f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[0 /* RELP */]) ? -0.003906276f : 0.011071541f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[0 /* RELP */]) ? -0.012962963f : 0.038592782f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.239554f ? 0.0036058049f : 0.116063185f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT16, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT17, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 127.5f ? -0.030159622f : -0.17826f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 13.0f ? -0.039306372f : -0.0017479833f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.0040054456f : -0.0030713538f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT18, 0, (int) data[3 /* MAR */]) ? -0.01142581f : 0.010684888f)))));
      return pred;
  }
  // {01000000 00000000 00000001 00010100 00100000 00010000 10000000 10000000 00001001 00000000 00000000 00000000 01001000 11001000 00001000 01011101 11000011 00000000 00000000 00111100 00000010 01011011 00001101 00100011 10001001 00001000 00000100 10011000 01111001 00100010 10110011 01000011 10000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 1, 20, 32, 16, -128, -128, 9, 0, 0, 0, 72, -56, 8, 93, -61, 0, 0, 60, 2, 91, 13, 35, -119, 8, 4, -104, 121, 34, -77, 67, -127, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00100101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {37, 0, 0, 0};
  // {11101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-22, 0, 0, 0};
  // {11101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-22, 0, 0, 0};
  // {11101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-22, 0, 0, 0};
  // {00011111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {31, 0, 0, 0};
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {67, 0, 0, 0};
  // {01010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {82, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {84, 0, 0, 0};
  // {00010010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {18, -128, 0, 0};
  // {00000001 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 2, 0};
  // {10100000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-96, 32, 0, 0};
  // {11111111 11110101 00000001 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -11, 1, 0};
  // {11011101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-35, 1, 0, 0};
  // {00010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {23, 0, 0, 0};
}

// Tree predictor for 96-tree and 0-class
class Tree_96_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 13.5f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 217.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */]) ? -0.008863291f : 0.06286129f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 56.5f ? -0.112317644f : 0.01575617f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0011501956f : 0.0f)
            : 0.0f))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.0019774623f : 0.0f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 13.5f ? 0.069836535f : 4.7875056E-4f))
          : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.008197774f : -1.1796251E-4f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 8.5f ? -0.06626965f : -0.0016309877f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.0021971953f : 1.3842602E-4f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 13.5f ? -0.22574891f : 0.037348624f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 10.5f ? 0.06765544f : -0.071536414f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[3 /* MAR */]) ? -0.002067696f : 0.011684149f)))
        : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.217431f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 161.5f ? 0.012958944f : 0.16606602f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 3.5f ? 0.031903252f : 0.0016632847f))
          : 0.16910158f)));
      return pred;
  }
  // {00000010 00000000 00000001 00010100 01000001 00010001 10000000 00100000 00000000 00000000 10000000 00000000 00000000 01010000 00011101 00000010 00001000 00100001 01000001 01000001 00000000 00101001 00010110 11010000 10101011 01010000 11000101 11000110 01111001 10101000 11101001 01000001 10000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 1, 20, 65, 17, -128, 32, 0, 0, -128, 0, 0, 80, 29, 2, 8, 33, 65, 65, 0, 41, 22, -48, -85, 80, -59, -58, 121, -88, -23, 65, -127, 0};
  // {11111101 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-3, 127, 3, 0};
  // {10010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-110, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 64, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 64, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 0, 0, 0};
  // {10010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-110, 0, 0, 0};
  // {10010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-110, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {32, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {11011111 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, -1, 1, 0};
  // {00011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {30, 0, 0, 0};
}

// Tree predictor for 97-tree and 0-class
class Tree_97_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[5 /* RAC1P */]) ? -0.0036155777f : 0.0022508167f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 86.0f ? 8.589884E-4f : -0.0051001725f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 6.995465f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -3.541086E-5f : 0.010844906f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.130043f ? -0.06718183f : -0.0015587604f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f
          ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 153.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 147.5f ? 0.010537487f : -0.14610302f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 4.9730077f ? -0.018610906f : -0.16669503f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? 1.5801839E-4f : 0.008675854f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 10.5f ? -0.02133403f : 0.021437004f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
        ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 97.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] != 3.0f ? 0.042657785f : -0.039790813f)
            : -0.18345594f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 26.5f ? 0.06813338f : -0.04877775f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.1401909f : -0.18567492f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
            ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[1 /* SCHL */]) ? -0.030288037f : 0.02097548f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.042745907f : -0.010313755f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[2 /* COW */]) ? 9.854541E-5f : 0.010856804f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 85.5f ? 0.0032208792f : -0.16552523f)))));
      return pred;
  }
  // {00000000 00000000 01001001 00011101 01100001 01010000 10010011 00110000 00000001 00001010 00000000 00000100 00010000 01000000 00101000 00101000 11010000 00000100 01001000 00000000 11000000 00001110 00000101 00000010 00010000 10000100 10110000 00110001 10110001 00000110 10000110 01010011 10000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 73, 29, 97, 80, -109, 48, 1, 10, 0, 4, 16, 64, 40, 40, -48, 4, 72, 0, -64, 14, 5, 2, 16, -124, -80, 49, -79, 6, -122, 83, -127, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {01110110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {118, 1, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-66, 0, 0, 0};
  // {11011111 01111111 00000010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, 127, 2, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, -128, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-24, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {3, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {72, 0, 0, 0};
}

// Tree predictor for 98-tree and 0-class
class Tree_98_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
            ? (Double.isNaN(data[3]) || (float) data[3 /* MAR */] != 3.0f ? 0.0062671215f : -0.021807892f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 60.5f ? -0.005150175f : -0.03560679f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.5f ? 0.09396078f : -0.079369694f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 106.5f ? 0.004416077f : -0.0014562184f)))
        : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 28.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -0.003170573f : 8.669651E-4f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? -0.03709977f : 0.009797643f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 6.0f ? -0.08329261f : 0.0024314495f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.064546f ? 0.0012508256f : 0.03234807f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 68.5f ? -0.03335987f : -0.17515796f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.008948262f : 0.049915425f))
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 8.5f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.23878817f : 0.0041162167f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[1 /* SCHL */]) ? -0.012801174f : 0.0012742637f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.557184f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[3 /* MAR */]) ? 3.7561712E-4f : 0.0038521378f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 10.5f ? 0.0601416f : -0.039604243f)))));
      return pred;
  }
  // {00000000 00100000 00001001 01010110 01100001 01010010 10000000 00100000 00000001 00100000 00000000 00000100 00001000 00000000 00001000 00000000 01000010 00000100 00010000 00100101 00001010 00001000 00110110 00110000 11101100 00100000 00001101 10101000 01110001 01000100 11101100 01001011 11000001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 32, 9, 86, 97, 82, -128, 32, 1, 32, 0, 4, 8, 0, 8, 0, 66, 4, 16, 37, 10, 8, 54, 48, -20, 32, 13, -88, 113, 68, -20, 75, -63, 0};
  // {11111110 01111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 127, 3, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {3, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11100111 11101111 00000011 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-25, -17, 3, 0};
  // {11100110 11101111 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-26, -17, 3, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-2, 1, 0, 0};
  // {00000111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {7, 0, 0, 0};
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-104, 0, 0, 0};
  // {00000000 11111110 10111011 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, -2, -69, 0};
  // {00010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {23, 0, 0, 0};
}

// Tree predictor for 99-tree and 0-class
class Tree_99_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0011781309f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 95.5f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 72.0f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */]) ? -2.7525652E-5f : 0.005710191f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.023564825f : -0.007432413f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 225.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 32.5f ? 0.039938442f : -0.0796316f)
            : -0.15077722f)))
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */]) ? -0.0044014924f : 0.0059277993f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.5f ? 0.013334328f : 0.05800848f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */]) ? -0.018369783f : 0.0028944516f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 7.488103f ? 0.008662193f : 0.03596379f)))
        : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 40.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 29.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.017439665f : -0.008741458f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[2 /* COW */]) ? 0.010626791f : 0.0077299015f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 188.5f ? -0.015200176f : 0.037844814f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 40.5f ? -0.016868412f : 0.033972777f)))));
      return pred;
  }
  // {00000000 00000000 00000001 00010100 01000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000110 00001100 00010000 01000100 00001001 01101100 11100000 10111101 11001100 10000011 01000011 01100010 11001010 01000010 10111011 00101000 10010110 00010001 11101001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 1, 20, 64, 16, 0, 0, 0, 0, 0, 0, 0, 8, 6, 12, 16, 68, 9, 108, -32, -67, -52, -125, 67, 98, -54, 66, -69, 40, -106, 17, -23, 0};
  // {11111110 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -1, 2, 0};
  // {00000000 10000000 00000010 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, 2, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -128, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {10010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-110, 0, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {5, 0, 0, 0};
  // {11111110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-2, 1, 0, 0};
  // {00110100 11111001 00000011 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {52, -7, 3, 0};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {65, 0, 0, 0};
  // {01011101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {93, 1, 0, 0};
  // {00100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {35, 0, 0, 0};
}

// Tree predictor for 100-tree and 0-class
class Tree_100_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0010678845f : 0.0f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 172.0f ? 0.0018546024f : -0.057588905f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 21.5f ? 0.07047059f : 0.019191805f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 7.093992f ? -0.0058953543f : 0.02720857f)))
        : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 165.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 35.5f ? 0.019276466f : -0.02977931f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 107.5f ? -0.0016706109f : 0.007548455f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 202.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 199.5f ? -0.008523509f : -0.050929293f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 221.5f ? 0.0066341897f : -0.00824627f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f ? 0.00683646f : -0.007872185f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? -0.046804562f : 0.0099076275f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 99.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 20.0f ? -0.0053979005f : 0.009801559f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? -0.0819816f : -0.002556039f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 46.5f
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 6.2072434f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f ? 0.0016395381f : -0.022564422f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 55.5f ? 1.9861726E-4f : -0.031234441f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 49.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 31.5f ? -0.0018089329f : -0.04897206f)
            : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 53.5f ? 0.015317278f : -0.005480828f)))));
      return pred;
  }
  // {00000000 00000000 00001001 00010100 01100000 00010000 10000000 10000000 00010000 00001000 00000000 00000000 00100000 01111000 00011001 01010000 11000000 00000100 01000000 10000000 00000000 00101010 11001111 11100000 10011010 10000100 00001110 00000110 01010001 10000110 11100000 11010001 10000011 00000001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 9, 20, 96, 16, -128, -128, 16, 8, 0, 0, 32, 120, 25, 80, -64, 4, 64, -128, 0, 42, -49, -32, -102, -124, 14, 6, 81, -122, -32, -47, -125, 1};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {01111100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {124, 1, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {88, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {88, 0, 0, 0};
  // {10010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-111, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
}

// Tree predictor for 101-tree and 0-class
class Tree_101_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[7 /* POBP */])
      ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 122.0f
        ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.704975f
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */]) ? -0.006043364f : -0.040948883f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f ? -0.051031392f : 0.008965133f))
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 11.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.68148f ? 0.02234568f : -0.13401912f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 40.5f ? 0.116709016f : 0.025474679f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 93.0f
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? -0.014872907f : -0.006600659f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 72.0f ? 2.7906E-4f : -0.17760324f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.936571f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? 0.06444084f : 0.003052132f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 45.5f ? -0.21757813f : -0.089440845f))))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 8.325588f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */]) ? -0.02269479f : 0.0f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f ? 0.10791784f : -0.03638453f))
          : -0.20840847f)
        : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
            ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[1 /* SCHL */]) ? -0.032585807f : 0.008165143f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 20.5f ? 0.023341127f : -8.8585046E-4f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */]) ? -0.011183286f : 0.013793027f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? 0.0069286576f : 0.010149185f)))));
      return pred;
  }
  // {11010110 00111011 10111000 11110100 11100101 11110010 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111}
  public static final byte[] GRPSPLIT0 = new byte[] {-42, 59, -72, -12, -27, -14, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, 127};
  // {01101100 01010111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {108, 87, 3, 0};
  // {01111100 11011111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {124, -33, 3, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {11110111 11110101 00000011 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, -11, 3, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {28, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {28, 0, 0, 0};
  // {01010001 11111111 00001111 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {81, -1, 15, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {17, 0, 0, 0};
  // {00000110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {6, 0, 0, 0};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 0, 0, 0};
}

// Tree predictor for 102-tree and 0-class
class Tree_102_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[7 /* POBP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.009735566f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 3.0f
            ? -0.14971554f
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 17.5f ? 0.005681036f : -0.009929821f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 24.0f
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 94.0f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 13.5f ? 0.049072728f : -0.004609081f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.07527002f : -0.0071365074f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 60.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 22.5f ? -0.0051951064f : -0.016581586f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 9.0f ? -0.09141661f : 0.052397333f))))
      : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 22.0f
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] != 19.0f ? -0.010574524f : 0.0057404996f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[0 /* RELP */]) ? -0.002997732f : 0.03668226f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
            ? -0.011531154f
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 16.0f ? 0.009160947f : 0.27380618f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 19.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 56.5f ? -0.0052299323f : -0.10872483f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 66.5f ? -0.05546478f : -0.17573535f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */]) ? 0.0060925144f : 0.010152342f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f ? 0.011212054f : 0.0051365774f)))));
      return pred;
  }
  // {11010110 00111001 10111100 11110100 11111101 11110010 11111100 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 01111111}
  public static final byte[] GRPSPLIT0 = new byte[] {-42, 57, -68, -12, -3, -14, -4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -2, -1, -1, -1, -1, -1, -1, 127};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {11010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-48, 0, 0, 0};
  // {11010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-48, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, 0, 0, 0};
  // {00000100 00010000 00000010 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 16, 2, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {10111111 11111101 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-65, -3, 3, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
}

// Tree predictor for 103-tree and 0-class
class Tree_103_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 25.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 252.5f ? -0.009396421f : -0.067317456f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? -9.916987E-4f : 0.0024871062f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 5.5f
            ? (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.33532622f : -0.065111965f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 45.5f ? 0.0074079647f : -0.009910024f)))
        : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 88.0f
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.54246f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.377734f ? -1.2956093E-4f : -0.11063859f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.094272f ? 0.05610467f : -0.009437737f))
          : 0.11663373f))
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 12.0f
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f ? -0.14227934f : 0.008931546f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 10.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 60.0f ? -0.011308282f : 0.3222471f)
            : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? 0.020090027f : 0.026887244f)))
        : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[1 /* SCHL */])
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.315959f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 70.5f ? -0.0010771981f : -0.035251193f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.519173f ? -0.21913426f : -0.0148864f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 66.5f ? -0.01437874f : -0.21340388f)
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? 0.0027065603f : 0.010797445f)))));
      return pred;
  }
  // {01000000 00000100 01000101 01010100 10000001 00110001 10010000 01010000 00000000 01000000 00001110 00100000 01000000 00000000 00001000 01001000 10000000 00000100 00000000 00010001 11000010 11111100 01100100 10010000 00100110 00000010 00000010 00010100 00100011 01000000 11011000 00000011 11101001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 4, 69, 84, -127, 49, -112, 80, 0, 64, 14, 32, 64, 0, 8, 72, -128, 4, 0, 17, -62, -4, 100, -112, 38, 2, 2, 20, 35, 64, -40, 3, -23, 0};
  // {11101110 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-18, -1, 3, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-4, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {28, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {29, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000000 00010000 10011010 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 16, -102, 0};
  // {10111111 01010100 00000011 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-65, 84, 3, 0};
}

// Tree predictor for 104-tree and 0-class
class Tree_104_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 84.0f
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 22.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 18.0f ? 0.027828183f : -0.038652513f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 62.5f ? -5.476593E-5f : -0.0060441396f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] != 86.0f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 128.0f ? -0.026882987f : 0.06618744f)
            : 0.17339163f))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 54.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */]) ? -0.0011249544f : 0.0015475497f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 12.0f ? 0.090218574f : 9.61646E-4f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 212.5f ? -0.0090115275f : -0.16278307f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 10.5f ? 0.080818325f : 0.0072075813f))))
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
        ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[5 /* RAC1P */]) ? -0.2333389f : -0.0035972374f)
            : 0.0f)
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.414487f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f ? 0.003711368f : -0.008149241f)
            : 0.16193485f))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 9.249259f ? -0.039302208f : 0.03989672f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 4.231044f ? -0.16754104f : -0.050237965f))
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[3 /* MAR */])
            ? -0.21974568f
            : (Double.isNaN(data[6]) || (float) data[6 /* SEX */] < 0.5f ? -0.0023282317f : 0.06859699f)))));
      return pred;
  }
  // {01000000 00000100 01100101 00010100 00100001 01011000 10010000 00011000 00000010 00000001 00001010 00000000 01000000 00000000 00000000 00101000 10000000 00000100 00000000 00110001 10000010 11111000 10111111 11010011 00000001 00000010 00000000 00100000 00100001 01000010 11010001 00000001 11101011 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 4, 101, 20, 33, 88, -112, 24, 2, 1, 10, 0, 64, 0, 0, 40, -128, 4, 0, 49, -126, -8, -65, -45, 1, 2, 0, 32, 33, 66, -47, 1, -21, 0};
  // {11111110 11101111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -17, 3, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01111011 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {123, 1, 0, 0};
  // {01100111 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {103, 1, 0, 0};
  // {01100110 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {102, 1, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-16, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {24, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {124, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 105-tree and 0-class
class Tree_105_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[2 /* COW */]) ? -0.0011711034f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.020376f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */]) ? -0.0057641165f : 0.0012336827f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 12.269774f ? -0.1532535f : -0.03153993f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 71.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 64.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 55.5f ? 7.1389024E-4f : -0.022096936f)
            : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 226.5f ? 0.053508062f : -0.016063452f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 41.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 27.5f ? -0.011538193f : -0.14751084f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */]) ? -0.009074804f : 0.08397202f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 76.0f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 7.2910476f ? -0.007025625f : 0.07964405f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 8.5f ? 0.090042904f : 0.0024482624f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] != 77.0f
            ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[1 /* SCHL */]) ? -0.12011016f : 0.045212664f)
            : 0.12304145f))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 46.5f
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.00881275f : 0.006203454f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 64.0f ? 8.147054E-4f : 0.0337648f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 122.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 6.896937f ? 0.017474132f : -0.012328371f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? -0.0038032632f : 0.10532156f)))));
      return pred;
  }
  // {00000000 00000110 00000001 01010100 00100001 01110000 10011000 00010000 10010000 01001010 00000010 00000000 00001000 00000000 00001011 01001000 11000000 00100100 00000001 00110000 01000010 10101101 00000110 00010010 00000000 00000010 00011100 11001000 01101001 01000000 11100000 00000001 11101001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 6, 1, 84, 33, 112, -104, 16, -112, 74, 2, 0, 8, 0, 11, 72, -64, 36, 1, 48, 66, -83, 6, 18, 0, 2, 28, -56, 105, 64, -32, 1, -23, 0};
  // {11111100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -1, 3, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {26, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {26, 0, 0, 0};
  // {00100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {35, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {69, 0, 0, 0};
  // {00110010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {50, 0, 0, 0};
  // {00000000 01000000 10100010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 64, -94, 0};
  // {00011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {30, 0, 0, 0};
  // {11111110 11111011 00000011 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-2, -5, 3, 0};
}

// Tree predictor for 106-tree and 0-class
class Tree_106_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[3 /* MAR */]) ? -0.001948633f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 225.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 160.0f ? -0.025468752f : 0.07970208f)
            : -0.17784868f))
        : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[5 /* RAC1P */])
          ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 41.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 13.5f ? -0.123607695f : -0.01260061f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 26.5f ? 0.043270655f : 0.0013640343f))
          : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.028478043f : 6.756667E-5f)
            : (Double.isNaN(data[11]) || (float) data[11 /* LOG_CAPLOSS */] < 8.513266f ? 0.00182744f : 0.09517489f))))
      : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 7.5f
        ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 16.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] != 4.0f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */]) ? -0.08773313f : 0.08358344f)
            : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? -0.0069786096f : 0.18691866f))
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 3.5f
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[5 /* RAC1P */]) ? -0.27929574f : 0.035925105f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */]) ? -0.13177258f : -0.05486394f)))
        : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[3 /* MAR */]) ? -0.07407872f : -4.2031426E-4f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 4.976995f ? 1.717283E-4f : -0.115725264f))
          : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 5.813133f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.3633208f ? 0.0037171543f : -0.016335234f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.040146712f : 0.0050625787f)))));
      return pred;
  }
  // {00000010 00010000 01000101 01011101 10000001 00011100 10000101 01000011 00000010 10000100 00000000 00000000 00000001 00000011 10000000 01000000 00001010 00000000 01000000 00001000 00000010 00011011 01000100 10110000 11110110 10001010 00100000 00000010 00010001 00001000 00010001 00001001 11101001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 16, 69, 93, -127, 28, -123, 67, 2, -124, 0, 0, 1, 3, -128, 64, 10, 0, 64, 8, 2, 27, 68, -80, -10, -118, 32, 2, 17, 8, 17, 9, -23, 0};
  // {01101101 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {109, -1, 3, 0};
  // {00001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {14, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {11110011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-13, 0, 0, 0};
  // {01001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {74, 0, 0, 0};
  // {00010101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {21, 0, 0, 0};
  // {00001100 00110000 00000011 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {12, 48, 3, 0};
  // {11111101 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 1, 0, 0};
  // {11111110 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-2, -1, 3, 0};
  // {10101111 01100110 00000010 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-81, 102, 2, 0};
  // {01011111 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {95, 1, 0, 0};
  // {00001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {14, 0, 0, 0};
}

// Tree predictor for 107-tree and 0-class
class Tree_107_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.001279694f : 0.0f)
            : 0.0f)
          : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 30.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 252.5f ? 0.0052994955f : -0.0679532f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[3 /* MAR */]) ? -0.0018468263f : -0.010356374f)))
        : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[3 /* MAR */])
          ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 47.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 159.5f ? 0.010323706f : -0.0028971173f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.0051177223f : 0.048697196f))
          : (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 66.5f
            ? (Double.isNaN(data[4]) || (float) data[4 /* INDP */] < 238.5f ? 0.026622308f : 0.11856806f)
            : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 31.5f ? 0.01948762f : 0.116378315f))))
      : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 21.5f
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 15.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 40.5f ? -0.13663729f : -0.0023658723f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 14.5f ? 0.045181062f : -0.02276905f))
          : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 20.0f ? -0.010952184f : 0.00793162f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */]) ? -0.0053431974f : 0.0016030804f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[2 /* COW */]) ? -0.031730108f : 0.0f)
            : 0.0f)
          : 0.092444845f)));
      return pred;
  }
  // {10001000 10100100 00100011 01010100 01000001 00010011 10000000 10111000 10101001 00000001 10000000 00000100 01000000 00010000 00101000 00000001 10000001 00000001 00000000 01000001 10000010 01001000 10100001 01000001 00010001 00110010 00000001 00000000 00001001 10000000 00011111 00000000 11101001 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-120, -92, 35, 84, 65, 19, -128, -72, -87, 1, -128, 4, 64, 16, 40, 1, -127, 1, 0, 65, -126, 72, -95, 65, 17, 50, 1, 0, 9, -128, 31, 0, -23, 0};
  // {00000100 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 2, 0};
  // {11111110 11111011 00000010 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, -5, 2, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -128, 0, 0};
  // {00011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {30, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01011111 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {95, -1, 3, 0};
  // {00001101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {13, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-96, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {32, 0, 0, 0};
}

// Tree predictor for 108-tree and 0-class
class Tree_108_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[4]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[4 /* INDP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[0 /* RELP */]) ? -0.0010703306f : 0.0f)
            : 0.0f)
          : 0.0f)
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[7]) || (float) data[7 /* POBP */] < 43.0f ? -0.012591606f : 0.011045702f)
            : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 15.5f ? 0.0027692644f : -0.001886816f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 28.0f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] != 18.0f ? -0.014718705f : 0.046115804f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[3 /* MAR */]) ? 0.0014181833f : 0.006257784f))))
      : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[2 /* COW */])
        ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[0 /* RELP */])
          ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[0 /* RELP */]) ? -0.0018170316f : -0.02886864f)
            : 0.0f)
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT13, 0, (int) data[5 /* RAC1P */]) ? -0.012216957f : 0.0f)
            : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT14, 0, (int) data[2 /* COW */]) ? 0.0012325429f : 0.002643347f)))
        : (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 22.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.640988f ? -0.0066675134f : 0.10724411f)
            : 0.14246796f)
          : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT15, 0, (int) data[3 /* MAR */])
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT16, 0, (int) data[0 /* RELP */]) ? 0.029154422f : 0.0177009f)
            : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT17, 0, (int) data[0 /* RELP */]) ? -0.016132042f : 0.0051948344f)))));
      return pred;
  }
  // {01000000 00000000 00001001 00010100 11000001 10011000 10000101 00000000 00000000 00010010 00011110 01000000 00001000 01000000 00000000 00001000 10000000 00000000 00000000 00000000 11001010 00101110 01001000 01010010 11001011 01000110 10001001 00000000 11101001 00000100 00100000 11000000 11111111 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 0, 9, 20, -63, -104, -123, 0, 0, 18, 30, 64, 8, 64, 0, 8, -128, 0, 0, 0, -54, 46, 72, 82, -53, 70, -119, 0, -23, 4, 32, -64, -1, 0};
  // {01101110 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {110, -1, 3, 0};
  // {01101100 11111111 00000011 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {108, -1, 3, 0};
  // {01101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {108, 0, 0, 0};
  // {01101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {108, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {26, 0, 0, 0};
  // {00011001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {25, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {17, 0, 0, 0};
  // {00110001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {49, 0, 0, 0};
  // {11110101 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-11, -1, 2, 0};
  // {11110101 11111111 00000010 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-11, -1, 2, 0};
  // {11110100 11111111 00000001 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-12, -1, 1, 0};
  // {01010111 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {87, 1, 0, 0};
  // {01010100 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {84, 1, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {23, 0, 0, 0};
  // {00000001 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 2, 0};
  // {11111111 11111011 00000010 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -5, 2, 0};
}

// Tree predictor for 109-tree and 0-class
class Tree_109_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[7]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[7 /* POBP */])
      ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 22.5f
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.345406f
            ? (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[0 /* RELP */]) ? -0.00850639f : 0.0012862186f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 10.593265f ? -0.13715476f : -0.028874356f))
          : (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 72.0f
            ? (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT3, 0, (int) data[3 /* MAR */]) ? -0.017798299f : 0.020971404f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 4.9263835f ? 0.09046803f : 0.1751907f)))
        : (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 20.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* SCHL */] < 11.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 40.5f ? 0.038701687f : 0.15365086f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT4, 0, (int) data[1 /* SCHL */]) ? -0.18742333f : 0.011452373f))
          : 0.17636707f))
      : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT5, 0, (int) data[0 /* RELP */])
        ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 38.5f
          ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT6, 0, (int) data[2 /* COW */])
            ? (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT7, 0, (int) data[2 /* COW */]) ? -0.020236183f : 0.0f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 2.3257828f ? -9.940631E-4f : 0.16777281f))
          : (Double.isNaN(data[0]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT8, 0, (int) data[0 /* RELP */])
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 19.5f ? -0.089684986f : -0.010340372f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT9, 0, (int) data[3 /* MAR */]) ? 0.037376717f : 0.014863579f)))
        : (Double.isNaN(data[2]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT10, 0, (int) data[2 /* COW */])
          ? (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 0.39411068f
            ? (Double.isNaN(data[8]) || (float) data[8 /* AGEP */] < 23.5f ? -0.0077807712f : 0.007032978f)
            : (Double.isNaN(data[10]) || (float) data[10 /* LOG_CAPGAIN */] < 1.1577001f ? -0.114014514f : -0.0024644812f))
          : (Double.isNaN(data[5]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT11, 0, (int) data[5 /* RAC1P */])
            ? (Double.isNaN(data[9]) || (float) data[9 /* WKHP */] < 35.5f ? 0.024581682f : -0.01405934f)
            : (Double.isNaN(data[3]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT12, 0, (int) data[3 /* MAR */]) ? -0.0037562386f : 0.0052644736f)))));
      return pred;
  }
  // {11010111 00101011 00111000 11110100 11110101 11111010 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 01111111}
  public static final byte[] GRPSPLIT0 = new byte[] {-41, 43, 56, -12, -11, -6, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -2, -1, -1, -1, -1, -1, -1, 127};
  // {00000000 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 2, 0};
  // {00000000 00000010 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {11, 0, 0, 0};
  // {00000000 11010000 00011111 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -48, 31, 0};
  // {11101111 11111101 00000001 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -3, 1, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {28, 0, 0, 0};
  // {00011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {28, 0, 0, 0};
  // {00000000 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 2, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {17, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01101111 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {111, 1, 0, 0};
  // {00010111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {23, 0, 0, 0};
}
// Forest representing a subset of trees scoring class 0
class Forest_0_class_0 {
  public static float predict(double[] data, int maxIters) {
    float pred  = 0;
    int   iters = maxIters;
    if (iters-- > 0) pred += Tree_0_class_0.predict(data);
    if (iters-- > 0) pred += Tree_1_class_0.predict(data);
    if (iters-- > 0) pred += Tree_2_class_0.predict(data);
    if (iters-- > 0) pred += Tree_3_class_0.predict(data);
    if (iters-- > 0) pred += Tree_4_class_0.predict(data);
    if (iters-- > 0) pred += Tree_5_class_0.predict(data);
    if (iters-- > 0) pred += Tree_6_class_0.predict(data);
    if (iters-- > 0) pred += Tree_7_class_0.predict(data);
    if (iters-- > 0) pred += Tree_8_class_0.predict(data);
    if (iters-- > 0) pred += Tree_9_class_0.predict(data);
    if (iters-- > 0) pred += Tree_10_class_0.predict(data);
    if (iters-- > 0) pred += Tree_11_class_0.predict(data);
    if (iters-- > 0) pred += Tree_12_class_0.predict(data);
    if (iters-- > 0) pred += Tree_13_class_0.predict(data);
    if (iters-- > 0) pred += Tree_14_class_0.predict(data);
    if (iters-- > 0) pred += Tree_15_class_0.predict(data);
    if (iters-- > 0) pred += Tree_16_class_0.predict(data);
    if (iters-- > 0) pred += Tree_17_class_0.predict(data);
    if (iters-- > 0) pred += Tree_18_class_0.predict(data);
    if (iters-- > 0) pred += Tree_19_class_0.predict(data);
    if (iters-- > 0) pred += Tree_20_class_0.predict(data);
    if (iters-- > 0) pred += Tree_21_class_0.predict(data);
    if (iters-- > 0) pred += Tree_22_class_0.predict(data);
    if (iters-- > 0) pred += Tree_23_class_0.predict(data);
    if (iters-- > 0) pred += Tree_24_class_0.predict(data);
    if (iters-- > 0) pred += Tree_25_class_0.predict(data);
    if (iters-- > 0) pred += Tree_26_class_0.predict(data);
    if (iters-- > 0) pred += Tree_27_class_0.predict(data);
    if (iters-- > 0) pred += Tree_28_class_0.predict(data);
    if (iters-- > 0) pred += Tree_29_class_0.predict(data);
    if (iters-- > 0) pred += Tree_30_class_0.predict(data);
    if (iters-- > 0) pred += Tree_31_class_0.predict(data);
    if (iters-- > 0) pred += Tree_32_class_0.predict(data);
    if (iters-- > 0) pred += Tree_33_class_0.predict(data);
    if (iters-- > 0) pred += Tree_34_class_0.predict(data);
    if (iters-- > 0) pred += Tree_35_class_0.predict(data);
    if (iters-- > 0) pred += Tree_36_class_0.predict(data);
    if (iters-- > 0) pred += Tree_37_class_0.predict(data);
    if (iters-- > 0) pred += Tree_38_class_0.predict(data);
    if (iters-- > 0) pred += Tree_39_class_0.predict(data);
    if (iters-- > 0) pred += Tree_40_class_0.predict(data);
    if (iters-- > 0) pred += Tree_41_class_0.predict(data);
    if (iters-- > 0) pred += Tree_42_class_0.predict(data);
    if (iters-- > 0) pred += Tree_43_class_0.predict(data);
    if (iters-- > 0) pred += Tree_44_class_0.predict(data);
    if (iters-- > 0) pred += Tree_45_class_0.predict(data);
    if (iters-- > 0) pred += Tree_46_class_0.predict(data);
    if (iters-- > 0) pred += Tree_47_class_0.predict(data);
    if (iters-- > 0) pred += Tree_48_class_0.predict(data);
    if (iters-- > 0) pred += Tree_49_class_0.predict(data);
    if (iters-- > 0) pred += Tree_50_class_0.predict(data);
    if (iters-- > 0) pred += Tree_51_class_0.predict(data);
    if (iters-- > 0) pred += Tree_52_class_0.predict(data);
    if (iters-- > 0) pred += Tree_53_class_0.predict(data);
    if (iters-- > 0) pred += Tree_54_class_0.predict(data);
    if (iters-- > 0) pred += Tree_55_class_0.predict(data);
    if (iters-- > 0) pred += Tree_56_class_0.predict(data);
    if (iters-- > 0) pred += Tree_57_class_0.predict(data);
    if (iters-- > 0) pred += Tree_58_class_0.predict(data);
    if (iters-- > 0) pred += Tree_59_class_0.predict(data);
    if (iters-- > 0) pred += Tree_60_class_0.predict(data);
    if (iters-- > 0) pred += Tree_61_class_0.predict(data);
    if (iters-- > 0) pred += Tree_62_class_0.predict(data);
    if (iters-- > 0) pred += Tree_63_class_0.predict(data);
    if (iters-- > 0) pred += Tree_64_class_0.predict(data);
    if (iters-- > 0) pred += Tree_65_class_0.predict(data);
    if (iters-- > 0) pred += Tree_66_class_0.predict(data);
    if (iters-- > 0) pred += Tree_67_class_0.predict(data);
    if (iters-- > 0) pred += Tree_68_class_0.predict(data);
    if (iters-- > 0) pred += Tree_69_class_0.predict(data);
    if (iters-- > 0) pred += Tree_70_class_0.predict(data);
    if (iters-- > 0) pred += Tree_71_class_0.predict(data);
    if (iters-- > 0) pred += Tree_72_class_0.predict(data);
    if (iters-- > 0) pred += Tree_73_class_0.predict(data);
    if (iters-- > 0) pred += Tree_74_class_0.predict(data);
    if (iters-- > 0) pred += Tree_75_class_0.predict(data);
    if (iters-- > 0) pred += Tree_76_class_0.predict(data);
    if (iters-- > 0) pred += Tree_77_class_0.predict(data);
    if (iters-- > 0) pred += Tree_78_class_0.predict(data);
    if (iters-- > 0) pred += Tree_79_class_0.predict(data);
    if (iters-- > 0) pred += Tree_80_class_0.predict(data);
    if (iters-- > 0) pred += Tree_81_class_0.predict(data);
    if (iters-- > 0) pred += Tree_82_class_0.predict(data);
    if (iters-- > 0) pred += Tree_83_class_0.predict(data);
    if (iters-- > 0) pred += Tree_84_class_0.predict(data);
    if (iters-- > 0) pred += Tree_85_class_0.predict(data);
    if (iters-- > 0) pred += Tree_86_class_0.predict(data);
    if (iters-- > 0) pred += Tree_87_class_0.predict(data);
    if (iters-- > 0) pred += Tree_88_class_0.predict(data);
    if (iters-- > 0) pred += Tree_89_class_0.predict(data);
    if (iters-- > 0) pred += Tree_90_class_0.predict(data);
    if (iters-- > 0) pred += Tree_91_class_0.predict(data);
    if (iters-- > 0) pred += Tree_92_class_0.predict(data);
    if (iters-- > 0) pred += Tree_93_class_0.predict(data);
    if (iters-- > 0) pred += Tree_94_class_0.predict(data);
    if (iters-- > 0) pred += Tree_95_class_0.predict(data);
    if (iters-- > 0) pred += Tree_96_class_0.predict(data);
    if (iters-- > 0) pred += Tree_97_class_0.predict(data);
    if (iters-- > 0) pred += Tree_98_class_0.predict(data);
    if (iters-- > 0) pred += Tree_99_class_0.predict(data);
    if (iters-- > 0) pred += Tree_100_class_0.predict(data);
    if (iters-- > 0) pred += Tree_101_class_0.predict(data);
    if (iters-- > 0) pred += Tree_102_class_0.predict(data);
    if (iters-- > 0) pred += Tree_103_class_0.predict(data);
    if (iters-- > 0) pred += Tree_104_class_0.predict(data);
    if (iters-- > 0) pred += Tree_105_class_0.predict(data);
    if (iters-- > 0) pred += Tree_106_class_0.predict(data);
    if (iters-- > 0) pred += Tree_107_class_0.predict(data);
    if (iters-- > 0) pred += Tree_108_class_0.predict(data);
    if (iters-- > 0) pred += Tree_109_class_0.predict(data);
    return pred;
    }
  }

