import java.util.Map;
import water.genmodel.GenUtils.*;

// AUTOGENERATED BY H2O at Sun Nov 16 17:21:15 PST 2014
// H2O v2.8.2.7 (rel-maxwell - aac13e28be50ba7ba478e8efc07e2d456877d2a4)
//
// Standalone prediction code with sample test data for GBMModel named GBM_bbc7516493e874bc4edefc338257497e
//
// How to download, compile and execute:
//     mkdir tmpdir
//     cd tmpdir
//     curl http://172.16.2.44:54321/h2o-model.jar > h2o-model.jar
//     curl http://172.16.2.44:54321/2/GBMModelView.java?_modelKey=GBM_bbc7516493e874bc4edefc338257497e > GBM_bbc7516493e874bc4edefc338257497e.java
//     javac -cp h2o-model.jar -J-Xmx2g -J-XX:MaxPermSize=128m GBM_bbc7516493e874bc4edefc338257497e.java
//
//     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)

public class GBM_generated_model extends water.genmodel.GeneratedModel {
  // Number of trees in this model.
  public static final int NTREES = 10;
  // Number of internal trees in this model (= NTREES*NCLASSES).
  public static final int NTREES_INTERNAL = 20;

  // Names of columns used by model.
  public static final String[] NAMES = {"Has4Legs","CoatColor","HairLength","TailLength","EnjoysPlay","StairsOutWindow","HoursSpentNapping","RespondsToCommands","EasilyFrightened","Age","Noise1","Noise2","Noise3","Noise4","Noise5","Label"};
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* Has4Legs */ ColInfo_0.VALUES,
    /* CoatColor */ ColInfo_1.VALUES,
    /* HairLength */ ColInfo_2.VALUES,
    /* TailLength */ ColInfo_3.VALUES,
    /* EnjoysPlay */ ColInfo_4.VALUES,
    /* StairsOutWindow */ ColInfo_5.VALUES,
    /* HoursSpentNapping */ ColInfo_6.VALUES,
    /* RespondsToCommands */ ColInfo_7.VALUES,
    /* EasilyFrightened */ ColInfo_8.VALUES,
    /* Age */ ColInfo_9.VALUES,
    /* Noise1 */ ColInfo_10.VALUES,
    /* Noise2 */ ColInfo_11.VALUES,
    /* Noise3 */ ColInfo_12.VALUES,
    /* Noise4 */ ColInfo_13.VALUES,
    /* Noise5 */ ColInfo_14.VALUES,
    /* Label */ ColInfo_15.VALUES
  };
  // Prior class distribution
  public static final float[] PRIOR_CLASS_DISTRIB = {0.32732734f,0.6726727f};
  // Class distribution used for model building
  public static final float[] MODEL_CLASS_DISTRIB = null;

  public String[]   getNames() { return NAMES; } 
  public String[][] getDomainValues() { return DOMAINS; }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final float[] predict( double[] data, float[] preds) { preds = predict( data, preds, 10); return preds; }
  public final float[] predict( double[] data, float[] preds, int maxIters ) {
    // System.err.println("Row (gencode.predict): " + java.util.Arrays.toString(data));
    java.util.Arrays.fill(preds,0f);
    // Call forest predicting class 0
    preds[1] += Forest_0_class_0.predict(data, maxIters - 0);
    // Call forest predicting class 1
    preds[2] += Forest_0_class_1.predict(data, maxIters - 0);
    // Compute Probabilities for classifier (scale via http://www.hongliangjie.com/2011/01/07/logsum/)
    float dsum = 0, maxval = Float.NEGATIVE_INFINITY;
    preds[2] = -preds[1];
    for(int i=1; i<preds.length; i++) maxval = Math.max(maxval, preds[i]);
    for(int i=1; i<preds.length; i++) dsum += (preds[i]=(float) Math.exp(preds[i] - maxval));
    for(int i=1; i<preds.length; i++) preds[i] = preds[i] / dsum;
    preds[0] = water.util.ModelUtils.getPrediction(preds,data);
    return preds;
  }
}
// The class representing column Has4Legs
class ColInfo_0 {
  public static final String[] VALUES = null;
}
// The class representing column CoatColor
class ColInfo_1 {
  public static final String[] VALUES = new String[5];
  static {
    ColInfo_1_0.fill(VALUES);
  }
  static final class ColInfo_1_0 {
    static final void fill(String[] sa) {
      sa[0] = "Black";
      sa[1] = "Brown";
      sa[2] = "Grey";
      sa[3] = "Spotted";
      sa[4] = "White";
    }
  }
}
// The class representing column HairLength
class ColInfo_2 {
  public static final String[] VALUES = null;
}
// The class representing column TailLength
class ColInfo_3 {
  public static final String[] VALUES = null;
}
// The class representing column EnjoysPlay
class ColInfo_4 {
  public static final String[] VALUES = null;
}
// The class representing column StairsOutWindow
class ColInfo_5 {
  public static final String[] VALUES = null;
}
// The class representing column HoursSpentNapping
class ColInfo_6 {
  public static final String[] VALUES = null;
}
// The class representing column RespondsToCommands
class ColInfo_7 {
  public static final String[] VALUES = null;
}
// The class representing column EasilyFrightened
class ColInfo_8 {
  public static final String[] VALUES = null;
}
// The class representing column Age
class ColInfo_9 {
  public static final String[] VALUES = null;
}
// The class representing column Noise1
class ColInfo_10 {
  public static final String[] VALUES = null;
}
// The class representing column Noise2
class ColInfo_11 {
  public static final String[] VALUES = null;
}
// The class representing column Noise3
class ColInfo_12 {
  public static final String[] VALUES = null;
}
// The class representing column Noise4
class ColInfo_13 {
  public static final String[] VALUES = null;
}
// The class representing column Noise5
class ColInfo_14 {
  public static final String[] VALUES = null;
}
// The class representing column Label
class ColInfo_15 {
  public static final String[] VALUES = new String[2];
  static {
    ColInfo_15_0.fill(VALUES);
  }
  static final class ColInfo_15_0 {
    static final void fill(String[] sa) {
      sa[0] = "cat";
      sa[1] = "dog";
    }
  }
}

// Tree predictor for 0-tree and 0-class
class Tree_0_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */]) ? -0.1f : -0.0984127f)
          : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.1f : -0.1f))
        : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? 0.1f
          : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.108143546f ? 0.1f : -0.1f)))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f ? -0.1f : 0.1f)
          : (Double.isNaN(data[14]) || (float) data[14 /* Noise5 */] < 0.07702196f
            ? 0.1f
            : (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.8802178f ? -0.09047619f : -0.02f)))
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.1f : 0.07777778f)
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.1f : 0.1f)
            : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.09834025f : 0.074074075f)))));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 1-tree and 0-class
class Tree_1_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[0]) || (float) data[0 /* Has4Legs */] < 0.5f ? -0.09093654f : -0.09093654f)
            : (Double.isNaN(data[10]) || (float) data[10 /* Noise1 */] < 0.016194385f ? -0.06862856f : -0.08997215f))
          : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.090936534f : -0.09093654f))
        : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? 0.090936534f
          : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.108143546f ? 0.090936534f : -0.09093654f)))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f ? -0.09093654f : 0.090936534f)
          : (Double.isNaN(data[14]) || (float) data[14 /* Noise5 */] < 0.07702196f
            ? 0.090936534f
            : (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.8802178f ? -0.08212177f : -0.018007465f)))
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.09093654f : 0.07044005f)
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.09093654f : 0.090936534f)
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 9.5f ? 0.08773429f : 0.053449105f)))));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 2-tree and 0-class
class Tree_2_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[0]) || (float) data[0 /* Has4Legs */] < 0.5f ? -0.08412909f : -0.08412909f)
            : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? -0.07314768f : -0.08373159f))
          : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.08412909f : -0.08412909f))
        : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? 0.08412909f
          : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.108143546f ? 0.08412909f : -0.08412909f)))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f ? -0.08412909f : 0.08412909f)
          : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
            ? (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.9186497f ? -0.08540408f : -0.09634011f)
            : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */]) ? -0.06476328f : 0.06138545f)))
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.08412909f : 0.06445918f)
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT2, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.08412909f : 0.08412909f)
            : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.08287915f : 0.059988275f)))));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {24, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 3-tree and 0-class
class Tree_3_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */])
          ? -0.078843705f
          : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 6.5f ? -0.07846867f : -0.067551926f)
            : 0.0f))
        : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? 0.078843705f
          : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.108143546f ? 0.078843705f : -0.078843705f)))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f ? -0.078843705f : 0.078843705f)
          : (Double.isNaN(data[14]) || (float) data[14 /* Noise5 */] < 0.07702196f
            ? 0.088848785f
            : (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] != 5.0f ? -0.07577567f : -0.03139443f)))
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.078843705f : 0.05943431f)
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.078843705f : 0.078843705f)
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 9.5f ? 0.07578748f : 0.04253281f)))));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 4-tree and 0-class
class Tree_4_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */])
          ? -0.07463589f
          : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
            ? (Double.isNaN(data[10]) || (float) data[10 /* Noise1 */] < 0.016194385f ? -0.05140751f : -0.07368366f)
            : 0.0f))
        : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? 0.074635886f
          : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.108143546f ? 0.074635886f : -0.07463589f)))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 4.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
            ? -0.07463589f
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f ? 0.074635886f : 0.07509179f))
          : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* Noise1 */] < 0.88662106f ? -0.07676504f : -0.08759268f)
            : (Double.isNaN(data[4]) || (float) data[4 /* EnjoysPlay */] < 0.5f ? 0.08893789f : -0.038467843f)))
        : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */])
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.07463589f : 0.050803788f)
          : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.07463589f : 0.07901464f)
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 9.5f ? 0.073726796f : 0.039088015f)))));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 5-tree and 0-class
class Tree_5_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */])
          ? (Double.isNaN(data[0]) || (float) data[0 /* Has4Legs */] < 0.5f ? -0.07121975f : -0.07121975f)
          : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
            ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? -0.059238136f : -0.07079691f)
            : 0.0f))
        : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? 0.07121976f
          : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.108143546f ? 0.07121976f : -0.07121975f)))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 4.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
            ? -0.07121975f
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f ? 0.07121976f : 0.07159275f))
          : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
            ? (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.9417088f ? -0.07283166f : -0.07909556f)
            : (Double.isNaN(data[8]) || (float) data[8 /* EasilyFrightened */] < 0.5f ? 0.046293013f : -0.044962175f)))
        : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.99420214f
          ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.21046525f ? -0.060363352f : 0.055263482f)
            : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f ? 0.023610383f : 0.0681949f))
          : -0.1550719f)));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 6-tree and 0-class
class Tree_6_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */])
        ? -0.06840262f
        : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 6.5f ? -0.06795275f : -0.055715792f)
            : 0.0f)
          : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.06840262f : -0.045601748f)))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 4.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
            ? -0.06840262f
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f ? 0.06840262f : 0.06871212f))
          : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
            ? (Double.isNaN(data[10]) || (float) data[10 /* Noise1 */] < 0.88662106f ? -0.06983735f : -0.077274725f)
            : (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] != 5.0f ? -0.043902848f : 0.039909296f)))
        : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.99420214f
          ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.06986073f : 0.045759097f)
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 9.5f ? 0.0661179f : 0.030604731f))
          : -0.12705359f)));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 7-tree and 0-class
class Tree_7_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */])
        ? (Double.isNaN(data[0]) || (float) data[0 /* Has4Legs */] < 0.5f ? -0.06604966f : -0.06604966f)
        : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 3.0f ? -0.06700553f : 0.021197313f)
            : (Double.isNaN(data[9]) || (float) data[9 /* Age */] < 17.5f ? 0.06998556f : -0.067753434f))
          : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.9764021f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f ? -0.06587982f : -0.078843705f)
            : -0.03339051f)))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
        ? (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.9687675f
            ? (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] != 5.0f ? -0.06650267f : -0.06807197f)
            : -0.0709132f)
          : (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] != 5.0f ? -0.069443606f : -0.07832994f))
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 4.5f ? -0.067984626f : -0.07539085f)
            : 0.045046363f)
          : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.06941135f : 0.068918265f)
            : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.06470918f : 0.03897094f)))));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 8-tree and 0-class
class Tree_8_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */])
        ? -0.06406359f
        : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 3.0f ? -0.0648729f : 0.018667234f)
            : (Double.isNaN(data[9]) || (float) data[9 /* Age */] < 17.5f ? 0.06513964f : -0.0655036f))
          : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.9764021f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f ? -0.06442052f : -0.037570663f)
            : -0.031153606f)))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
        ? (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.9687675f
            ? (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] != 5.0f ? -0.06444747f : -0.065771714f)
            : -0.06814789f)
          : (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] != 5.0f ? -0.06692603f : -0.07423609f))
        : (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */])
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f
            ? (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.5586768f ? -0.06509065f : -0.0684558f)
            : 0.038891263f)
          : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.06863609f : 0.068920046f)
            : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.0625221f : 0.036022253f)))));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {29, 0, 0, 0};
}

// Tree predictor for 9-tree and 0-class
class Tree_9_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT0, 0, (int) data[1 /* CoatColor */])
        ? -0.062372316f
        : (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 3.0f ? -0.06306331f : 0.016491875f)
            : (Double.isNaN(data[9]) || (float) data[9 /* Age */] < 17.5f ? 0.060772333f : -0.06359994f))
          : (Double.isNaN(data[10]) || (float) data[10 /* Noise1 */] < 0.016194385f
            ? -0.027533786f
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f ? -0.0626971f : -0.03482877f))))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 4.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
            ? -0.062285267f
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f ? 0.062443834f : 0.06264529f))
          : (Double.isNaN(data[4]) || (float) data[4 /* EnjoysPlay */] < 0.5f
            ? 0.035256743f
            : (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] != 5.0f ? -0.06281928f : -0.0018594783f)))
        : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.99420214f
          ? (Double.isNaN(data[1]) || !water.genmodel.GeneratedModel.grpContains(GRPSPLIT1, 0, (int) data[1 /* CoatColor */])
            ? (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 6.5f ? 0.018928723f : -0.15956518f)
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 9.5f ? 0.059869505f : 0.019715218f))
          : -0.11943424f)));
      return pred;
  }
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {29, 0, 0, 0};
}
// Forest representing a subset of trees scoring class 0
class Forest_0_class_0 {
  public static float predict(double[] data, int maxIters) {
    float pred  = 0;
    int   iters = maxIters;
    if (iters-- > 0) pred += Tree_0_class_0.predict(data);
    if (iters-- > 0) pred += Tree_1_class_0.predict(data);
    if (iters-- > 0) pred += Tree_2_class_0.predict(data);
    if (iters-- > 0) pred += Tree_3_class_0.predict(data);
    if (iters-- > 0) pred += Tree_4_class_0.predict(data);
    if (iters-- > 0) pred += Tree_5_class_0.predict(data);
    if (iters-- > 0) pred += Tree_6_class_0.predict(data);
    if (iters-- > 0) pred += Tree_7_class_0.predict(data);
    if (iters-- > 0) pred += Tree_8_class_0.predict(data);
    if (iters-- > 0) pred += Tree_9_class_0.predict(data);
    return pred;
    }
  }
// Forest representing a subset of trees scoring class 1
class Forest_0_class_1 {
  public static float predict(double[] data, int maxIters) {
    float pred  = 0;
    int   iters = maxIters;
    return pred;
    }
  }

