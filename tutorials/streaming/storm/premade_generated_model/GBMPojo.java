import java.util.Map;
import water.genmodel.GenUtils.*;

// AUTOGENERATED BY H2O at Sun Nov 16 22:45:01 PST 2014
// H2O v2.8.2.7 (rel-maxwell - aac13e28be50ba7ba478e8efc07e2d456877d2a4)
//
// Standalone prediction code with sample test data for GBMModel named GBM_a907aeff44437c42c76a65f3e424483d
//
// How to download, compile and execute:
//     mkdir tmpdir
//     cd tmpdir
//     curl http://192.168.2.110:54321/h2o-model.jar > h2o-model.jar
//     curl http://192.168.2.110:54321/2/GBMModelView.java?_modelKey=GBM_a907aeff44437c42c76a65f3e424483d > GBM_a907aeff44437c42c76a65f3e424483d.java
//     javac -cp h2o-model.jar -J-Xmx2g -J-XX:MaxPermSize=128m GBM_a907aeff44437c42c76a65f3e424483d.java
//
//     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)

public class GBMPojo extends water.genmodel.GeneratedModel {
  // Number of trees in this model.
  public static final int NTREES = 10;
  // Number of internal trees in this model (= NTREES*NCLASSES).
  public static final int NTREES_INTERNAL = 20;

  // Names of columns used by model.
  public static final String[] NAMES = {"Has4Legs","CoatColor","HairLength","TailLength","EnjoysPlay","StairsOutWindow","HoursSpentNapping","RespondsToCommands","EasilyFrightened","Age","Noise1","Noise2","Noise3","Noise4","Noise5","Label"};
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* Has4Legs */ ColInfo_0.VALUES,
    /* CoatColor */ ColInfo_1.VALUES,
    /* HairLength */ ColInfo_2.VALUES,
    /* TailLength */ ColInfo_3.VALUES,
    /* EnjoysPlay */ ColInfo_4.VALUES,
    /* StairsOutWindow */ ColInfo_5.VALUES,
    /* HoursSpentNapping */ ColInfo_6.VALUES,
    /* RespondsToCommands */ ColInfo_7.VALUES,
    /* EasilyFrightened */ ColInfo_8.VALUES,
    /* Age */ ColInfo_9.VALUES,
    /* Noise1 */ ColInfo_10.VALUES,
    /* Noise2 */ ColInfo_11.VALUES,
    /* Noise3 */ ColInfo_12.VALUES,
    /* Noise4 */ ColInfo_13.VALUES,
    /* Noise5 */ ColInfo_14.VALUES,
    /* Label */ ColInfo_15.VALUES
  };
  // Prior class distribution
  public static final float[] PRIOR_CLASS_DISTRIB = {0.327f,0.673f};
  // Class distribution used for model building
  public static final float[] MODEL_CLASS_DISTRIB = null;

  public String[]   getNames() { return NAMES; } 
  public String[][] getDomainValues() { return DOMAINS; }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final float[] predict( double[] data, float[] preds) { preds = predict( data, preds, 10); return preds; }
  public final float[] predict( double[] data, float[] preds, int maxIters ) {
    // System.err.println("Row (gencode.predict): " + java.util.Arrays.toString(data));
    java.util.Arrays.fill(preds,0f);
    // Call forest predicting class 0
    preds[1] += Forest_0_class_0.predict(data, maxIters - 0);
    // Call forest predicting class 1
    preds[2] += Forest_0_class_1.predict(data, maxIters - 0);
    // Compute Probabilities for classifier (scale via http://www.hongliangjie.com/2011/01/07/logsum/)
    float dsum = 0, maxval = Float.NEGATIVE_INFINITY;
    preds[2] = -preds[1];
    for(int i=1; i<preds.length; i++) maxval = Math.max(maxval, preds[i]);
    for(int i=1; i<preds.length; i++) dsum += (preds[i]=(float) Math.exp(preds[i] - maxval));
    for(int i=1; i<preds.length; i++) preds[i] = preds[i] / dsum;
    preds[0] = water.util.ModelUtils.getPrediction(preds,data);
    return preds;
  }
}
// The class representing column Has4Legs
class ColInfo_0 {
  public static final String[] VALUES = null;
}
// The class representing column CoatColor
class ColInfo_1 {
  public static final String[] VALUES = new String[5];
  static {
    ColInfo_1_0.fill(VALUES);
  }
  static final class ColInfo_1_0 {
    static final void fill(String[] sa) {
      sa[0] = "Black";
      sa[1] = "Brown";
      sa[2] = "Grey";
      sa[3] = "Spotted";
      sa[4] = "White";
    }
  }
}
// The class representing column HairLength
class ColInfo_2 {
  public static final String[] VALUES = null;
}
// The class representing column TailLength
class ColInfo_3 {
  public static final String[] VALUES = null;
}
// The class representing column EnjoysPlay
class ColInfo_4 {
  public static final String[] VALUES = null;
}
// The class representing column StairsOutWindow
class ColInfo_5 {
  public static final String[] VALUES = null;
}
// The class representing column HoursSpentNapping
class ColInfo_6 {
  public static final String[] VALUES = null;
}
// The class representing column RespondsToCommands
class ColInfo_7 {
  public static final String[] VALUES = null;
}
// The class representing column EasilyFrightened
class ColInfo_8 {
  public static final String[] VALUES = null;
}
// The class representing column Age
class ColInfo_9 {
  public static final String[] VALUES = null;
}
// The class representing column Noise1
class ColInfo_10 {
  public static final String[] VALUES = null;
}
// The class representing column Noise2
class ColInfo_11 {
  public static final String[] VALUES = null;
}
// The class representing column Noise3
class ColInfo_12 {
  public static final String[] VALUES = null;
}
// The class representing column Noise4
class ColInfo_13 {
  public static final String[] VALUES = null;
}
// The class representing column Noise5
class ColInfo_14 {
  public static final String[] VALUES = null;
}
// The class representing column Label
class ColInfo_15 {
  public static final String[] VALUES = new String[2];
  static {
    ColInfo_15_0.fill(VALUES);
  }
  static final class ColInfo_15_0 {
    static final void fill(String[] sa) {
      sa[0] = "cat";
      sa[1] = "dog";
    }
  }
}

// Tree predictor for 0-tree and 0-class
class Tree_0_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 16.0f ? -0.1f : 0.1f)
            : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.018522264f ? -0.08571429f : -0.1f))
          : -0.05f)
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.1f : -0.1f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 2.0f ? 0.1f : -0.1f)
            : -0.1f)
          : (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f
            ? 0.033333335f
            : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 2.0f ? -0.0882353f : 0.1f)))
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 8.0f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.05f : 0.1f)
            : -0.1f)
          : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.093939394f : 0.011111111f)
            : 0.1f))));
      return pred;
  }
}

// Tree predictor for 1-tree and 0-class
class Tree_1_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.018522264f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 2.0f ? -0.092123024f : 0.10934997f)
            : (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f ? -0.077945605f : -0.09093654f))
          : -0.04511677f)
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.090936534f : -0.09093654f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 2.0f ? 0.090936534f : -0.09093654f)
            : -0.09093654f)
          : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 10.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f ? 0.030034577f : -0.080616154f)
            : 0.10964998f))
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[5]) || (float) data[5 /* StairsOutWindow */] < 0.5f
            ? -0.09309726f
            : (Double.isNaN(data[8]) || (float) data[8 /* EasilyFrightened */] < 0.5f ? -0.046635892f : 0.091898024f))
          : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f
            ? (Double.isNaN(data[8]) || (float) data[8 /* EasilyFrightened */] < 0.5f ? 0.0063562263f : 0.08623979f)
            : 0.090936534f))));
      return pred;
  }
}

// Tree predictor for 2-tree and 0-class
class Tree_2_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 16.0f ? -0.08502744f : 0.09784249f)
            : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.018522264f ? -0.07160361f : -0.08412909f))
          : -0.040884577f)
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.08412909f : -0.08412909f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 2.0f ? 0.08412909f : -0.08412909f)
            : -0.08412909f)
          : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 2.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f ? 0.027113596f : -0.07407626f)
            : 0.09809871f))
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[5]) || (float) data[5 /* StairsOutWindow */] < 0.5f
            ? -0.08578375f
            : (Double.isNaN(data[8]) || (float) data[8 /* EasilyFrightened */] < 0.5f ? -0.04222018f : 0.08488425f))
          : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f
            ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 2.0f ? 0.07179961f : -0.046795167f)
            : 0.08412909f))));
      return pred;
  }
}

// Tree predictor for 3-tree and 0-class
class Tree_3_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 8.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f ? -0.06589537f : -0.07887802f)
            : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.034091994f ? 0.105034426f : -0.07888316f))
          : -0.037162077f)
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.078843705f : -0.078843705f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? -0.078843705f : -0.080758534f)
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f ? 0.080414124f : -0.078843705f)
            : (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.43833554f ? -0.08497501f : 0.022911284f))
          : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.075979866f : -0.0024788494f)
            : 0.078843705f))));
      return pred;
  }
}

// Tree predictor for 4-tree and 0-class
class Tree_4_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 8.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f ? -0.06145472f : -0.07466362f)
            : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.034091994f ? 0.09460697f : -0.07466771f))
          : -0.033849742f)
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.074635886f : -0.07463589f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? -0.07463589f : -0.076170966f)
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f ? 0.07594993f : -0.07463589f)
            : (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.43833554f ? -0.07962237f : 0.020664178f))
          : (Double.isNaN(data[8]) || (float) data[8 /* EasilyFrightened */] < 0.5f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.014005956f : 0.074635886f)
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 4.5f ? 0.06310123f : 0.07490533f)))));
      return pred;
  }
}

// Tree predictor for 5-tree and 0-class
class Tree_5_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 8.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f ? -0.05759618f : -0.07124254f)
            : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.034091994f ? 0.08691713f : -0.07124585f))
          : -0.030875674f)
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.07121976f : -0.07121975f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? -0.07121975f : -0.07247286f)
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f ? 0.072336845f : -0.07121975f)
            : (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.43833554f ? -0.075353384f : 0.018648323f))
          : (Double.isNaN(data[8]) || (float) data[8 /* EasilyFrightened */] < 0.5f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 5.5f ? -0.012583632f : 0.07121976f)
            : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 2.0f ? 0.07064989f : 0.054427464f)))));
      return pred;
  }
}

// Tree predictor for 6-tree and 0-class
class Tree_6_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f
          ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 8.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f ? -0.054176204f : -0.0684216f)
            : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.034091994f ? 0.0810265f : -0.06842432f))
          : -0.028186742f)
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.06840262f : -0.06840262f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 2.0f ? 0.07018015f : -0.06840262f)
            : -0.06840262f)
          : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 10.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 2.0f ? -0.057644416f : 0.08490431f)
            : 0.09272574f))
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.99587166f
          ? (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 8.0f ? 0.049119473f : -0.0771824f)
            : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 2.0f ? 0.067440696f : 0.040521573f))
          : -0.106397234f)));
      return pred;
  }
}

// Tree predictor for 7-tree and 0-class
class Tree_7_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 16.0f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 6.5f ? -0.06831704f : -0.06643864f)
            : 0.12399469f)
          : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 9.0f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f ? -0.06576067f : -0.079367004f)
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f ? -0.06604631f : 0.13512956f)))
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.066049665f : -0.06604966f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 2.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? -0.06604966f : -0.06732367f)
        : (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
          ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f ? 0.06752467f : -0.06604966f)
            : (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.43833554f ? -0.07068736f : 0.016601887f))
          : (Double.isNaN(data[8]) || (float) data[8 /* EasilyFrightened */] < 0.5f
            ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f ? 0.06859257f : -0.010818458f)
            : (Double.isNaN(data[12]) || (float) data[12 /* Noise3 */] < 0.20475087f ? 0.058604177f : 0.06625743f)))));
      return pred;
  }
}

// Tree predictor for 8-tree and 0-class
class Tree_8_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 16.0f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 6.5f ? -0.06597776f : -0.06439322f)
            : 0.10789393f)
          : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 9.0f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f ? -0.06374211f : -0.07505661f)
            : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 7.0f ? -0.06406074f : 0.11496933f)))
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.06406358f : -0.06406359f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 2.0f ? 0.06543442f : -0.06406359f)
            : -0.06406359f)
          : (Double.isNaN(data[14]) || (float) data[14 /* Noise5 */] < 0.96072805f
            ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 10.0f ? -0.05327027f : 0.08108842f)
            : 0.08154104f))
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.99587166f
          ? (Double.isNaN(data[2]) || (float) data[2 /* HairLength */] < 0.5f
            ? (Double.isNaN(data[5]) || (float) data[5 /* StairsOutWindow */] < 0.5f ? -0.07412143f : 0.046036843f)
            : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 2.0f ? 0.06291005f : 0.03430368f))
          : -0.09461137f)));
      return pred;
  }
}

// Tree predictor for 9-tree and 0-class
class Tree_9_class_0 {
  static final float predict(double[] data) {
    float pred =  (Double.isNaN(data[6]) || (float) data[6 /* HoursSpentNapping */] < 2.5f
      ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 6.0f
        ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f
          ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 16.0f
            ? (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 6.5f ? -0.064002596f : -0.06265397f)
            : 0.096764706f)
          : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] != 8.0f
            ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 9.0f ? -0.06252945f : -0.053020116f)
            : (Double.isNaN(data[13]) || (float) data[13 /* Noise4 */] < 0.034091994f ? 0.08418525f : -0.0623836f)))
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.39836025f ? 0.062372312f : -0.062372316f))
      : (Double.isNaN(data[3]) || (float) data[3 /* TailLength */] < 3.5f
        ? (Double.isNaN(data[7]) || (float) data[7 /* RespondsToCommands */] < 0.5f
          ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 1.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] != 2.0f ? 0.063551314f : -0.062372316f)
            : -0.062372316f)
          : (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 2.0f
            ? (Double.isNaN(data[1]) || (float) data[1 /* CoatColor */] < 0.5f ? 0.03033402f : -0.054967772f)
            : 0.08169436f))
        : (Double.isNaN(data[11]) || (float) data[11 /* Noise2 */] < 0.99587166f
          ? (Double.isNaN(data[9]) || (float) data[9 /* Age */] != 12.0f
            ? (Double.isNaN(data[5]) || (float) data[5 /* StairsOutWindow */] < 0.5f ? 0.027830968f : 0.059075475f)
            : -0.03363617f)
          : -0.08692046f)));
      return pred;
  }
}
// Forest representing a subset of trees scoring class 0
class Forest_0_class_0 {
  public static float predict(double[] data, int maxIters) {
    float pred  = 0;
    int   iters = maxIters;
    if (iters-- > 0) pred += Tree_0_class_0.predict(data);
    if (iters-- > 0) pred += Tree_1_class_0.predict(data);
    if (iters-- > 0) pred += Tree_2_class_0.predict(data);
    if (iters-- > 0) pred += Tree_3_class_0.predict(data);
    if (iters-- > 0) pred += Tree_4_class_0.predict(data);
    if (iters-- > 0) pred += Tree_5_class_0.predict(data);
    if (iters-- > 0) pred += Tree_6_class_0.predict(data);
    if (iters-- > 0) pred += Tree_7_class_0.predict(data);
    if (iters-- > 0) pred += Tree_8_class_0.predict(data);
    if (iters-- > 0) pred += Tree_9_class_0.predict(data);
    return pred;
    }
  }
// Forest representing a subset of trees scoring class 1
class Forest_0_class_1 {
  public static float predict(double[] data, int maxIters) {
    float pred  = 0;
    int   iters = maxIters;
    return pred;
    }
  }

